#!/usr/bin/env node
'use strict';

var require$$0 = require('kleur');
var require$$0$1 = require('readline');
var require$$3 = require('sisteransi');
var require$$2 = require('events');
var util$2 = require('util');
var fs = require('fs');
var path = require('path');
var child_process = require('child_process');
var https = require('https');
require('rollup');
require('@rollup/plugin-typescript');
require('@rollup/plugin-commonjs');
require('@rollup/plugin-node-resolve');
require('@rollup/plugin-json');
require('typescript');

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var prompts$3 = {};

var action$1;
var hasRequiredAction$1;

function requireAction$1 () {
	if (hasRequiredAction$1) return action$1;
	hasRequiredAction$1 = 1;

	action$1 = (key, isSelect) => {
	  if (key.meta && key.name !== 'escape') return;

	  if (key.ctrl) {
	    if (key.name === 'a') return 'first';
	    if (key.name === 'c') return 'abort';
	    if (key.name === 'd') return 'abort';
	    if (key.name === 'e') return 'last';
	    if (key.name === 'g') return 'reset';
	  }

	  if (isSelect) {
	    if (key.name === 'j') return 'down';
	    if (key.name === 'k') return 'up';
	  }

	  if (key.name === 'return') return 'submit';
	  if (key.name === 'enter') return 'submit'; // ctrl + J

	  if (key.name === 'backspace') return 'delete';
	  if (key.name === 'delete') return 'deleteForward';
	  if (key.name === 'abort') return 'abort';
	  if (key.name === 'escape') return 'exit';
	  if (key.name === 'tab') return 'next';
	  if (key.name === 'pagedown') return 'nextPage';
	  if (key.name === 'pageup') return 'prevPage'; // TODO create home() in prompt types (e.g. TextPrompt)

	  if (key.name === 'home') return 'home'; // TODO create end() in prompt types (e.g. TextPrompt)

	  if (key.name === 'end') return 'end';
	  if (key.name === 'up') return 'up';
	  if (key.name === 'down') return 'down';
	  if (key.name === 'right') return 'right';
	  if (key.name === 'left') return 'left';
	  return false;
	};
	return action$1;
}

var strip$1;
var hasRequiredStrip$1;

function requireStrip$1 () {
	if (hasRequiredStrip$1) return strip$1;
	hasRequiredStrip$1 = 1;

	strip$1 = str => {
	  const pattern = ['[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)', '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'].join('|');
	  const RGX = new RegExp(pattern, 'g');
	  return typeof str === 'string' ? str.replace(RGX, '') : str;
	};
	return strip$1;
}

var clear$3;
var hasRequiredClear$1;

function requireClear$1 () {
	if (hasRequiredClear$1) return clear$3;
	hasRequiredClear$1 = 1;

	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

	const strip = requireStrip$1();

	const _require = require$$3,
	      erase = _require.erase,
	      cursor = _require.cursor;

	const width = str => [...strip(str)].length;
	/**
	 * @param {string} prompt
	 * @param {number} perLine
	 */


	clear$3 = function (prompt, perLine) {
	  if (!perLine) return erase.line + cursor.to(0);
	  let rows = 0;
	  const lines = prompt.split(/\r?\n/);

	  var _iterator = _createForOfIteratorHelper(lines),
	      _step;

	  try {
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      let line = _step.value;
	      rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / perLine);
	    }
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }

	  return erase.lines(rows);
	};
	return clear$3;
}

var figures_1$1;
var hasRequiredFigures$1;

function requireFigures$1 () {
	if (hasRequiredFigures$1) return figures_1$1;
	hasRequiredFigures$1 = 1;

	const main = {
	  arrowUp: '↑',
	  arrowDown: '↓',
	  arrowLeft: '←',
	  arrowRight: '→',
	  radioOn: '◉',
	  radioOff: '◯',
	  tick: '✔',
	  cross: '✖',
	  ellipsis: '…',
	  pointerSmall: '›',
	  line: '─',
	  pointer: '❯'
	};
	const win = {
	  arrowUp: main.arrowUp,
	  arrowDown: main.arrowDown,
	  arrowLeft: main.arrowLeft,
	  arrowRight: main.arrowRight,
	  radioOn: '(*)',
	  radioOff: '( )',
	  tick: '√',
	  cross: '×',
	  ellipsis: '...',
	  pointerSmall: '»',
	  line: '─',
	  pointer: '>'
	};
	const figures = process.platform === 'win32' ? win : main;
	figures_1$1 = figures;
	return figures_1$1;
}

var style$3;
var hasRequiredStyle$1;

function requireStyle$1 () {
	if (hasRequiredStyle$1) return style$3;
	hasRequiredStyle$1 = 1;

	const c = require$$0;

	const figures = requireFigures$1(); // rendering user input.


	const styles = Object.freeze({
	  password: {
	    scale: 1,
	    render: input => '*'.repeat(input.length)
	  },
	  emoji: {
	    scale: 2,
	    render: input => '😃'.repeat(input.length)
	  },
	  invisible: {
	    scale: 0,
	    render: input => ''
	  },
	  default: {
	    scale: 1,
	    render: input => `${input}`
	  }
	});

	const render = type => styles[type] || styles.default; // icon to signalize a prompt.


	const symbols = Object.freeze({
	  aborted: c.red(figures.cross),
	  done: c.green(figures.tick),
	  exited: c.yellow(figures.cross),
	  default: c.cyan('?')
	});

	const symbol = (done, aborted, exited) => aborted ? symbols.aborted : exited ? symbols.exited : done ? symbols.done : symbols.default; // between the question and the user's input.


	const delimiter = completing => c.gray(completing ? figures.ellipsis : figures.pointerSmall);

	const item = (expandable, expanded) => c.gray(expandable ? expanded ? figures.pointerSmall : '+' : figures.line);

	style$3 = {
	  styles,
	  render,
	  symbols,
	  symbol,
	  delimiter,
	  item
	};
	return style$3;
}

var lines$1;
var hasRequiredLines$1;

function requireLines$1 () {
	if (hasRequiredLines$1) return lines$1;
	hasRequiredLines$1 = 1;

	const strip = requireStrip$1();
	/**
	 * @param {string} msg
	 * @param {number} perLine
	 */


	lines$1 = function (msg, perLine) {
	  let lines = String(strip(msg) || '').split(/\r?\n/);
	  if (!perLine) return lines.length;
	  return lines.map(l => Math.ceil(l.length / perLine)).reduce((a, b) => a + b);
	};
	return lines$1;
}

var wrap$1;
var hasRequiredWrap$1;

function requireWrap$1 () {
	if (hasRequiredWrap$1) return wrap$1;
	hasRequiredWrap$1 = 1;
	/**
	 * @param {string} msg The message to wrap
	 * @param {object} opts
	 * @param {number|string} [opts.margin] Left margin
	 * @param {number} opts.width Maximum characters per line including the margin
	 */

	wrap$1 = (msg, opts = {}) => {
	  const tab = Number.isSafeInteger(parseInt(opts.margin)) ? new Array(parseInt(opts.margin)).fill(' ').join('') : opts.margin || '';
	  const width = opts.width;
	  return (msg || '').split(/\r?\n/g).map(line => line.split(/\s+/g).reduce((arr, w) => {
	    if (w.length + tab.length >= width || arr[arr.length - 1].length + w.length + 1 < width) arr[arr.length - 1] += ` ${w}`;else arr.push(`${tab}${w}`);
	    return arr;
	  }, [tab]).join('\n')).join('\n');
	};
	return wrap$1;
}

var entriesToDisplay$1;
var hasRequiredEntriesToDisplay$1;

function requireEntriesToDisplay$1 () {
	if (hasRequiredEntriesToDisplay$1) return entriesToDisplay$1;
	hasRequiredEntriesToDisplay$1 = 1;
	/**
	 * Determine what entries should be displayed on the screen, based on the
	 * currently selected index and the maximum visible. Used in list-based
	 * prompts like `select` and `multiselect`.
	 *
	 * @param {number} cursor the currently selected entry
	 * @param {number} total the total entries available to display
	 * @param {number} [maxVisible] the number of entries that can be displayed
	 */

	entriesToDisplay$1 = (cursor, total, maxVisible) => {
	  maxVisible = maxVisible || total;
	  let startIndex = Math.min(total - maxVisible, cursor - Math.floor(maxVisible / 2));
	  if (startIndex < 0) startIndex = 0;
	  let endIndex = Math.min(startIndex + maxVisible, total);
	  return {
	    startIndex,
	    endIndex
	  };
	};
	return entriesToDisplay$1;
}

var util$1;
var hasRequiredUtil$1;

function requireUtil$1 () {
	if (hasRequiredUtil$1) return util$1;
	hasRequiredUtil$1 = 1;

	util$1 = {
	  action: requireAction$1(),
	  clear: requireClear$1(),
	  style: requireStyle$1(),
	  strip: requireStrip$1(),
	  figures: requireFigures$1(),
	  lines: requireLines$1(),
	  wrap: requireWrap$1(),
	  entriesToDisplay: requireEntriesToDisplay$1()
	};
	return util$1;
}

var prompt$1;
var hasRequiredPrompt$1;

function requirePrompt$1 () {
	if (hasRequiredPrompt$1) return prompt$1;
	hasRequiredPrompt$1 = 1;

	const readline = require$$0$1;

	const _require = requireUtil$1(),
	      action = _require.action;

	const EventEmitter = require$$2;

	const _require2 = require$$3,
	      beep = _require2.beep,
	      cursor = _require2.cursor;

	const color = require$$0;
	/**
	 * Base prompt skeleton
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */


	class Prompt extends EventEmitter {
	  constructor(opts = {}) {
	    super();
	    this.firstRender = true;
	    this.in = opts.stdin || process.stdin;
	    this.out = opts.stdout || process.stdout;

	    this.onRender = (opts.onRender || (() => void 0)).bind(this);

	    const rl = readline.createInterface({
	      input: this.in,
	      escapeCodeTimeout: 50
	    });
	    readline.emitKeypressEvents(this.in, rl);
	    if (this.in.isTTY) this.in.setRawMode(true);
	    const isSelect = ['SelectPrompt', 'MultiselectPrompt'].indexOf(this.constructor.name) > -1;

	    const keypress = (str, key) => {
	      let a = action(key, isSelect);

	      if (a === false) {
	        this._ && this._(str, key);
	      } else if (typeof this[a] === 'function') {
	        this[a](key);
	      } else {
	        this.bell();
	      }
	    };

	    this.close = () => {
	      this.out.write(cursor.show);
	      this.in.removeListener('keypress', keypress);
	      if (this.in.isTTY) this.in.setRawMode(false);
	      rl.close();
	      this.emit(this.aborted ? 'abort' : this.exited ? 'exit' : 'submit', this.value);
	      this.closed = true;
	    };

	    this.in.on('keypress', keypress);
	  }

	  fire() {
	    this.emit('state', {
	      value: this.value,
	      aborted: !!this.aborted,
	      exited: !!this.exited
	    });
	  }

	  bell() {
	    this.out.write(beep);
	  }

	  render() {
	    this.onRender(color);
	    if (this.firstRender) this.firstRender = false;
	  }

	}

	prompt$1 = Prompt;
	return prompt$1;
}

var text$1;
var hasRequiredText$1;

function requireText$1 () {
	if (hasRequiredText$1) return text$1;
	hasRequiredText$1 = 1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const color = require$$0;

	const Prompt = requirePrompt$1();

	const _require = require$$3,
	      erase = _require.erase,
	      cursor = _require.cursor;

	const _require2 = requireUtil$1(),
	      style = _require2.style,
	      clear = _require2.clear,
	      lines = _require2.lines,
	      figures = _require2.figures;
	/**
	 * TextPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {String} [opts.style='default'] Render style
	 * @param {String} [opts.initial] Default value
	 * @param {Function} [opts.validate] Validate function
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {String} [opts.error] The invalid error label
	 */


	class TextPrompt extends Prompt {
	  constructor(opts = {}) {
	    super(opts);
	    this.transform = style.render(opts.style);
	    this.scale = this.transform.scale;
	    this.msg = opts.message;
	    this.initial = opts.initial || ``;

	    this.validator = opts.validate || (() => true);

	    this.value = ``;
	    this.errorMsg = opts.error || `Please Enter A Valid Value`;
	    this.cursor = Number(!!this.initial);
	    this.cursorOffset = 0;
	    this.clear = clear(``, this.out.columns);
	    this.render();
	  }

	  set value(v) {
	    if (!v && this.initial) {
	      this.placeholder = true;
	      this.rendered = color.gray(this.transform.render(this.initial));
	    } else {
	      this.placeholder = false;
	      this.rendered = this.transform.render(v);
	    }

	    this._value = v;
	    this.fire();
	  }

	  get value() {
	    return this._value;
	  }

	  reset() {
	    this.value = ``;
	    this.cursor = Number(!!this.initial);
	    this.cursorOffset = 0;
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.value = this.value || this.initial;
	    this.done = this.aborted = true;
	    this.error = false;
	    this.red = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  validate() {
	    var _this = this;

	    return _asyncToGenerator(function* () {
	      let valid = yield _this.validator(_this.value);

	      if (typeof valid === `string`) {
	        _this.errorMsg = valid;
	        valid = false;
	      }

	      _this.error = !valid;
	    })();
	  }

	  submit() {
	    var _this2 = this;

	    return _asyncToGenerator(function* () {
	      _this2.value = _this2.value || _this2.initial;
	      _this2.cursorOffset = 0;
	      _this2.cursor = _this2.rendered.length;
	      yield _this2.validate();

	      if (_this2.error) {
	        _this2.red = true;

	        _this2.fire();

	        _this2.render();

	        return;
	      }

	      _this2.done = true;
	      _this2.aborted = false;

	      _this2.fire();

	      _this2.render();

	      _this2.out.write('\n');

	      _this2.close();
	    })();
	  }

	  next() {
	    if (!this.placeholder) return this.bell();
	    this.value = this.initial;
	    this.cursor = this.rendered.length;
	    this.fire();
	    this.render();
	  }

	  moveCursor(n) {
	    if (this.placeholder) return;
	    this.cursor = this.cursor + n;
	    this.cursorOffset += n;
	  }

	  _(c, key) {
	    let s1 = this.value.slice(0, this.cursor);
	    let s2 = this.value.slice(this.cursor);
	    this.value = `${s1}${c}${s2}`;
	    this.red = false;
	    this.cursor = this.placeholder ? 0 : s1.length + 1;
	    this.render();
	  }

	  delete() {
	    if (this.isCursorAtStart()) return this.bell();
	    let s1 = this.value.slice(0, this.cursor - 1);
	    let s2 = this.value.slice(this.cursor);
	    this.value = `${s1}${s2}`;
	    this.red = false;

	    if (this.isCursorAtStart()) {
	      this.cursorOffset = 0;
	    } else {
	      this.cursorOffset++;
	      this.moveCursor(-1);
	    }

	    this.render();
	  }

	  deleteForward() {
	    if (this.cursor * this.scale >= this.rendered.length || this.placeholder) return this.bell();
	    let s1 = this.value.slice(0, this.cursor);
	    let s2 = this.value.slice(this.cursor + 1);
	    this.value = `${s1}${s2}`;
	    this.red = false;

	    if (this.isCursorAtEnd()) {
	      this.cursorOffset = 0;
	    } else {
	      this.cursorOffset++;
	    }

	    this.render();
	  }

	  first() {
	    this.cursor = 0;
	    this.render();
	  }

	  last() {
	    this.cursor = this.value.length;
	    this.render();
	  }

	  left() {
	    if (this.cursor <= 0 || this.placeholder) return this.bell();
	    this.moveCursor(-1);
	    this.render();
	  }

	  right() {
	    if (this.cursor * this.scale >= this.rendered.length || this.placeholder) return this.bell();
	    this.moveCursor(1);
	    this.render();
	  }

	  isCursorAtStart() {
	    return this.cursor === 0 || this.placeholder && this.cursor === 1;
	  }

	  isCursorAtEnd() {
	    return this.cursor === this.rendered.length || this.placeholder && this.cursor === this.rendered.length + 1;
	  }

	  render() {
	    if (this.closed) return;

	    if (!this.firstRender) {
	      if (this.outputError) this.out.write(cursor.down(lines(this.outputError, this.out.columns) - 1) + clear(this.outputError, this.out.columns));
	      this.out.write(clear(this.outputText, this.out.columns));
	    }

	    super.render();
	    this.outputError = '';
	    this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), this.red ? color.red(this.rendered) : this.rendered].join(` `);

	    if (this.error) {
	      this.outputError += this.errorMsg.split(`\n`).reduce((a, l, i) => a + `\n${i ? ' ' : figures.pointerSmall} ${color.red().italic(l)}`, ``);
	    }

	    this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore + cursor.move(this.cursorOffset, 0));
	  }

	}

	text$1 = TextPrompt;
	return text$1;
}

var select$1;
var hasRequiredSelect$1;

function requireSelect$1 () {
	if (hasRequiredSelect$1) return select$1;
	hasRequiredSelect$1 = 1;

	const color = require$$0;

	const Prompt = requirePrompt$1();

	const _require = requireUtil$1(),
	      style = _require.style,
	      clear = _require.clear,
	      figures = _require.figures,
	      wrap = _require.wrap,
	      entriesToDisplay = _require.entriesToDisplay;

	const _require2 = require$$3,
	      cursor = _require2.cursor;
	/**
	 * SelectPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Array} opts.choices Array of choice objects
	 * @param {String} [opts.hint] Hint to display
	 * @param {Number} [opts.initial] Index of default value
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {Number} [opts.optionsPerPage=10] Max options to display at once
	 */


	class SelectPrompt extends Prompt {
	  constructor(opts = {}) {
	    super(opts);
	    this.msg = opts.message;
	    this.hint = opts.hint || '- Use arrow-keys. Return to submit.';
	    this.warn = opts.warn || '- This option is disabled';
	    this.cursor = opts.initial || 0;
	    this.choices = opts.choices.map((ch, idx) => {
	      if (typeof ch === 'string') ch = {
	        title: ch,
	        value: idx
	      };
	      return {
	        title: ch && (ch.title || ch.value || ch),
	        value: ch && (ch.value === undefined ? idx : ch.value),
	        description: ch && ch.description,
	        selected: ch && ch.selected,
	        disabled: ch && ch.disabled
	      };
	    });
	    this.optionsPerPage = opts.optionsPerPage || 10;
	    this.value = (this.choices[this.cursor] || {}).value;
	    this.clear = clear('', this.out.columns);
	    this.render();
	  }

	  moveCursor(n) {
	    this.cursor = n;
	    this.value = this.choices[n].value;
	    this.fire();
	  }

	  reset() {
	    this.moveCursor(0);
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    if (!this.selection.disabled) {
	      this.done = true;
	      this.aborted = false;
	      this.fire();
	      this.render();
	      this.out.write('\n');
	      this.close();
	    } else this.bell();
	  }

	  first() {
	    this.moveCursor(0);
	    this.render();
	  }

	  last() {
	    this.moveCursor(this.choices.length - 1);
	    this.render();
	  }

	  up() {
	    if (this.cursor === 0) {
	      this.moveCursor(this.choices.length - 1);
	    } else {
	      this.moveCursor(this.cursor - 1);
	    }

	    this.render();
	  }

	  down() {
	    if (this.cursor === this.choices.length - 1) {
	      this.moveCursor(0);
	    } else {
	      this.moveCursor(this.cursor + 1);
	    }

	    this.render();
	  }

	  next() {
	    this.moveCursor((this.cursor + 1) % this.choices.length);
	    this.render();
	  }

	  _(c, key) {
	    if (c === ' ') return this.submit();
	  }

	  get selection() {
	    return this.choices[this.cursor];
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);else this.out.write(clear(this.outputText, this.out.columns));
	    super.render();

	    let _entriesToDisplay = entriesToDisplay(this.cursor, this.choices.length, this.optionsPerPage),
	        startIndex = _entriesToDisplay.startIndex,
	        endIndex = _entriesToDisplay.endIndex; // Print prompt


	    this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.done ? this.selection.title : this.selection.disabled ? color.yellow(this.warn) : color.gray(this.hint)].join(' '); // Print choices

	    if (!this.done) {
	      this.outputText += '\n';

	      for (let i = startIndex; i < endIndex; i++) {
	        let title,
	            prefix,
	            desc = '',
	            v = this.choices[i]; // Determine whether to display "more choices" indicators

	        if (i === startIndex && startIndex > 0) {
	          prefix = figures.arrowUp;
	        } else if (i === endIndex - 1 && endIndex < this.choices.length) {
	          prefix = figures.arrowDown;
	        } else {
	          prefix = ' ';
	        }

	        if (v.disabled) {
	          title = this.cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
	          prefix = (this.cursor === i ? color.bold().gray(figures.pointer) + ' ' : '  ') + prefix;
	        } else {
	          title = this.cursor === i ? color.cyan().underline(v.title) : v.title;
	          prefix = (this.cursor === i ? color.cyan(figures.pointer) + ' ' : '  ') + prefix;

	          if (v.description && this.cursor === i) {
	            desc = ` - ${v.description}`;

	            if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
	              desc = '\n' + wrap(v.description, {
	                margin: 3,
	                width: this.out.columns
	              });
	            }
	          }
	        }

	        this.outputText += `${prefix} ${title}${color.gray(desc)}\n`;
	      }
	    }

	    this.out.write(this.outputText);
	  }

	}

	select$1 = SelectPrompt;
	return select$1;
}

var toggle$1;
var hasRequiredToggle$1;

function requireToggle$1 () {
	if (hasRequiredToggle$1) return toggle$1;
	hasRequiredToggle$1 = 1;

	const color = require$$0;

	const Prompt = requirePrompt$1();

	const _require = requireUtil$1(),
	      style = _require.style,
	      clear = _require.clear;

	const _require2 = require$$3,
	      cursor = _require2.cursor,
	      erase = _require2.erase;
	/**
	 * TogglePrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Boolean} [opts.initial=false] Default value
	 * @param {String} [opts.active='no'] Active label
	 * @param {String} [opts.inactive='off'] Inactive label
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */


	class TogglePrompt extends Prompt {
	  constructor(opts = {}) {
	    super(opts);
	    this.msg = opts.message;
	    this.value = !!opts.initial;
	    this.active = opts.active || 'on';
	    this.inactive = opts.inactive || 'off';
	    this.initialValue = this.value;
	    this.render();
	  }

	  reset() {
	    this.value = this.initialValue;
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    this.done = true;
	    this.aborted = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  deactivate() {
	    if (this.value === false) return this.bell();
	    this.value = false;
	    this.render();
	  }

	  activate() {
	    if (this.value === true) return this.bell();
	    this.value = true;
	    this.render();
	  }

	  delete() {
	    this.deactivate();
	  }

	  left() {
	    this.deactivate();
	  }

	  right() {
	    this.activate();
	  }

	  down() {
	    this.deactivate();
	  }

	  up() {
	    this.activate();
	  }

	  next() {
	    this.value = !this.value;
	    this.fire();
	    this.render();
	  }

	  _(c, key) {
	    if (c === ' ') {
	      this.value = !this.value;
	    } else if (c === '1') {
	      this.value = true;
	    } else if (c === '0') {
	      this.value = false;
	    } else return this.bell();

	    this.render();
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);else this.out.write(clear(this.outputText, this.out.columns));
	    super.render();
	    this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), this.value ? this.inactive : color.cyan().underline(this.inactive), color.gray('/'), this.value ? color.cyan().underline(this.active) : this.active].join(' ');
	    this.out.write(erase.line + cursor.to(0) + this.outputText);
	  }

	}

	toggle$1 = TogglePrompt;
	return toggle$1;
}

var datepart$1;
var hasRequiredDatepart$1;

function requireDatepart$1 () {
	if (hasRequiredDatepart$1) return datepart$1;
	hasRequiredDatepart$1 = 1;

	class DatePart {
	  constructor({
	    token,
	    date,
	    parts,
	    locales
	  }) {
	    this.token = token;
	    this.date = date || new Date();
	    this.parts = parts || [this];
	    this.locales = locales || {};
	  }

	  up() {}

	  down() {}

	  next() {
	    const currentIdx = this.parts.indexOf(this);
	    return this.parts.find((part, idx) => idx > currentIdx && part instanceof DatePart);
	  }

	  setTo(val) {}

	  prev() {
	    let parts = [].concat(this.parts).reverse();
	    const currentIdx = parts.indexOf(this);
	    return parts.find((part, idx) => idx > currentIdx && part instanceof DatePart);
	  }

	  toString() {
	    return String(this.date);
	  }

	}

	datepart$1 = DatePart;
	return datepart$1;
}

var meridiem$1;
var hasRequiredMeridiem$1;

function requireMeridiem$1 () {
	if (hasRequiredMeridiem$1) return meridiem$1;
	hasRequiredMeridiem$1 = 1;

	const DatePart = requireDatepart$1();

	class Meridiem extends DatePart {
	  constructor(opts = {}) {
	    super(opts);
	  }

	  up() {
	    this.date.setHours((this.date.getHours() + 12) % 24);
	  }

	  down() {
	    this.up();
	  }

	  toString() {
	    let meridiem = this.date.getHours() > 12 ? 'pm' : 'am';
	    return /\A/.test(this.token) ? meridiem.toUpperCase() : meridiem;
	  }

	}

	meridiem$1 = Meridiem;
	return meridiem$1;
}

var day$1;
var hasRequiredDay$1;

function requireDay$1 () {
	if (hasRequiredDay$1) return day$1;
	hasRequiredDay$1 = 1;

	const DatePart = requireDatepart$1();

	const pos = n => {
	  n = n % 10;
	  return n === 1 ? 'st' : n === 2 ? 'nd' : n === 3 ? 'rd' : 'th';
	};

	class Day extends DatePart {
	  constructor(opts = {}) {
	    super(opts);
	  }

	  up() {
	    this.date.setDate(this.date.getDate() + 1);
	  }

	  down() {
	    this.date.setDate(this.date.getDate() - 1);
	  }

	  setTo(val) {
	    this.date.setDate(parseInt(val.substr(-2)));
	  }

	  toString() {
	    let date = this.date.getDate();
	    let day = this.date.getDay();
	    return this.token === 'DD' ? String(date).padStart(2, '0') : this.token === 'Do' ? date + pos(date) : this.token === 'd' ? day + 1 : this.token === 'ddd' ? this.locales.weekdaysShort[day] : this.token === 'dddd' ? this.locales.weekdays[day] : date;
	  }

	}

	day$1 = Day;
	return day$1;
}

var hours$1;
var hasRequiredHours$1;

function requireHours$1 () {
	if (hasRequiredHours$1) return hours$1;
	hasRequiredHours$1 = 1;

	const DatePart = requireDatepart$1();

	class Hours extends DatePart {
	  constructor(opts = {}) {
	    super(opts);
	  }

	  up() {
	    this.date.setHours(this.date.getHours() + 1);
	  }

	  down() {
	    this.date.setHours(this.date.getHours() - 1);
	  }

	  setTo(val) {
	    this.date.setHours(parseInt(val.substr(-2)));
	  }

	  toString() {
	    let hours = this.date.getHours();
	    if (/h/.test(this.token)) hours = hours % 12 || 12;
	    return this.token.length > 1 ? String(hours).padStart(2, '0') : hours;
	  }

	}

	hours$1 = Hours;
	return hours$1;
}

var milliseconds$1;
var hasRequiredMilliseconds$1;

function requireMilliseconds$1 () {
	if (hasRequiredMilliseconds$1) return milliseconds$1;
	hasRequiredMilliseconds$1 = 1;

	const DatePart = requireDatepart$1();

	class Milliseconds extends DatePart {
	  constructor(opts = {}) {
	    super(opts);
	  }

	  up() {
	    this.date.setMilliseconds(this.date.getMilliseconds() + 1);
	  }

	  down() {
	    this.date.setMilliseconds(this.date.getMilliseconds() - 1);
	  }

	  setTo(val) {
	    this.date.setMilliseconds(parseInt(val.substr(-this.token.length)));
	  }

	  toString() {
	    return String(this.date.getMilliseconds()).padStart(4, '0').substr(0, this.token.length);
	  }

	}

	milliseconds$1 = Milliseconds;
	return milliseconds$1;
}

var minutes$1;
var hasRequiredMinutes$1;

function requireMinutes$1 () {
	if (hasRequiredMinutes$1) return minutes$1;
	hasRequiredMinutes$1 = 1;

	const DatePart = requireDatepart$1();

	class Minutes extends DatePart {
	  constructor(opts = {}) {
	    super(opts);
	  }

	  up() {
	    this.date.setMinutes(this.date.getMinutes() + 1);
	  }

	  down() {
	    this.date.setMinutes(this.date.getMinutes() - 1);
	  }

	  setTo(val) {
	    this.date.setMinutes(parseInt(val.substr(-2)));
	  }

	  toString() {
	    let m = this.date.getMinutes();
	    return this.token.length > 1 ? String(m).padStart(2, '0') : m;
	  }

	}

	minutes$1 = Minutes;
	return minutes$1;
}

var month$1;
var hasRequiredMonth$1;

function requireMonth$1 () {
	if (hasRequiredMonth$1) return month$1;
	hasRequiredMonth$1 = 1;

	const DatePart = requireDatepart$1();

	class Month extends DatePart {
	  constructor(opts = {}) {
	    super(opts);
	  }

	  up() {
	    this.date.setMonth(this.date.getMonth() + 1);
	  }

	  down() {
	    this.date.setMonth(this.date.getMonth() - 1);
	  }

	  setTo(val) {
	    val = parseInt(val.substr(-2)) - 1;
	    this.date.setMonth(val < 0 ? 0 : val);
	  }

	  toString() {
	    let month = this.date.getMonth();
	    let tl = this.token.length;
	    return tl === 2 ? String(month + 1).padStart(2, '0') : tl === 3 ? this.locales.monthsShort[month] : tl === 4 ? this.locales.months[month] : String(month + 1);
	  }

	}

	month$1 = Month;
	return month$1;
}

var seconds$1;
var hasRequiredSeconds$1;

function requireSeconds$1 () {
	if (hasRequiredSeconds$1) return seconds$1;
	hasRequiredSeconds$1 = 1;

	const DatePart = requireDatepart$1();

	class Seconds extends DatePart {
	  constructor(opts = {}) {
	    super(opts);
	  }

	  up() {
	    this.date.setSeconds(this.date.getSeconds() + 1);
	  }

	  down() {
	    this.date.setSeconds(this.date.getSeconds() - 1);
	  }

	  setTo(val) {
	    this.date.setSeconds(parseInt(val.substr(-2)));
	  }

	  toString() {
	    let s = this.date.getSeconds();
	    return this.token.length > 1 ? String(s).padStart(2, '0') : s;
	  }

	}

	seconds$1 = Seconds;
	return seconds$1;
}

var year$1;
var hasRequiredYear$1;

function requireYear$1 () {
	if (hasRequiredYear$1) return year$1;
	hasRequiredYear$1 = 1;

	const DatePart = requireDatepart$1();

	class Year extends DatePart {
	  constructor(opts = {}) {
	    super(opts);
	  }

	  up() {
	    this.date.setFullYear(this.date.getFullYear() + 1);
	  }

	  down() {
	    this.date.setFullYear(this.date.getFullYear() - 1);
	  }

	  setTo(val) {
	    this.date.setFullYear(val.substr(-4));
	  }

	  toString() {
	    let year = String(this.date.getFullYear()).padStart(4, '0');
	    return this.token.length === 2 ? year.substr(-2) : year;
	  }

	}

	year$1 = Year;
	return year$1;
}

var dateparts$1;
var hasRequiredDateparts$1;

function requireDateparts$1 () {
	if (hasRequiredDateparts$1) return dateparts$1;
	hasRequiredDateparts$1 = 1;

	dateparts$1 = {
	  DatePart: requireDatepart$1(),
	  Meridiem: requireMeridiem$1(),
	  Day: requireDay$1(),
	  Hours: requireHours$1(),
	  Milliseconds: requireMilliseconds$1(),
	  Minutes: requireMinutes$1(),
	  Month: requireMonth$1(),
	  Seconds: requireSeconds$1(),
	  Year: requireYear$1()
	};
	return dateparts$1;
}

var date$1;
var hasRequiredDate$1;

function requireDate$1 () {
	if (hasRequiredDate$1) return date$1;
	hasRequiredDate$1 = 1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const color = require$$0;

	const Prompt = requirePrompt$1();

	const _require = requireUtil$1(),
	      style = _require.style,
	      clear = _require.clear,
	      figures = _require.figures;

	const _require2 = require$$3,
	      erase = _require2.erase,
	      cursor = _require2.cursor;

	const _require3 = requireDateparts$1(),
	      DatePart = _require3.DatePart,
	      Meridiem = _require3.Meridiem,
	      Day = _require3.Day,
	      Hours = _require3.Hours,
	      Milliseconds = _require3.Milliseconds,
	      Minutes = _require3.Minutes,
	      Month = _require3.Month,
	      Seconds = _require3.Seconds,
	      Year = _require3.Year;

	const regex = /\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g;
	const regexGroups = {
	  1: ({
	    token
	  }) => token.replace(/\\(.)/g, '$1'),
	  2: opts => new Day(opts),
	  // Day // TODO
	  3: opts => new Month(opts),
	  // Month
	  4: opts => new Year(opts),
	  // Year
	  5: opts => new Meridiem(opts),
	  // AM/PM // TODO (special)
	  6: opts => new Hours(opts),
	  // Hours
	  7: opts => new Minutes(opts),
	  // Minutes
	  8: opts => new Seconds(opts),
	  // Seconds
	  9: opts => new Milliseconds(opts) // Fractional seconds

	};
	const dfltLocales = {
	  months: 'January,February,March,April,May,June,July,August,September,October,November,December'.split(','),
	  monthsShort: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
	  weekdays: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
	  weekdaysShort: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(',')
	};
	/**
	 * DatePrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Number} [opts.initial] Index of default value
	 * @param {String} [opts.mask] The format mask
	 * @param {object} [opts.locales] The date locales
	 * @param {String} [opts.error] The error message shown on invalid value
	 * @param {Function} [opts.validate] Function to validate the submitted value
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */

	class DatePrompt extends Prompt {
	  constructor(opts = {}) {
	    super(opts);
	    this.msg = opts.message;
	    this.cursor = 0;
	    this.typed = '';
	    this.locales = Object.assign(dfltLocales, opts.locales);
	    this._date = opts.initial || new Date();
	    this.errorMsg = opts.error || 'Please Enter A Valid Value';

	    this.validator = opts.validate || (() => true);

	    this.mask = opts.mask || 'YYYY-MM-DD HH:mm:ss';
	    this.clear = clear('', this.out.columns);
	    this.render();
	  }

	  get value() {
	    return this.date;
	  }

	  get date() {
	    return this._date;
	  }

	  set date(date) {
	    if (date) this._date.setTime(date.getTime());
	  }

	  set mask(mask) {
	    let result;
	    this.parts = [];

	    while (result = regex.exec(mask)) {
	      let match = result.shift();
	      let idx = result.findIndex(gr => gr != null);
	      this.parts.push(idx in regexGroups ? regexGroups[idx]({
	        token: result[idx] || match,
	        date: this.date,
	        parts: this.parts,
	        locales: this.locales
	      }) : result[idx] || match);
	    }

	    let parts = this.parts.reduce((arr, i) => {
	      if (typeof i === 'string' && typeof arr[arr.length - 1] === 'string') arr[arr.length - 1] += i;else arr.push(i);
	      return arr;
	    }, []);
	    this.parts.splice(0);
	    this.parts.push(...parts);
	    this.reset();
	  }

	  moveCursor(n) {
	    this.typed = '';
	    this.cursor = n;
	    this.fire();
	  }

	  reset() {
	    this.moveCursor(this.parts.findIndex(p => p instanceof DatePart));
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.error = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  validate() {
	    var _this = this;

	    return _asyncToGenerator(function* () {
	      let valid = yield _this.validator(_this.value);

	      if (typeof valid === 'string') {
	        _this.errorMsg = valid;
	        valid = false;
	      }

	      _this.error = !valid;
	    })();
	  }

	  submit() {
	    var _this2 = this;

	    return _asyncToGenerator(function* () {
	      yield _this2.validate();

	      if (_this2.error) {
	        _this2.color = 'red';

	        _this2.fire();

	        _this2.render();

	        return;
	      }

	      _this2.done = true;
	      _this2.aborted = false;

	      _this2.fire();

	      _this2.render();

	      _this2.out.write('\n');

	      _this2.close();
	    })();
	  }

	  up() {
	    this.typed = '';
	    this.parts[this.cursor].up();
	    this.render();
	  }

	  down() {
	    this.typed = '';
	    this.parts[this.cursor].down();
	    this.render();
	  }

	  left() {
	    let prev = this.parts[this.cursor].prev();
	    if (prev == null) return this.bell();
	    this.moveCursor(this.parts.indexOf(prev));
	    this.render();
	  }

	  right() {
	    let next = this.parts[this.cursor].next();
	    if (next == null) return this.bell();
	    this.moveCursor(this.parts.indexOf(next));
	    this.render();
	  }

	  next() {
	    let next = this.parts[this.cursor].next();
	    this.moveCursor(next ? this.parts.indexOf(next) : this.parts.findIndex(part => part instanceof DatePart));
	    this.render();
	  }

	  _(c) {
	    if (/\d/.test(c)) {
	      this.typed += c;
	      this.parts[this.cursor].setTo(this.typed);
	      this.render();
	    }
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);else this.out.write(clear(this.outputText, this.out.columns));
	    super.render(); // Print prompt

	    this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.parts.reduce((arr, p, idx) => arr.concat(idx === this.cursor && !this.done ? color.cyan().underline(p.toString()) : p), []).join('')].join(' '); // Print error

	    if (this.error) {
	      this.outputText += this.errorMsg.split('\n').reduce((a, l, i) => a + `\n${i ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`, ``);
	    }

	    this.out.write(erase.line + cursor.to(0) + this.outputText);
	  }

	}

	date$1 = DatePrompt;
	return date$1;
}

var number$1;
var hasRequiredNumber$1;

function requireNumber$1 () {
	if (hasRequiredNumber$1) return number$1;
	hasRequiredNumber$1 = 1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const color = require$$0;

	const Prompt = requirePrompt$1();

	const _require = require$$3,
	      cursor = _require.cursor,
	      erase = _require.erase;

	const _require2 = requireUtil$1(),
	      style = _require2.style,
	      figures = _require2.figures,
	      clear = _require2.clear,
	      lines = _require2.lines;

	const isNumber = /[0-9]/;

	const isDef = any => any !== undefined;

	const round = (number, precision) => {
	  let factor = Math.pow(10, precision);
	  return Math.round(number * factor) / factor;
	};
	/**
	 * NumberPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {String} [opts.style='default'] Render style
	 * @param {Number} [opts.initial] Default value
	 * @param {Number} [opts.max=+Infinity] Max value
	 * @param {Number} [opts.min=-Infinity] Min value
	 * @param {Boolean} [opts.float=false] Parse input as floats
	 * @param {Number} [opts.round=2] Round floats to x decimals
	 * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys
	 * @param {Function} [opts.validate] Validate function
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {String} [opts.error] The invalid error label
	 */


	class NumberPrompt extends Prompt {
	  constructor(opts = {}) {
	    super(opts);
	    this.transform = style.render(opts.style);
	    this.msg = opts.message;
	    this.initial = isDef(opts.initial) ? opts.initial : '';
	    this.float = !!opts.float;
	    this.round = opts.round || 2;
	    this.inc = opts.increment || 1;
	    this.min = isDef(opts.min) ? opts.min : -Infinity;
	    this.max = isDef(opts.max) ? opts.max : Infinity;
	    this.errorMsg = opts.error || `Please Enter A Valid Value`;

	    this.validator = opts.validate || (() => true);

	    this.color = `cyan`;
	    this.value = ``;
	    this.typed = ``;
	    this.lastHit = 0;
	    this.render();
	  }

	  set value(v) {
	    if (!v && v !== 0) {
	      this.placeholder = true;
	      this.rendered = color.gray(this.transform.render(`${this.initial}`));
	      this._value = ``;
	    } else {
	      this.placeholder = false;
	      this.rendered = this.transform.render(`${round(v, this.round)}`);
	      this._value = round(v, this.round);
	    }

	    this.fire();
	  }

	  get value() {
	    return this._value;
	  }

	  parse(x) {
	    return this.float ? parseFloat(x) : parseInt(x);
	  }

	  valid(c) {
	    return c === `-` || c === `.` && this.float || isNumber.test(c);
	  }

	  reset() {
	    this.typed = ``;
	    this.value = ``;
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    let x = this.value;
	    this.value = x !== `` ? x : this.initial;
	    this.done = this.aborted = true;
	    this.error = false;
	    this.fire();
	    this.render();
	    this.out.write(`\n`);
	    this.close();
	  }

	  validate() {
	    var _this = this;

	    return _asyncToGenerator(function* () {
	      let valid = yield _this.validator(_this.value);

	      if (typeof valid === `string`) {
	        _this.errorMsg = valid;
	        valid = false;
	      }

	      _this.error = !valid;
	    })();
	  }

	  submit() {
	    var _this2 = this;

	    return _asyncToGenerator(function* () {
	      yield _this2.validate();

	      if (_this2.error) {
	        _this2.color = `red`;

	        _this2.fire();

	        _this2.render();

	        return;
	      }

	      let x = _this2.value;
	      _this2.value = x !== `` ? x : _this2.initial;
	      _this2.done = true;
	      _this2.aborted = false;
	      _this2.error = false;

	      _this2.fire();

	      _this2.render();

	      _this2.out.write(`\n`);

	      _this2.close();
	    })();
	  }

	  up() {
	    this.typed = ``;

	    if (this.value === '') {
	      this.value = this.min - this.inc;
	    }

	    if (this.value >= this.max) return this.bell();
	    this.value += this.inc;
	    this.color = `cyan`;
	    this.fire();
	    this.render();
	  }

	  down() {
	    this.typed = ``;

	    if (this.value === '') {
	      this.value = this.min + this.inc;
	    }

	    if (this.value <= this.min) return this.bell();
	    this.value -= this.inc;
	    this.color = `cyan`;
	    this.fire();
	    this.render();
	  }

	  delete() {
	    let val = this.value.toString();
	    if (val.length === 0) return this.bell();
	    this.value = this.parse(val = val.slice(0, -1)) || ``;

	    if (this.value !== '' && this.value < this.min) {
	      this.value = this.min;
	    }

	    this.color = `cyan`;
	    this.fire();
	    this.render();
	  }

	  next() {
	    this.value = this.initial;
	    this.fire();
	    this.render();
	  }

	  _(c, key) {
	    if (!this.valid(c)) return this.bell();
	    const now = Date.now();
	    if (now - this.lastHit > 1000) this.typed = ``; // 1s elapsed

	    this.typed += c;
	    this.lastHit = now;
	    this.color = `cyan`;
	    if (c === `.`) return this.fire();
	    this.value = Math.min(this.parse(this.typed), this.max);
	    if (this.value > this.max) this.value = this.max;
	    if (this.value < this.min) this.value = this.min;
	    this.fire();
	    this.render();
	  }

	  render() {
	    if (this.closed) return;

	    if (!this.firstRender) {
	      if (this.outputError) this.out.write(cursor.down(lines(this.outputError, this.out.columns) - 1) + clear(this.outputError, this.out.columns));
	      this.out.write(clear(this.outputText, this.out.columns));
	    }

	    super.render();
	    this.outputError = ''; // Print prompt

	    this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), !this.done || !this.done && !this.placeholder ? color[this.color]().underline(this.rendered) : this.rendered].join(` `); // Print error

	    if (this.error) {
	      this.outputError += this.errorMsg.split(`\n`).reduce((a, l, i) => a + `\n${i ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`, ``);
	    }

	    this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore);
	  }

	}

	number$1 = NumberPrompt;
	return number$1;
}

var multiselect$1;
var hasRequiredMultiselect$1;

function requireMultiselect$1 () {
	if (hasRequiredMultiselect$1) return multiselect$1;
	hasRequiredMultiselect$1 = 1;

	const color = require$$0;

	const _require = require$$3,
	      cursor = _require.cursor;

	const Prompt = requirePrompt$1();

	const _require2 = requireUtil$1(),
	      clear = _require2.clear,
	      figures = _require2.figures,
	      style = _require2.style,
	      wrap = _require2.wrap,
	      entriesToDisplay = _require2.entriesToDisplay;
	/**
	 * MultiselectPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Array} opts.choices Array of choice objects
	 * @param {String} [opts.hint] Hint to display
	 * @param {String} [opts.warn] Hint shown for disabled choices
	 * @param {Number} [opts.max] Max choices
	 * @param {Number} [opts.cursor=0] Cursor start position
	 * @param {Number} [opts.optionsPerPage=10] Max options to display at once
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */


	class MultiselectPrompt extends Prompt {
	  constructor(opts = {}) {
	    super(opts);
	    this.msg = opts.message;
	    this.cursor = opts.cursor || 0;
	    this.scrollIndex = opts.cursor || 0;
	    this.hint = opts.hint || '';
	    this.warn = opts.warn || '- This option is disabled -';
	    this.minSelected = opts.min;
	    this.showMinError = false;
	    this.maxChoices = opts.max;
	    this.instructions = opts.instructions;
	    this.optionsPerPage = opts.optionsPerPage || 10;
	    this.value = opts.choices.map((ch, idx) => {
	      if (typeof ch === 'string') ch = {
	        title: ch,
	        value: idx
	      };
	      return {
	        title: ch && (ch.title || ch.value || ch),
	        description: ch && ch.description,
	        value: ch && (ch.value === undefined ? idx : ch.value),
	        selected: ch && ch.selected,
	        disabled: ch && ch.disabled
	      };
	    });
	    this.clear = clear('', this.out.columns);

	    if (!opts.overrideRender) {
	      this.render();
	    }
	  }

	  reset() {
	    this.value.map(v => !v.selected);
	    this.cursor = 0;
	    this.fire();
	    this.render();
	  }

	  selected() {
	    return this.value.filter(v => v.selected);
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    const selected = this.value.filter(e => e.selected);

	    if (this.minSelected && selected.length < this.minSelected) {
	      this.showMinError = true;
	      this.render();
	    } else {
	      this.done = true;
	      this.aborted = false;
	      this.fire();
	      this.render();
	      this.out.write('\n');
	      this.close();
	    }
	  }

	  first() {
	    this.cursor = 0;
	    this.render();
	  }

	  last() {
	    this.cursor = this.value.length - 1;
	    this.render();
	  }

	  next() {
	    this.cursor = (this.cursor + 1) % this.value.length;
	    this.render();
	  }

	  up() {
	    if (this.cursor === 0) {
	      this.cursor = this.value.length - 1;
	    } else {
	      this.cursor--;
	    }

	    this.render();
	  }

	  down() {
	    if (this.cursor === this.value.length - 1) {
	      this.cursor = 0;
	    } else {
	      this.cursor++;
	    }

	    this.render();
	  }

	  left() {
	    this.value[this.cursor].selected = false;
	    this.render();
	  }

	  right() {
	    if (this.value.filter(e => e.selected).length >= this.maxChoices) return this.bell();
	    this.value[this.cursor].selected = true;
	    this.render();
	  }

	  handleSpaceToggle() {
	    const v = this.value[this.cursor];

	    if (v.selected) {
	      v.selected = false;
	      this.render();
	    } else if (v.disabled || this.value.filter(e => e.selected).length >= this.maxChoices) {
	      return this.bell();
	    } else {
	      v.selected = true;
	      this.render();
	    }
	  }

	  toggleAll() {
	    if (this.maxChoices !== undefined || this.value[this.cursor].disabled) {
	      return this.bell();
	    }

	    const newSelected = !this.value[this.cursor].selected;
	    this.value.filter(v => !v.disabled).forEach(v => v.selected = newSelected);
	    this.render();
	  }

	  _(c, key) {
	    if (c === ' ') {
	      this.handleSpaceToggle();
	    } else if (c === 'a') {
	      this.toggleAll();
	    } else {
	      return this.bell();
	    }
	  }

	  renderInstructions() {
	    if (this.instructions === undefined || this.instructions) {
	      if (typeof this.instructions === 'string') {
	        return this.instructions;
	      }

	      return '\nInstructions:\n' + `    ${figures.arrowUp}/${figures.arrowDown}: Highlight option\n` + `    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection\n` + (this.maxChoices === undefined ? `    a: Toggle all\n` : '') + `    enter/return: Complete answer`;
	    }

	    return '';
	  }

	  renderOption(cursor, v, i, arrowIndicator) {
	    const prefix = (v.selected ? color.green(figures.radioOn) : figures.radioOff) + ' ' + arrowIndicator + ' ';
	    let title, desc;

	    if (v.disabled) {
	      title = cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
	    } else {
	      title = cursor === i ? color.cyan().underline(v.title) : v.title;

	      if (cursor === i && v.description) {
	        desc = ` - ${v.description}`;

	        if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
	          desc = '\n' + wrap(v.description, {
	            margin: prefix.length,
	            width: this.out.columns
	          });
	        }
	      }
	    }

	    return prefix + title + color.gray(desc || '');
	  } // shared with autocompleteMultiselect


	  paginateOptions(options) {
	    if (options.length === 0) {
	      return color.red('No matches for this query.');
	    }

	    let _entriesToDisplay = entriesToDisplay(this.cursor, options.length, this.optionsPerPage),
	        startIndex = _entriesToDisplay.startIndex,
	        endIndex = _entriesToDisplay.endIndex;

	    let prefix,
	        styledOptions = [];

	    for (let i = startIndex; i < endIndex; i++) {
	      if (i === startIndex && startIndex > 0) {
	        prefix = figures.arrowUp;
	      } else if (i === endIndex - 1 && endIndex < options.length) {
	        prefix = figures.arrowDown;
	      } else {
	        prefix = ' ';
	      }

	      styledOptions.push(this.renderOption(this.cursor, options[i], i, prefix));
	    }

	    return '\n' + styledOptions.join('\n');
	  } // shared with autocomleteMultiselect


	  renderOptions(options) {
	    if (!this.done) {
	      return this.paginateOptions(options);
	    }

	    return '';
	  }

	  renderDoneOrInstructions() {
	    if (this.done) {
	      return this.value.filter(e => e.selected).map(v => v.title).join(', ');
	    }

	    const output = [color.gray(this.hint), this.renderInstructions()];

	    if (this.value[this.cursor].disabled) {
	      output.push(color.yellow(this.warn));
	    }

	    return output.join(' ');
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);
	    super.render(); // print prompt

	    let prompt = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.renderDoneOrInstructions()].join(' ');

	    if (this.showMinError) {
	      prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);
	      this.showMinError = false;
	    }

	    prompt += this.renderOptions(this.value);
	    this.out.write(this.clear + prompt);
	    this.clear = clear(prompt, this.out.columns);
	  }

	}

	multiselect$1 = MultiselectPrompt;
	return multiselect$1;
}

var autocomplete$1;
var hasRequiredAutocomplete$1;

function requireAutocomplete$1 () {
	if (hasRequiredAutocomplete$1) return autocomplete$1;
	hasRequiredAutocomplete$1 = 1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const color = require$$0;

	const Prompt = requirePrompt$1();

	const _require = require$$3,
	      erase = _require.erase,
	      cursor = _require.cursor;

	const _require2 = requireUtil$1(),
	      style = _require2.style,
	      clear = _require2.clear,
	      figures = _require2.figures,
	      wrap = _require2.wrap,
	      entriesToDisplay = _require2.entriesToDisplay;

	const getVal = (arr, i) => arr[i] && (arr[i].value || arr[i].title || arr[i]);

	const getTitle = (arr, i) => arr[i] && (arr[i].title || arr[i].value || arr[i]);

	const getIndex = (arr, valOrTitle) => {
	  const index = arr.findIndex(el => el.value === valOrTitle || el.title === valOrTitle);
	  return index > -1 ? index : undefined;
	};
	/**
	 * TextPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Array} opts.choices Array of auto-complete choices objects
	 * @param {Function} [opts.suggest] Filter function. Defaults to sort by title
	 * @param {Number} [opts.limit=10] Max number of results to show
	 * @param {Number} [opts.cursor=0] Cursor start position
	 * @param {String} [opts.style='default'] Render style
	 * @param {String} [opts.fallback] Fallback message - initial to default value
	 * @param {String} [opts.initial] Index of the default value
	 * @param {Boolean} [opts.clearFirst] The first ESCAPE keypress will clear the input
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {String} [opts.noMatches] The no matches found label
	 */


	class AutocompletePrompt extends Prompt {
	  constructor(opts = {}) {
	    super(opts);
	    this.msg = opts.message;
	    this.suggest = opts.suggest;
	    this.choices = opts.choices;
	    this.initial = typeof opts.initial === 'number' ? opts.initial : getIndex(opts.choices, opts.initial);
	    this.select = this.initial || opts.cursor || 0;
	    this.i18n = {
	      noMatches: opts.noMatches || 'no matches found'
	    };
	    this.fallback = opts.fallback || this.initial;
	    this.clearFirst = opts.clearFirst || false;
	    this.suggestions = [];
	    this.input = '';
	    this.limit = opts.limit || 10;
	    this.cursor = 0;
	    this.transform = style.render(opts.style);
	    this.scale = this.transform.scale;
	    this.render = this.render.bind(this);
	    this.complete = this.complete.bind(this);
	    this.clear = clear('', this.out.columns);
	    this.complete(this.render);
	    this.render();
	  }

	  set fallback(fb) {
	    this._fb = Number.isSafeInteger(parseInt(fb)) ? parseInt(fb) : fb;
	  }

	  get fallback() {
	    let choice;
	    if (typeof this._fb === 'number') choice = this.choices[this._fb];else if (typeof this._fb === 'string') choice = {
	      title: this._fb
	    };
	    return choice || this._fb || {
	      title: this.i18n.noMatches
	    };
	  }

	  moveSelect(i) {
	    this.select = i;
	    if (this.suggestions.length > 0) this.value = getVal(this.suggestions, i);else this.value = this.fallback.value;
	    this.fire();
	  }

	  complete(cb) {
	    var _this = this;

	    return _asyncToGenerator(function* () {
	      const p = _this.completing = _this.suggest(_this.input, _this.choices);

	      const suggestions = yield p;
	      if (_this.completing !== p) return;
	      _this.suggestions = suggestions.map((s, i, arr) => ({
	        title: getTitle(arr, i),
	        value: getVal(arr, i),
	        description: s.description
	      }));
	      _this.completing = false;
	      const l = Math.max(suggestions.length - 1, 0);

	      _this.moveSelect(Math.min(l, _this.select));

	      cb && cb();
	    })();
	  }

	  reset() {
	    this.input = '';
	    this.complete(() => {
	      this.moveSelect(this.initial !== void 0 ? this.initial : 0);
	      this.render();
	    });
	    this.render();
	  }

	  exit() {
	    if (this.clearFirst && this.input.length > 0) {
	      this.reset();
	    } else {
	      this.done = this.exited = true;
	      this.aborted = false;
	      this.fire();
	      this.render();
	      this.out.write('\n');
	      this.close();
	    }
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.exited = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    this.done = true;
	    this.aborted = this.exited = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  _(c, key) {
	    let s1 = this.input.slice(0, this.cursor);
	    let s2 = this.input.slice(this.cursor);
	    this.input = `${s1}${c}${s2}`;
	    this.cursor = s1.length + 1;
	    this.complete(this.render);
	    this.render();
	  }

	  delete() {
	    if (this.cursor === 0) return this.bell();
	    let s1 = this.input.slice(0, this.cursor - 1);
	    let s2 = this.input.slice(this.cursor);
	    this.input = `${s1}${s2}`;
	    this.complete(this.render);
	    this.cursor = this.cursor - 1;
	    this.render();
	  }

	  deleteForward() {
	    if (this.cursor * this.scale >= this.rendered.length) return this.bell();
	    let s1 = this.input.slice(0, this.cursor);
	    let s2 = this.input.slice(this.cursor + 1);
	    this.input = `${s1}${s2}`;
	    this.complete(this.render);
	    this.render();
	  }

	  first() {
	    this.moveSelect(0);
	    this.render();
	  }

	  last() {
	    this.moveSelect(this.suggestions.length - 1);
	    this.render();
	  }

	  up() {
	    if (this.select === 0) {
	      this.moveSelect(this.suggestions.length - 1);
	    } else {
	      this.moveSelect(this.select - 1);
	    }

	    this.render();
	  }

	  down() {
	    if (this.select === this.suggestions.length - 1) {
	      this.moveSelect(0);
	    } else {
	      this.moveSelect(this.select + 1);
	    }

	    this.render();
	  }

	  next() {
	    if (this.select === this.suggestions.length - 1) {
	      this.moveSelect(0);
	    } else this.moveSelect(this.select + 1);

	    this.render();
	  }

	  nextPage() {
	    this.moveSelect(Math.min(this.select + this.limit, this.suggestions.length - 1));
	    this.render();
	  }

	  prevPage() {
	    this.moveSelect(Math.max(this.select - this.limit, 0));
	    this.render();
	  }

	  left() {
	    if (this.cursor <= 0) return this.bell();
	    this.cursor = this.cursor - 1;
	    this.render();
	  }

	  right() {
	    if (this.cursor * this.scale >= this.rendered.length) return this.bell();
	    this.cursor = this.cursor + 1;
	    this.render();
	  }

	  renderOption(v, hovered, isStart, isEnd) {
	    let desc;
	    let prefix = isStart ? figures.arrowUp : isEnd ? figures.arrowDown : ' ';
	    let title = hovered ? color.cyan().underline(v.title) : v.title;
	    prefix = (hovered ? color.cyan(figures.pointer) + ' ' : '  ') + prefix;

	    if (v.description) {
	      desc = ` - ${v.description}`;

	      if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
	        desc = '\n' + wrap(v.description, {
	          margin: 3,
	          width: this.out.columns
	        });
	      }
	    }

	    return prefix + ' ' + title + color.gray(desc || '');
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);else this.out.write(clear(this.outputText, this.out.columns));
	    super.render();

	    let _entriesToDisplay = entriesToDisplay(this.select, this.choices.length, this.limit),
	        startIndex = _entriesToDisplay.startIndex,
	        endIndex = _entriesToDisplay.endIndex;

	    this.outputText = [style.symbol(this.done, this.aborted, this.exited), color.bold(this.msg), style.delimiter(this.completing), this.done && this.suggestions[this.select] ? this.suggestions[this.select].title : this.rendered = this.transform.render(this.input)].join(' ');

	    if (!this.done) {
	      const suggestions = this.suggestions.slice(startIndex, endIndex).map((item, i) => this.renderOption(item, this.select === i + startIndex, i === 0 && startIndex > 0, i + startIndex === endIndex - 1 && endIndex < this.choices.length)).join('\n');
	      this.outputText += `\n` + (suggestions || color.gray(this.fallback.title));
	    }

	    this.out.write(erase.line + cursor.to(0) + this.outputText);
	  }

	}

	autocomplete$1 = AutocompletePrompt;
	return autocomplete$1;
}

var autocompleteMultiselect$1;
var hasRequiredAutocompleteMultiselect$1;

function requireAutocompleteMultiselect$1 () {
	if (hasRequiredAutocompleteMultiselect$1) return autocompleteMultiselect$1;
	hasRequiredAutocompleteMultiselect$1 = 1;

	const color = require$$0;

	const _require = require$$3,
	      cursor = _require.cursor;

	const MultiselectPrompt = requireMultiselect$1();

	const _require2 = requireUtil$1(),
	      clear = _require2.clear,
	      style = _require2.style,
	      figures = _require2.figures;
	/**
	 * MultiselectPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Array} opts.choices Array of choice objects
	 * @param {String} [opts.hint] Hint to display
	 * @param {String} [opts.warn] Hint shown for disabled choices
	 * @param {Number} [opts.max] Max choices
	 * @param {Number} [opts.cursor=0] Cursor start position
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */


	class AutocompleteMultiselectPrompt extends MultiselectPrompt {
	  constructor(opts = {}) {
	    opts.overrideRender = true;
	    super(opts);
	    this.inputValue = '';
	    this.clear = clear('', this.out.columns);
	    this.filteredOptions = this.value;
	    this.render();
	  }

	  last() {
	    this.cursor = this.filteredOptions.length - 1;
	    this.render();
	  }

	  next() {
	    this.cursor = (this.cursor + 1) % this.filteredOptions.length;
	    this.render();
	  }

	  up() {
	    if (this.cursor === 0) {
	      this.cursor = this.filteredOptions.length - 1;
	    } else {
	      this.cursor--;
	    }

	    this.render();
	  }

	  down() {
	    if (this.cursor === this.filteredOptions.length - 1) {
	      this.cursor = 0;
	    } else {
	      this.cursor++;
	    }

	    this.render();
	  }

	  left() {
	    this.filteredOptions[this.cursor].selected = false;
	    this.render();
	  }

	  right() {
	    if (this.value.filter(e => e.selected).length >= this.maxChoices) return this.bell();
	    this.filteredOptions[this.cursor].selected = true;
	    this.render();
	  }

	  delete() {
	    if (this.inputValue.length) {
	      this.inputValue = this.inputValue.substr(0, this.inputValue.length - 1);
	      this.updateFilteredOptions();
	    }
	  }

	  updateFilteredOptions() {
	    const currentHighlight = this.filteredOptions[this.cursor];
	    this.filteredOptions = this.value.filter(v => {
	      if (this.inputValue) {
	        if (typeof v.title === 'string') {
	          if (v.title.toLowerCase().includes(this.inputValue.toLowerCase())) {
	            return true;
	          }
	        }

	        if (typeof v.value === 'string') {
	          if (v.value.toLowerCase().includes(this.inputValue.toLowerCase())) {
	            return true;
	          }
	        }

	        return false;
	      }

	      return true;
	    });
	    const newHighlightIndex = this.filteredOptions.findIndex(v => v === currentHighlight);
	    this.cursor = newHighlightIndex < 0 ? 0 : newHighlightIndex;
	    this.render();
	  }

	  handleSpaceToggle() {
	    const v = this.filteredOptions[this.cursor];

	    if (v.selected) {
	      v.selected = false;
	      this.render();
	    } else if (v.disabled || this.value.filter(e => e.selected).length >= this.maxChoices) {
	      return this.bell();
	    } else {
	      v.selected = true;
	      this.render();
	    }
	  }

	  handleInputChange(c) {
	    this.inputValue = this.inputValue + c;
	    this.updateFilteredOptions();
	  }

	  _(c, key) {
	    if (c === ' ') {
	      this.handleSpaceToggle();
	    } else {
	      this.handleInputChange(c);
	    }
	  }

	  renderInstructions() {
	    if (this.instructions === undefined || this.instructions) {
	      if (typeof this.instructions === 'string') {
	        return this.instructions;
	      }

	      return `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`;
	    }

	    return '';
	  }

	  renderCurrentInput() {
	    return `
Filtered results for: ${this.inputValue ? this.inputValue : color.gray('Enter something to filter')}\n`;
	  }

	  renderOption(cursor, v, i) {
	    let title;
	    if (v.disabled) title = cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);else title = cursor === i ? color.cyan().underline(v.title) : v.title;
	    return (v.selected ? color.green(figures.radioOn) : figures.radioOff) + '  ' + title;
	  }

	  renderDoneOrInstructions() {
	    if (this.done) {
	      return this.value.filter(e => e.selected).map(v => v.title).join(', ');
	    }

	    const output = [color.gray(this.hint), this.renderInstructions(), this.renderCurrentInput()];

	    if (this.filteredOptions.length && this.filteredOptions[this.cursor].disabled) {
	      output.push(color.yellow(this.warn));
	    }

	    return output.join(' ');
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);
	    super.render(); // print prompt

	    let prompt = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.renderDoneOrInstructions()].join(' ');

	    if (this.showMinError) {
	      prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);
	      this.showMinError = false;
	    }

	    prompt += this.renderOptions(this.filteredOptions);
	    this.out.write(this.clear + prompt);
	    this.clear = clear(prompt, this.out.columns);
	  }

	}

	autocompleteMultiselect$1 = AutocompleteMultiselectPrompt;
	return autocompleteMultiselect$1;
}

var confirm$1;
var hasRequiredConfirm$1;

function requireConfirm$1 () {
	if (hasRequiredConfirm$1) return confirm$1;
	hasRequiredConfirm$1 = 1;

	const color = require$$0;

	const Prompt = requirePrompt$1();

	const _require = requireUtil$1(),
	      style = _require.style,
	      clear = _require.clear;

	const _require2 = require$$3,
	      erase = _require2.erase,
	      cursor = _require2.cursor;
	/**
	 * ConfirmPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Boolean} [opts.initial] Default value (true/false)
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {String} [opts.yes] The "Yes" label
	 * @param {String} [opts.yesOption] The "Yes" option when choosing between yes/no
	 * @param {String} [opts.no] The "No" label
	 * @param {String} [opts.noOption] The "No" option when choosing between yes/no
	 */


	class ConfirmPrompt extends Prompt {
	  constructor(opts = {}) {
	    super(opts);
	    this.msg = opts.message;
	    this.value = opts.initial;
	    this.initialValue = !!opts.initial;
	    this.yesMsg = opts.yes || 'yes';
	    this.yesOption = opts.yesOption || '(Y/n)';
	    this.noMsg = opts.no || 'no';
	    this.noOption = opts.noOption || '(y/N)';
	    this.render();
	  }

	  reset() {
	    this.value = this.initialValue;
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    this.value = this.value || false;
	    this.done = true;
	    this.aborted = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  _(c, key) {
	    if (c.toLowerCase() === 'y') {
	      this.value = true;
	      return this.submit();
	    }

	    if (c.toLowerCase() === 'n') {
	      this.value = false;
	      return this.submit();
	    }

	    return this.bell();
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);else this.out.write(clear(this.outputText, this.out.columns));
	    super.render();
	    this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), this.done ? this.value ? this.yesMsg : this.noMsg : color.gray(this.initialValue ? this.yesOption : this.noOption)].join(' ');
	    this.out.write(erase.line + cursor.to(0) + this.outputText);
	  }

	}

	confirm$1 = ConfirmPrompt;
	return confirm$1;
}

var elements$1;
var hasRequiredElements$1;

function requireElements$1 () {
	if (hasRequiredElements$1) return elements$1;
	hasRequiredElements$1 = 1;

	elements$1 = {
	  TextPrompt: requireText$1(),
	  SelectPrompt: requireSelect$1(),
	  TogglePrompt: requireToggle$1(),
	  DatePrompt: requireDate$1(),
	  NumberPrompt: requireNumber$1(),
	  MultiselectPrompt: requireMultiselect$1(),
	  AutocompletePrompt: requireAutocomplete$1(),
	  AutocompleteMultiselectPrompt: requireAutocompleteMultiselect$1(),
	  ConfirmPrompt: requireConfirm$1()
	};
	return elements$1;
}

var hasRequiredPrompts$2;

function requirePrompts$2 () {
	if (hasRequiredPrompts$2) return prompts$3;
	hasRequiredPrompts$2 = 1;
	(function (exports) {

		const $ = exports;

		const el = requireElements$1();

		const noop = v => v;

		function toPrompt(type, args, opts = {}) {
		  return new Promise((res, rej) => {
		    const p = new el[type](args);
		    const onAbort = opts.onAbort || noop;
		    const onSubmit = opts.onSubmit || noop;
		    const onExit = opts.onExit || noop;
		    p.on('state', args.onState || noop);
		    p.on('submit', x => res(onSubmit(x)));
		    p.on('exit', x => res(onExit(x)));
		    p.on('abort', x => rej(onAbort(x)));
		  });
		}
		/**
		 * Text prompt
		 * @param {string} args.message Prompt message to display
		 * @param {string} [args.initial] Default string value
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {function} [args.onState] On state change callback
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.text = args => toPrompt('TextPrompt', args);
		/**
		 * Password prompt with masked input
		 * @param {string} args.message Prompt message to display
		 * @param {string} [args.initial] Default string value
		 * @param {function} [args.onState] On state change callback
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.password = args => {
		  args.style = 'password';
		  return $.text(args);
		};
		/**
		 * Prompt where input is invisible, like sudo
		 * @param {string} args.message Prompt message to display
		 * @param {string} [args.initial] Default string value
		 * @param {function} [args.onState] On state change callback
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.invisible = args => {
		  args.style = 'invisible';
		  return $.text(args);
		};
		/**
		 * Number prompt
		 * @param {string} args.message Prompt message to display
		 * @param {number} args.initial Default number value
		 * @param {function} [args.onState] On state change callback
		 * @param {number} [args.max] Max value
		 * @param {number} [args.min] Min value
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {Boolean} [opts.float=false] Parse input as floats
		 * @param {Number} [opts.round=2] Round floats to x decimals
		 * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.number = args => toPrompt('NumberPrompt', args);
		/**
		 * Date prompt
		 * @param {string} args.message Prompt message to display
		 * @param {number} args.initial Default number value
		 * @param {function} [args.onState] On state change callback
		 * @param {number} [args.max] Max value
		 * @param {number} [args.min] Min value
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {Boolean} [opts.float=false] Parse input as floats
		 * @param {Number} [opts.round=2] Round floats to x decimals
		 * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.date = args => toPrompt('DatePrompt', args);
		/**
		 * Classic yes/no prompt
		 * @param {string} args.message Prompt message to display
		 * @param {boolean} [args.initial=false] Default value
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.confirm = args => toPrompt('ConfirmPrompt', args);
		/**
		 * List prompt, split intput string by `seperator`
		 * @param {string} args.message Prompt message to display
		 * @param {string} [args.initial] Default string value
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {string} [args.separator] String separator
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input, in form of an `Array`
		 */


		$.list = args => {
		  const sep = args.separator || ',';
		  return toPrompt('TextPrompt', args, {
		    onSubmit: str => str.split(sep).map(s => s.trim())
		  });
		};
		/**
		 * Toggle/switch prompt
		 * @param {string} args.message Prompt message to display
		 * @param {boolean} [args.initial=false] Default value
		 * @param {string} [args.active="on"] Text for `active` state
		 * @param {string} [args.inactive="off"] Text for `inactive` state
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.toggle = args => toPrompt('TogglePrompt', args);
		/**
		 * Interactive select prompt
		 * @param {string} args.message Prompt message to display
		 * @param {Array} args.choices Array of choices objects `[{ title, value }, ...]`
		 * @param {number} [args.initial] Index of default value
		 * @param {String} [args.hint] Hint to display
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.select = args => toPrompt('SelectPrompt', args);
		/**
		 * Interactive multi-select / autocompleteMultiselect prompt
		 * @param {string} args.message Prompt message to display
		 * @param {Array} args.choices Array of choices objects `[{ title, value, [selected] }, ...]`
		 * @param {number} [args.max] Max select
		 * @param {string} [args.hint] Hint to display user
		 * @param {Number} [args.cursor=0] Cursor start position
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.multiselect = args => {
		  args.choices = [].concat(args.choices || []);

		  const toSelected = items => items.filter(item => item.selected).map(item => item.value);

		  return toPrompt('MultiselectPrompt', args, {
		    onAbort: toSelected,
		    onSubmit: toSelected
		  });
		};

		$.autocompleteMultiselect = args => {
		  args.choices = [].concat(args.choices || []);

		  const toSelected = items => items.filter(item => item.selected).map(item => item.value);

		  return toPrompt('AutocompleteMultiselectPrompt', args, {
		    onAbort: toSelected,
		    onSubmit: toSelected
		  });
		};

		const byTitle = (input, choices) => Promise.resolve(choices.filter(item => item.title.slice(0, input.length).toLowerCase() === input.toLowerCase()));
		/**
		 * Interactive auto-complete prompt
		 * @param {string} args.message Prompt message to display
		 * @param {Array} args.choices Array of auto-complete choices objects `[{ title, value }, ...]`
		 * @param {Function} [args.suggest] Function to filter results based on user input. Defaults to sort by `title`
		 * @param {number} [args.limit=10] Max number of results to show
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {String} [args.initial] Index of the default value
		 * @param {boolean} [opts.clearFirst] The first ESCAPE keypress will clear the input
		 * @param {String} [args.fallback] Fallback message - defaults to initial value
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */


		$.autocomplete = args => {
		  args.suggest = args.suggest || byTitle;
		  args.choices = [].concat(args.choices || []);
		  return toPrompt('AutocompletePrompt', args);
		}; 
	} (prompts$3));
	return prompts$3;
}

var dist;
var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return dist;
	hasRequiredDist = 1;

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	const prompts = requirePrompts$2();

	const passOn = ['suggest', 'format', 'onState', 'validate', 'onRender', 'type'];

	const noop = () => {};
	/**
	 * Prompt for a series of questions
	 * @param {Array|Object} questions Single question object or Array of question objects
	 * @param {Function} [onSubmit] Callback function called on prompt submit
	 * @param {Function} [onCancel] Callback function called on cancel/abort
	 * @returns {Object} Object with values from user input
	 */


	function prompt() {
	  return _prompt.apply(this, arguments);
	}

	function _prompt() {
	  _prompt = _asyncToGenerator(function* (questions = [], {
	    onSubmit = noop,
	    onCancel = noop
	  } = {}) {
	    const answers = {};
	    const override = prompt._override || {};
	    questions = [].concat(questions);
	    let answer, question, quit, name, type, lastPrompt;

	    const getFormattedAnswer = /*#__PURE__*/function () {
	      var _ref = _asyncToGenerator(function* (question, answer, skipValidation = false) {
	        if (!skipValidation && question.validate && question.validate(answer) !== true) {
	          return;
	        }

	        return question.format ? yield question.format(answer, answers) : answer;
	      });

	      return function getFormattedAnswer(_x, _x2) {
	        return _ref.apply(this, arguments);
	      };
	    }();

	    var _iterator = _createForOfIteratorHelper(questions),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        question = _step.value;
	        var _question = question;
	        name = _question.name;
	        type = _question.type;

	        // evaluate type first and skip if type is a falsy value
	        if (typeof type === 'function') {
	          type = yield type(answer, _objectSpread({}, answers), question);
	          question['type'] = type;
	        }

	        if (!type) continue; // if property is a function, invoke it unless it's a special function

	        for (let key in question) {
	          if (passOn.includes(key)) continue;
	          let value = question[key];
	          question[key] = typeof value === 'function' ? yield value(answer, _objectSpread({}, answers), lastPrompt) : value;
	        }

	        lastPrompt = question;

	        if (typeof question.message !== 'string') {
	          throw new Error('prompt message is required');
	        } // update vars in case they changed


	        var _question2 = question;
	        name = _question2.name;
	        type = _question2.type;

	        if (prompts[type] === void 0) {
	          throw new Error(`prompt type (${type}) is not defined`);
	        }

	        if (override[question.name] !== undefined) {
	          answer = yield getFormattedAnswer(question, override[question.name]);

	          if (answer !== undefined) {
	            answers[name] = answer;
	            continue;
	          }
	        }

	        try {
	          // Get the injected answer if there is one or prompt the user
	          answer = prompt._injected ? getInjectedAnswer(prompt._injected, question.initial) : yield prompts[type](question);
	          answers[name] = answer = yield getFormattedAnswer(question, answer, true);
	          quit = yield onSubmit(question, answer, answers);
	        } catch (err) {
	          quit = !(yield onCancel(question, answers));
	        }

	        if (quit) return answers;
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }

	    return answers;
	  });
	  return _prompt.apply(this, arguments);
	}

	function getInjectedAnswer(injected, deafultValue) {
	  const answer = injected.shift();

	  if (answer instanceof Error) {
	    throw answer;
	  }

	  return answer === undefined ? deafultValue : answer;
	}

	function inject(answers) {
	  prompt._injected = (prompt._injected || []).concat(answers);
	}

	function override(answers) {
	  prompt._override = Object.assign({}, answers);
	}

	dist = Object.assign(prompt, {
	  prompt,
	  prompts,
	  inject,
	  override
	});
	return dist;
}

var prompts$2 = {};

var action;
var hasRequiredAction;

function requireAction () {
	if (hasRequiredAction) return action;
	hasRequiredAction = 1;

	action = (key, isSelect) => {
	  if (key.meta && key.name !== 'escape') return;
	  
	  if (key.ctrl) {
	    if (key.name === 'a') return 'first';
	    if (key.name === 'c') return 'abort';
	    if (key.name === 'd') return 'abort';
	    if (key.name === 'e') return 'last';
	    if (key.name === 'g') return 'reset';
	  }
	  
	  if (isSelect) {
	    if (key.name === 'j') return 'down';
	    if (key.name === 'k') return 'up';
	  }

	  if (key.name === 'return') return 'submit';
	  if (key.name === 'enter') return 'submit'; // ctrl + J
	  if (key.name === 'backspace') return 'delete';
	  if (key.name === 'delete') return 'deleteForward';
	  if (key.name === 'abort') return 'abort';
	  if (key.name === 'escape') return 'exit';
	  if (key.name === 'tab') return 'next';
	  if (key.name === 'pagedown') return 'nextPage';
	  if (key.name === 'pageup') return 'prevPage';
	  // TODO create home() in prompt types (e.g. TextPrompt)
	  if (key.name === 'home') return 'home';
	  // TODO create end() in prompt types (e.g. TextPrompt)
	  if (key.name === 'end') return 'end';

	  if (key.name === 'up') return 'up';
	  if (key.name === 'down') return 'down';
	  if (key.name === 'right') return 'right';
	  if (key.name === 'left') return 'left';

	  return false;
	};
	return action;
}

var strip;
var hasRequiredStrip;

function requireStrip () {
	if (hasRequiredStrip) return strip;
	hasRequiredStrip = 1;

	strip = str => {
	  const pattern = [
	    '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
	    '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'
	  ].join('|');

	  const RGX = new RegExp(pattern, 'g');
	  return typeof str === 'string' ? str.replace(RGX, '') : str;
	};
	return strip;
}

var clear$2;
var hasRequiredClear;

function requireClear () {
	if (hasRequiredClear) return clear$2;
	hasRequiredClear = 1;

	const strip = requireStrip();
	const { erase, cursor } = require$$3;

	const width = str => [...strip(str)].length;

	/**
	 * @param {string} prompt
	 * @param {number} perLine
	 */
	clear$2 = function(prompt, perLine) {
	  if (!perLine) return erase.line + cursor.to(0);

	  let rows = 0;
	  const lines = prompt.split(/\r?\n/);
	  for (let line of lines) {
	    rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / perLine);
	  }

	  return erase.lines(rows);
	};
	return clear$2;
}

var figures_1;
var hasRequiredFigures;

function requireFigures () {
	if (hasRequiredFigures) return figures_1;
	hasRequiredFigures = 1;

	 const main = {
	  arrowUp: '↑',
	  arrowDown: '↓',
	  arrowLeft: '←',
	  arrowRight: '→',
	  radioOn: '◉',
	  radioOff: '◯',
	  tick: '✔',	
	  cross: '✖',	
	  ellipsis: '…',	
	  pointerSmall: '›',	
	  line: '─',	
	  pointer: '❯'	
	};	
	const win = {
	  arrowUp: main.arrowUp,
	  arrowDown: main.arrowDown,
	  arrowLeft: main.arrowLeft,
	  arrowRight: main.arrowRight,
	  radioOn: '(*)',
	  radioOff: '( )',	
	  tick: '√',	
	  cross: '×',	
	  ellipsis: '...',	
	  pointerSmall: '»',	
	  line: '─',	
	  pointer: '>'	
	};	
	const figures = process.platform === 'win32' ? win : main;	

	 figures_1 = figures;
	return figures_1;
}

var style$2;
var hasRequiredStyle;

function requireStyle () {
	if (hasRequiredStyle) return style$2;
	hasRequiredStyle = 1;

	const c = require$$0;
	const figures = requireFigures();

	// rendering user input.
	const styles = Object.freeze({
	  password: { scale: 1, render: input => '*'.repeat(input.length) },
	  emoji: { scale: 2, render: input => '😃'.repeat(input.length) },
	  invisible: { scale: 0, render: input => '' },
	  default: { scale: 1, render: input => `${input}` }
	});
	const render = type => styles[type] || styles.default;

	// icon to signalize a prompt.
	const symbols = Object.freeze({
	  aborted: c.red(figures.cross),
	  done: c.green(figures.tick),
	  exited: c.yellow(figures.cross),
	  default: c.cyan('?')
	});

	const symbol = (done, aborted, exited) =>
	  aborted ? symbols.aborted : exited ? symbols.exited : done ? symbols.done : symbols.default;

	// between the question and the user's input.
	const delimiter = completing =>
	  c.gray(completing ? figures.ellipsis : figures.pointerSmall);

	const item = (expandable, expanded) =>
	  c.gray(expandable ? (expanded ? figures.pointerSmall : '+') : figures.line);

	style$2 = {
	  styles,
	  render,
	  symbols,
	  symbol,
	  delimiter,
	  item
	};
	return style$2;
}

var lines;
var hasRequiredLines;

function requireLines () {
	if (hasRequiredLines) return lines;
	hasRequiredLines = 1;

	const strip = requireStrip();

	/**
	 * @param {string} msg
	 * @param {number} perLine
	 */
	lines = function (msg, perLine) {
	  let lines = String(strip(msg) || '').split(/\r?\n/);

	  if (!perLine) return lines.length;
	  return lines.map(l => Math.ceil(l.length / perLine))
	      .reduce((a, b) => a + b);
	};
	return lines;
}

var wrap;
var hasRequiredWrap;

function requireWrap () {
	if (hasRequiredWrap) return wrap;
	hasRequiredWrap = 1;

	/**
	 * @param {string} msg The message to wrap
	 * @param {object} opts
	 * @param {number|string} [opts.margin] Left margin
	 * @param {number} opts.width Maximum characters per line including the margin
	 */
	wrap = (msg, opts = {}) => {
	  const tab = Number.isSafeInteger(parseInt(opts.margin))
	    ? new Array(parseInt(opts.margin)).fill(' ').join('')
	    : (opts.margin || '');

	  const width = opts.width;

	  return (msg || '').split(/\r?\n/g)
	    .map(line => line
	      .split(/\s+/g)
	      .reduce((arr, w) => {
	        if (w.length + tab.length >= width || arr[arr.length - 1].length + w.length + 1 < width)
	          arr[arr.length - 1] += ` ${w}`;
	        else arr.push(`${tab}${w}`);
	        return arr;
	      }, [ tab ])
	      .join('\n'))
	    .join('\n');
	};
	return wrap;
}

var entriesToDisplay;
var hasRequiredEntriesToDisplay;

function requireEntriesToDisplay () {
	if (hasRequiredEntriesToDisplay) return entriesToDisplay;
	hasRequiredEntriesToDisplay = 1;

	/**
	 * Determine what entries should be displayed on the screen, based on the
	 * currently selected index and the maximum visible. Used in list-based
	 * prompts like `select` and `multiselect`.
	 *
	 * @param {number} cursor the currently selected entry
	 * @param {number} total the total entries available to display
	 * @param {number} [maxVisible] the number of entries that can be displayed
	 */
	entriesToDisplay = (cursor, total, maxVisible)  => {
	  maxVisible = maxVisible || total;

	  let startIndex = Math.min(total- maxVisible, cursor - Math.floor(maxVisible / 2));
	  if (startIndex < 0) startIndex = 0;

	  let endIndex = Math.min(startIndex + maxVisible, total);

	  return { startIndex, endIndex };
	};
	return entriesToDisplay;
}

var util;
var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return util;
	hasRequiredUtil = 1;

	util = {
	  action: requireAction(),
	  clear: requireClear(),
	  style: requireStyle(),
	  strip: requireStrip(),
	  figures: requireFigures(),
	  lines: requireLines(),
	  wrap: requireWrap(),
	  entriesToDisplay: requireEntriesToDisplay()
	};
	return util;
}

var prompt;
var hasRequiredPrompt;

function requirePrompt () {
	if (hasRequiredPrompt) return prompt;
	hasRequiredPrompt = 1;

	const readline = require$$0$1;
	const { action } = requireUtil();
	const EventEmitter = require$$2;
	const { beep, cursor } = require$$3;
	const color = require$$0;

	/**
	 * Base prompt skeleton
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */
	class Prompt extends EventEmitter {
	  constructor(opts={}) {
	    super();

	    this.firstRender = true;
	    this.in = opts.stdin || process.stdin;
	    this.out = opts.stdout || process.stdout;
	    this.onRender = (opts.onRender || (() => void 0)).bind(this);
	    const rl = readline.createInterface({ input:this.in, escapeCodeTimeout:50 });
	    readline.emitKeypressEvents(this.in, rl);

	    if (this.in.isTTY) this.in.setRawMode(true);
	    const isSelect = [ 'SelectPrompt', 'MultiselectPrompt' ].indexOf(this.constructor.name) > -1;
	    const keypress = (str, key) => {
	      let a = action(key, isSelect);
	      if (a === false) {
	        this._ && this._(str, key);
	      } else if (typeof this[a] === 'function') {
	        this[a](key);
	      } else {
	        this.bell();
	      }
	    };

	    this.close = () => {
	      this.out.write(cursor.show);
	      this.in.removeListener('keypress', keypress);
	      if (this.in.isTTY) this.in.setRawMode(false);
	      rl.close();
	      this.emit(this.aborted ? 'abort' : this.exited ? 'exit' : 'submit', this.value);
	      this.closed = true;
	    };

	    this.in.on('keypress', keypress);
	  }

	  fire() {
	    this.emit('state', {
	      value: this.value,
	      aborted: !!this.aborted,
	      exited: !!this.exited
	    });
	  }

	  bell() {
	    this.out.write(beep);
	  }

	  render() {
	    this.onRender(color);
	    if (this.firstRender) this.firstRender = false;
	  }
	}

	prompt = Prompt;
	return prompt;
}

var text;
var hasRequiredText;

function requireText () {
	if (hasRequiredText) return text;
	hasRequiredText = 1;
	const color = require$$0;
	const Prompt = requirePrompt();
	const { erase, cursor } = require$$3;
	const { style, clear, lines, figures } = requireUtil();

	/**
	 * TextPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {String} [opts.style='default'] Render style
	 * @param {String} [opts.initial] Default value
	 * @param {Function} [opts.validate] Validate function
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {String} [opts.error] The invalid error label
	 */
	class TextPrompt extends Prompt {
	  constructor(opts={}) {
	    super(opts);
	    this.transform = style.render(opts.style);
	    this.scale = this.transform.scale;
	    this.msg = opts.message;
	    this.initial = opts.initial || ``;
	    this.validator = opts.validate || (() => true);
	    this.value = ``;
	    this.errorMsg = opts.error || `Please Enter A Valid Value`;
	    this.cursor = Number(!!this.initial);
	    this.cursorOffset = 0;
	    this.clear = clear(``, this.out.columns);
	    this.render();
	  }

	  set value(v) {
	    if (!v && this.initial) {
	      this.placeholder = true;
	      this.rendered = color.gray(this.transform.render(this.initial));
	    } else {
	      this.placeholder = false;
	      this.rendered = this.transform.render(v);
	    }
	    this._value = v;
	    this.fire();
	  }

	  get value() {
	    return this._value;
	  }

	  reset() {
	    this.value = ``;
	    this.cursor = Number(!!this.initial);
	    this.cursorOffset = 0;
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.value = this.value || this.initial;
	    this.done = this.aborted = true;
	    this.error = false;
	    this.red = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  async validate() {
	    let valid = await this.validator(this.value);
	    if (typeof valid === `string`) {
	      this.errorMsg = valid;
	      valid = false;
	    }
	    this.error = !valid;
	  }

	  async submit() {
	    this.value = this.value || this.initial;
	    this.cursorOffset = 0;
	    this.cursor = this.rendered.length;
	    await this.validate();
	    if (this.error) {
	      this.red = true;
	      this.fire();
	      this.render();
	      return;
	    }
	    this.done = true;
	    this.aborted = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  next() {
	    if (!this.placeholder) return this.bell();
	    this.value = this.initial;
	    this.cursor = this.rendered.length;
	    this.fire();
	    this.render();
	  }

	  moveCursor(n) {
	    if (this.placeholder) return;
	    this.cursor = this.cursor+n;
	    this.cursorOffset += n;
	  }

	  _(c, key) {
	    let s1 = this.value.slice(0, this.cursor);
	    let s2 = this.value.slice(this.cursor);
	    this.value = `${s1}${c}${s2}`;
	    this.red = false;
	    this.cursor = this.placeholder ? 0 : s1.length+1;
	    this.render();
	  }

	  delete() {
	    if (this.isCursorAtStart()) return this.bell();
	    let s1 = this.value.slice(0, this.cursor-1);
	    let s2 = this.value.slice(this.cursor);
	    this.value = `${s1}${s2}`;
	    this.red = false;
	    if (this.isCursorAtStart()) {
	      this.cursorOffset = 0;
	    } else {
	      this.cursorOffset++;
	      this.moveCursor(-1);
	    }
	    this.render();
	  }

	  deleteForward() {
	    if(this.cursor*this.scale >= this.rendered.length || this.placeholder) return this.bell();
	    let s1 = this.value.slice(0, this.cursor);
	    let s2 = this.value.slice(this.cursor+1);
	    this.value = `${s1}${s2}`;
	    this.red = false;
	    if (this.isCursorAtEnd()) {
	      this.cursorOffset = 0;
	    } else {
	      this.cursorOffset++;
	    }
	    this.render();
	  }

	  first() {
	    this.cursor = 0;
	    this.render();
	  }

	  last() {
	    this.cursor = this.value.length;
	    this.render();
	  }

	  left() {
	    if (this.cursor <= 0 || this.placeholder) return this.bell();
	    this.moveCursor(-1);
	    this.render();
	  }

	  right() {
	    if (this.cursor*this.scale >= this.rendered.length || this.placeholder) return this.bell();
	    this.moveCursor(1);
	    this.render();
	  }

	  isCursorAtStart() {
	    return this.cursor === 0 || (this.placeholder && this.cursor === 1);
	  }

	  isCursorAtEnd() {
	    return this.cursor === this.rendered.length || (this.placeholder && this.cursor === this.rendered.length + 1)
	  }

	  render() {
	    if (this.closed) return;
	    if (!this.firstRender) {
	      if (this.outputError)
	        this.out.write(cursor.down(lines(this.outputError, this.out.columns) - 1) + clear(this.outputError, this.out.columns));
	      this.out.write(clear(this.outputText, this.out.columns));
	    }
	    super.render();
	    this.outputError = '';

	    this.outputText = [
	      style.symbol(this.done, this.aborted),
	      color.bold(this.msg),
	      style.delimiter(this.done),
	      this.red ? color.red(this.rendered) : this.rendered
	    ].join(` `);

	    if (this.error) {
	      this.outputError += this.errorMsg.split(`\n`)
	          .reduce((a, l, i) => a + `\n${i ? ' ' : figures.pointerSmall} ${color.red().italic(l)}`, ``);
	    }

	    this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore + cursor.move(this.cursorOffset, 0));
	  }
	}

	text = TextPrompt;
	return text;
}

var select;
var hasRequiredSelect;

function requireSelect () {
	if (hasRequiredSelect) return select;
	hasRequiredSelect = 1;

	const color = require$$0;
	const Prompt = requirePrompt();
	const { style, clear, figures, wrap, entriesToDisplay } = requireUtil();
	const { cursor } = require$$3;

	/**
	 * SelectPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Array} opts.choices Array of choice objects
	 * @param {String} [opts.hint] Hint to display
	 * @param {Number} [opts.initial] Index of default value
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {Number} [opts.optionsPerPage=10] Max options to display at once
	 */
	class SelectPrompt extends Prompt {
	  constructor(opts={}) {
	    super(opts);
	    this.msg = opts.message;
	    this.hint = opts.hint || '- Use arrow-keys. Return to submit.';
	    this.warn = opts.warn || '- This option is disabled';
	    this.cursor = opts.initial || 0;
	    this.choices = opts.choices.map((ch, idx) => {
	      if (typeof ch === 'string')
	        ch = {title: ch, value: idx};
	      return {
	        title: ch && (ch.title || ch.value || ch),
	        value: ch && (ch.value === undefined ? idx : ch.value),
	        description: ch && ch.description,
	        selected: ch && ch.selected,
	        disabled: ch && ch.disabled
	      };
	    });
	    this.optionsPerPage = opts.optionsPerPage || 10;
	    this.value = (this.choices[this.cursor] || {}).value;
	    this.clear = clear('', this.out.columns);
	    this.render();
	  }

	  moveCursor(n) {
	    this.cursor = n;
	    this.value = this.choices[n].value;
	    this.fire();
	  }

	  reset() {
	    this.moveCursor(0);
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    if (!this.selection.disabled) {
	      this.done = true;
	      this.aborted = false;
	      this.fire();
	      this.render();
	      this.out.write('\n');
	      this.close();
	    } else
	      this.bell();
	  }

	  first() {
	    this.moveCursor(0);
	    this.render();
	  }

	  last() {
	    this.moveCursor(this.choices.length - 1);
	    this.render();
	  }

	  up() {
	    if (this.cursor === 0) {
	      this.moveCursor(this.choices.length - 1);
	    } else {
	      this.moveCursor(this.cursor - 1);
	    }
	    this.render();
	  }

	  down() {
	    if (this.cursor === this.choices.length - 1) {
	      this.moveCursor(0);
	    } else {
	      this.moveCursor(this.cursor + 1);
	    }
	    this.render();
	  }

	  next() {
	    this.moveCursor((this.cursor + 1) % this.choices.length);
	    this.render();
	  }

	  _(c, key) {
	    if (c === ' ') return this.submit();
	  }

	  get selection() {
	    return this.choices[this.cursor];
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);
	    else this.out.write(clear(this.outputText, this.out.columns));
	    super.render();

	    let { startIndex, endIndex } = entriesToDisplay(this.cursor, this.choices.length, this.optionsPerPage);

	    // Print prompt
	    this.outputText = [
	      style.symbol(this.done, this.aborted),
	      color.bold(this.msg),
	      style.delimiter(false),
	      this.done ? this.selection.title : this.selection.disabled
	          ? color.yellow(this.warn) : color.gray(this.hint)
	    ].join(' ');

	    // Print choices
	    if (!this.done) {
	      this.outputText += '\n';
	      for (let i = startIndex; i < endIndex; i++) {
	        let title, prefix, desc = '', v = this.choices[i];

	        // Determine whether to display "more choices" indicators
	        if (i === startIndex && startIndex > 0) {
	          prefix = figures.arrowUp;
	        } else if (i === endIndex - 1 && endIndex < this.choices.length) {
	          prefix = figures.arrowDown;
	        } else {
	          prefix = ' ';
	        }

	        if (v.disabled) {
	          title = this.cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
	          prefix = (this.cursor === i ? color.bold().gray(figures.pointer) + ' ' : '  ') + prefix;
	        } else {
	          title = this.cursor === i ? color.cyan().underline(v.title) : v.title;
	          prefix = (this.cursor === i ? color.cyan(figures.pointer) + ' ' : '  ') + prefix;
	          if (v.description && this.cursor === i) {
	            desc = ` - ${v.description}`;
	            if (prefix.length + title.length + desc.length >= this.out.columns
	                || v.description.split(/\r?\n/).length > 1) {
	              desc = '\n' + wrap(v.description, { margin: 3, width: this.out.columns });
	            }
	          }
	        }

	        this.outputText += `${prefix} ${title}${color.gray(desc)}\n`;
	      }
	    }

	    this.out.write(this.outputText);
	  }
	}

	select = SelectPrompt;
	return select;
}

var toggle;
var hasRequiredToggle;

function requireToggle () {
	if (hasRequiredToggle) return toggle;
	hasRequiredToggle = 1;
	const color = require$$0;
	const Prompt = requirePrompt();
	const { style, clear } = requireUtil();
	const { cursor, erase } = require$$3;

	/**
	 * TogglePrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Boolean} [opts.initial=false] Default value
	 * @param {String} [opts.active='no'] Active label
	 * @param {String} [opts.inactive='off'] Inactive label
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */
	class TogglePrompt extends Prompt {
	  constructor(opts={}) {
	    super(opts);
	    this.msg = opts.message;
	    this.value = !!opts.initial;
	    this.active = opts.active || 'on';
	    this.inactive = opts.inactive || 'off';
	    this.initialValue = this.value;
	    this.render();
	  }

	  reset() {
	    this.value = this.initialValue;
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    this.done = true;
	    this.aborted = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  deactivate() {
	    if (this.value === false) return this.bell();
	    this.value = false;
	    this.render();
	  }

	  activate() {
	    if (this.value === true) return this.bell();
	    this.value = true;
	    this.render();
	  }

	  delete() {
	    this.deactivate();
	  }
	  left() {
	    this.deactivate();
	  }
	  right() {
	    this.activate();
	  }
	  down() {
	    this.deactivate();
	  }
	  up() {
	    this.activate();
	  }

	  next() {
	    this.value = !this.value;
	    this.fire();
	    this.render();
	  }

	  _(c, key) {
	    if (c === ' ') {
	      this.value = !this.value;
	    } else if (c === '1') {
	      this.value = true;
	    } else if (c === '0') {
	      this.value = false;
	    } else return this.bell();
	    this.render();
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);
	    else this.out.write(clear(this.outputText, this.out.columns));
	    super.render();

	    this.outputText = [
	      style.symbol(this.done, this.aborted),
	      color.bold(this.msg),
	      style.delimiter(this.done),
	      this.value ? this.inactive : color.cyan().underline(this.inactive),
	      color.gray('/'),
	      this.value ? color.cyan().underline(this.active) : this.active
	    ].join(' ');

	    this.out.write(erase.line + cursor.to(0) + this.outputText);
	  }
	}

	toggle = TogglePrompt;
	return toggle;
}

var datepart;
var hasRequiredDatepart;

function requireDatepart () {
	if (hasRequiredDatepart) return datepart;
	hasRequiredDatepart = 1;

	class DatePart {
	  constructor({token, date, parts, locales}) {
	    this.token = token;
	    this.date = date || new Date();
	    this.parts = parts || [this];
	    this.locales = locales || {};
	  }

	  up() {}

	  down() {}

	  next() {
	    const currentIdx = this.parts.indexOf(this);
	    return this.parts.find((part, idx) => idx > currentIdx && part instanceof DatePart);
	  }

	  setTo(val) {}

	  prev() {
	    let parts = [].concat(this.parts).reverse();
	    const currentIdx = parts.indexOf(this);
	    return parts.find((part, idx) => idx > currentIdx && part instanceof DatePart);
	  }

	  toString() {
	    return String(this.date);
	  }
	}

	datepart = DatePart;
	return datepart;
}

var meridiem;
var hasRequiredMeridiem;

function requireMeridiem () {
	if (hasRequiredMeridiem) return meridiem;
	hasRequiredMeridiem = 1;

	const DatePart = requireDatepart();

	class Meridiem extends DatePart {
	  constructor(opts={}) {
	    super(opts);
	  }

	  up() {
	    this.date.setHours((this.date.getHours() + 12) % 24);
	  }

	  down() {
	    this.up();
	  }

	  toString() {
	    let meridiem = this.date.getHours() > 12 ? 'pm' : 'am';
	    return /\A/.test(this.token) ? meridiem.toUpperCase() : meridiem;
	  }
	}

	meridiem = Meridiem;
	return meridiem;
}

var day;
var hasRequiredDay;

function requireDay () {
	if (hasRequiredDay) return day;
	hasRequiredDay = 1;

	const DatePart = requireDatepart();

	const pos = n => {
	  n = n % 10;
	  return n === 1 ? 'st'
	       : n === 2 ? 'nd'
	       : n === 3 ? 'rd'
	       : 'th';
	};

	class Day extends DatePart {
	  constructor(opts={}) {
	    super(opts);
	  }

	  up() {
	    this.date.setDate(this.date.getDate() + 1);
	  }

	  down() {
	    this.date.setDate(this.date.getDate() - 1);
	  }

	  setTo(val) {
	    this.date.setDate(parseInt(val.substr(-2)));
	  }

	  toString() {
	    let date = this.date.getDate();
	    let day = this.date.getDay();
	    return this.token === 'DD' ? String(date).padStart(2, '0')
	         : this.token === 'Do' ? date + pos(date)
	         : this.token === 'd' ? day + 1
	         : this.token === 'ddd' ? this.locales.weekdaysShort[day]
	         : this.token === 'dddd' ? this.locales.weekdays[day]
	         : date;
	  }
	}

	day = Day;
	return day;
}

var hours;
var hasRequiredHours;

function requireHours () {
	if (hasRequiredHours) return hours;
	hasRequiredHours = 1;

	const DatePart = requireDatepart();

	class Hours extends DatePart {
	  constructor(opts={}) {
	    super(opts);
	  }

	  up() {
	    this.date.setHours(this.date.getHours() + 1);
	  }

	  down() {
	    this.date.setHours(this.date.getHours() - 1);
	  }

	  setTo(val) {
	    this.date.setHours(parseInt(val.substr(-2)));
	  }

	  toString() {
	    let hours = this.date.getHours();
	    if (/h/.test(this.token))
	      hours = (hours % 12) || 12;
	    return this.token.length > 1 ? String(hours).padStart(2, '0') : hours;
	  }
	}

	hours = Hours;
	return hours;
}

var milliseconds;
var hasRequiredMilliseconds;

function requireMilliseconds () {
	if (hasRequiredMilliseconds) return milliseconds;
	hasRequiredMilliseconds = 1;

	const DatePart = requireDatepart();

	class Milliseconds extends DatePart {
	  constructor(opts={}) {
	    super(opts);
	  }

	  up() {
	    this.date.setMilliseconds(this.date.getMilliseconds() + 1);
	  }

	  down() {
	    this.date.setMilliseconds(this.date.getMilliseconds() - 1);
	  }

	  setTo(val) {
	    this.date.setMilliseconds(parseInt(val.substr(-(this.token.length))));
	  }

	  toString() {
	    return String(this.date.getMilliseconds()).padStart(4, '0')
	                                              .substr(0, this.token.length);
	  }
	}

	milliseconds = Milliseconds;
	return milliseconds;
}

var minutes;
var hasRequiredMinutes;

function requireMinutes () {
	if (hasRequiredMinutes) return minutes;
	hasRequiredMinutes = 1;

	const DatePart = requireDatepart();

	class Minutes extends DatePart {
	  constructor(opts={}) {
	    super(opts);
	  }

	  up() {
	    this.date.setMinutes(this.date.getMinutes() + 1);
	  }

	  down() {
	    this.date.setMinutes(this.date.getMinutes() - 1);
	  }

	  setTo(val) {
	    this.date.setMinutes(parseInt(val.substr(-2)));
	  }

	  toString() {
	    let m = this.date.getMinutes();
	    return this.token.length > 1 ? String(m).padStart(2, '0') : m;
	  }
	}

	minutes = Minutes;
	return minutes;
}

var month;
var hasRequiredMonth;

function requireMonth () {
	if (hasRequiredMonth) return month;
	hasRequiredMonth = 1;

	const DatePart = requireDatepart();

	class Month extends DatePart {
	  constructor(opts={}) {
	    super(opts);
	  }

	  up() {
	    this.date.setMonth(this.date.getMonth() + 1);
	  }

	  down() {
	    this.date.setMonth(this.date.getMonth() - 1);
	  }

	  setTo(val) {
	    val = parseInt(val.substr(-2)) - 1;
	    this.date.setMonth(val < 0 ? 0 : val);
	  }

	  toString() {
	    let month = this.date.getMonth();
	    let tl = this.token.length;
	    return tl === 2 ? String(month + 1).padStart(2, '0')
	           : tl === 3 ? this.locales.monthsShort[month]
	             : tl === 4 ? this.locales.months[month]
	               : String(month + 1);
	  }
	}

	month = Month;
	return month;
}

var seconds;
var hasRequiredSeconds;

function requireSeconds () {
	if (hasRequiredSeconds) return seconds;
	hasRequiredSeconds = 1;

	const DatePart = requireDatepart();

	class Seconds extends DatePart {
	  constructor(opts={}) {
	    super(opts);
	  }

	  up() {
	    this.date.setSeconds(this.date.getSeconds() + 1);
	  }

	  down() {
	    this.date.setSeconds(this.date.getSeconds() - 1);
	  }

	  setTo(val) {
	    this.date.setSeconds(parseInt(val.substr(-2)));
	  }

	  toString() {
	    let s = this.date.getSeconds();
	    return this.token.length > 1 ? String(s).padStart(2, '0') : s;
	  }
	}

	seconds = Seconds;
	return seconds;
}

var year;
var hasRequiredYear;

function requireYear () {
	if (hasRequiredYear) return year;
	hasRequiredYear = 1;

	const DatePart = requireDatepart();

	class Year extends DatePart {
	  constructor(opts={}) {
	    super(opts);
	  }

	  up() {
	    this.date.setFullYear(this.date.getFullYear() + 1);
	  }

	  down() {
	    this.date.setFullYear(this.date.getFullYear() - 1);
	  }

	  setTo(val) {
	    this.date.setFullYear(val.substr(-4));
	  }

	  toString() {
	    let year = String(this.date.getFullYear()).padStart(4, '0');
	    return this.token.length === 2 ? year.substr(-2) : year;
	  }
	}

	year = Year;
	return year;
}

var dateparts;
var hasRequiredDateparts;

function requireDateparts () {
	if (hasRequiredDateparts) return dateparts;
	hasRequiredDateparts = 1;

	dateparts = {
	  DatePart: requireDatepart(),
	  Meridiem: requireMeridiem(),
	  Day: requireDay(),
	  Hours: requireHours(),
	  Milliseconds: requireMilliseconds(),
	  Minutes: requireMinutes(),
	  Month: requireMonth(),
	  Seconds: requireSeconds(),
	  Year: requireYear(),
	};
	return dateparts;
}

var date;
var hasRequiredDate;

function requireDate () {
	if (hasRequiredDate) return date;
	hasRequiredDate = 1;

	const color = require$$0;
	const Prompt = requirePrompt();
	const { style, clear, figures } = requireUtil();
	const { erase, cursor } = require$$3;
	const { DatePart, Meridiem, Day, Hours, Milliseconds, Minutes, Month, Seconds, Year } = requireDateparts();

	const regex = /\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g;
	const regexGroups = {
	  1: ({token}) => token.replace(/\\(.)/g, '$1'),
	  2: (opts) => new Day(opts), // Day // TODO
	  3: (opts) => new Month(opts), // Month
	  4: (opts) => new Year(opts), // Year
	  5: (opts) => new Meridiem(opts), // AM/PM // TODO (special)
	  6: (opts) => new Hours(opts), // Hours
	  7: (opts) => new Minutes(opts), // Minutes
	  8: (opts) => new Seconds(opts), // Seconds
	  9: (opts) => new Milliseconds(opts), // Fractional seconds
	};

	const dfltLocales = {
	  months: 'January,February,March,April,May,June,July,August,September,October,November,December'.split(','),
	  monthsShort: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
	  weekdays: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
	  weekdaysShort: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(',')
	};


	/**
	 * DatePrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Number} [opts.initial] Index of default value
	 * @param {String} [opts.mask] The format mask
	 * @param {object} [opts.locales] The date locales
	 * @param {String} [opts.error] The error message shown on invalid value
	 * @param {Function} [opts.validate] Function to validate the submitted value
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */
	class DatePrompt extends Prompt {
	  constructor(opts={}) {
	    super(opts);
	    this.msg = opts.message;
	    this.cursor = 0;
	    this.typed = '';
	    this.locales = Object.assign(dfltLocales, opts.locales);
	    this._date = opts.initial || new Date();
	    this.errorMsg = opts.error || 'Please Enter A Valid Value';
	    this.validator = opts.validate || (() => true);
	    this.mask = opts.mask || 'YYYY-MM-DD HH:mm:ss';
	    this.clear = clear('', this.out.columns);
	    this.render();
	  }

	  get value() {
	    return this.date
	  }

	  get date() {
	    return this._date;
	  }

	  set date(date) {
	    if (date) this._date.setTime(date.getTime());
	  }

	  set mask(mask) {
	    let result;
	    this.parts = [];
	    while(result = regex.exec(mask)) {
	      let match = result.shift();
	      let idx = result.findIndex(gr => gr != null);
	      this.parts.push(idx in regexGroups
	        ? regexGroups[idx]({ token: result[idx] || match, date: this.date, parts: this.parts, locales: this.locales })
	        : result[idx] || match);
	    }

	    let parts = this.parts.reduce((arr, i) => {
	      if (typeof i === 'string' && typeof arr[arr.length - 1] === 'string')
	        arr[arr.length - 1] += i;
	      else arr.push(i);
	      return arr;
	    }, []);

	    this.parts.splice(0);
	    this.parts.push(...parts);
	    this.reset();
	  }

	  moveCursor(n) {
	    this.typed = '';
	    this.cursor = n;
	    this.fire();
	  }

	  reset() {
	    this.moveCursor(this.parts.findIndex(p => p instanceof DatePart));
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.error = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  async validate() {
	    let valid = await this.validator(this.value);
	    if (typeof valid === 'string') {
	      this.errorMsg = valid;
	      valid = false;
	    }
	    this.error = !valid;
	  }

	  async submit() {
	    await this.validate();
	    if (this.error) {
	      this.color = 'red';
	      this.fire();
	      this.render();
	      return;
	    }
	    this.done = true;
	    this.aborted = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  up() {
	    this.typed = '';
	    this.parts[this.cursor].up();
	    this.render();
	  }

	  down() {
	    this.typed = '';
	    this.parts[this.cursor].down();
	    this.render();
	  }

	  left() {
	    let prev = this.parts[this.cursor].prev();
	    if (prev == null) return this.bell();
	    this.moveCursor(this.parts.indexOf(prev));
	    this.render();
	  }

	  right() {
	    let next = this.parts[this.cursor].next();
	    if (next == null) return this.bell();
	    this.moveCursor(this.parts.indexOf(next));
	    this.render();
	  }

	  next() {
	    let next = this.parts[this.cursor].next();
	    this.moveCursor(next
	      ? this.parts.indexOf(next)
	      : this.parts.findIndex((part) => part instanceof DatePart));
	    this.render();
	  }

	  _(c) {
	    if (/\d/.test(c)) {
	      this.typed += c;
	      this.parts[this.cursor].setTo(this.typed);
	      this.render();
	    }
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);
	    else this.out.write(clear(this.outputText, this.out.columns));
	    super.render();

	    // Print prompt
	    this.outputText = [
	      style.symbol(this.done, this.aborted),
	      color.bold(this.msg),
	      style.delimiter(false),
	      this.parts.reduce((arr, p, idx) => arr.concat(idx === this.cursor && !this.done ? color.cyan().underline(p.toString()) : p), [])
	          .join('')
	    ].join(' ');

	    // Print error
	    if (this.error) {
	      this.outputText += this.errorMsg.split('\n').reduce(
	          (a, l, i) => a + `\n${i ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`, ``);
	    }

	    this.out.write(erase.line + cursor.to(0) + this.outputText);
	  }
	}

	date = DatePrompt;
	return date;
}

var number;
var hasRequiredNumber;

function requireNumber () {
	if (hasRequiredNumber) return number;
	hasRequiredNumber = 1;
	const color = require$$0;
	const Prompt = requirePrompt();
	const { cursor, erase } = require$$3;
	const { style, figures, clear, lines } = requireUtil();

	const isNumber = /[0-9]/;
	const isDef = any => any !== undefined;
	const round = (number, precision) => {
	  let factor = Math.pow(10, precision);
	  return Math.round(number * factor) / factor;
	};

	/**
	 * NumberPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {String} [opts.style='default'] Render style
	 * @param {Number} [opts.initial] Default value
	 * @param {Number} [opts.max=+Infinity] Max value
	 * @param {Number} [opts.min=-Infinity] Min value
	 * @param {Boolean} [opts.float=false] Parse input as floats
	 * @param {Number} [opts.round=2] Round floats to x decimals
	 * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys
	 * @param {Function} [opts.validate] Validate function
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {String} [opts.error] The invalid error label
	 */
	class NumberPrompt extends Prompt {
	  constructor(opts={}) {
	    super(opts);
	    this.transform = style.render(opts.style);
	    this.msg = opts.message;
	    this.initial = isDef(opts.initial) ? opts.initial : '';
	    this.float = !!opts.float;
	    this.round = opts.round || 2;
	    this.inc = opts.increment || 1;
	    this.min = isDef(opts.min) ? opts.min : -Infinity;
	    this.max = isDef(opts.max) ? opts.max : Infinity;
	    this.errorMsg = opts.error || `Please Enter A Valid Value`;
	    this.validator = opts.validate || (() => true);
	    this.color = `cyan`;
	    this.value = ``;
	    this.typed = ``;
	    this.lastHit = 0;
	    this.render();
	  }

	  set value(v) {
	    if (!v && v !== 0) {
	      this.placeholder = true;
	      this.rendered = color.gray(this.transform.render(`${this.initial}`));
	      this._value = ``;
	    } else {
	      this.placeholder = false;
	      this.rendered = this.transform.render(`${round(v, this.round)}`);
	      this._value = round(v, this.round);
	    }
	    this.fire();
	  }

	  get value() {
	    return this._value;
	  }

	  parse(x) {
	    return this.float ? parseFloat(x) : parseInt(x);
	  }

	  valid(c) {
	    return c === `-` || c === `.` && this.float || isNumber.test(c)
	  }

	  reset() {
	    this.typed = ``;
	    this.value = ``;
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    let x = this.value;
	    this.value = x !== `` ? x : this.initial;
	    this.done = this.aborted = true;
	    this.error = false;
	    this.fire();
	    this.render();
	    this.out.write(`\n`);
	    this.close();
	  }

	  async validate() {
	    let valid = await this.validator(this.value);
	    if (typeof valid === `string`) {
	      this.errorMsg = valid;
	      valid = false;
	    }
	    this.error = !valid;
	  }

	  async submit() {
	    await this.validate();
	    if (this.error) {
	      this.color = `red`;
	      this.fire();
	      this.render();
	      return;
	    }
	    let x = this.value;
	    this.value = x !== `` ? x : this.initial;
	    this.done = true;
	    this.aborted = false;
	    this.error = false;
	    this.fire();
	    this.render();
	    this.out.write(`\n`);
	    this.close();
	  }

	  up() {
	    this.typed = ``;
	    if(this.value === '') {
	      this.value = this.min - this.inc;
	    }
	    if (this.value >= this.max) return this.bell();
	    this.value += this.inc;
	    this.color = `cyan`;
	    this.fire();
	    this.render();
	  }

	  down() {
	    this.typed = ``;
	    if(this.value === '') {
	      this.value = this.min + this.inc;
	    }
	    if (this.value <= this.min) return this.bell();
	    this.value -= this.inc;
	    this.color = `cyan`;
	    this.fire();
	    this.render();
	  }

	  delete() {
	    let val = this.value.toString();
	    if (val.length === 0) return this.bell();
	    this.value = this.parse((val = val.slice(0, -1))) || ``;
	    if (this.value !== '' && this.value < this.min) {
	      this.value = this.min;
	    }
	    this.color = `cyan`;
	    this.fire();
	    this.render();
	  }

	  next() {
	    this.value = this.initial;
	    this.fire();
	    this.render();
	  }

	  _(c, key) {
	    if (!this.valid(c)) return this.bell();

	    const now = Date.now();
	    if (now - this.lastHit > 1000) this.typed = ``; // 1s elapsed
	    this.typed += c;
	    this.lastHit = now;
	    this.color = `cyan`;

	    if (c === `.`) return this.fire();

	    this.value = Math.min(this.parse(this.typed), this.max);
	    if (this.value > this.max) this.value = this.max;
	    if (this.value < this.min) this.value = this.min;
	    this.fire();
	    this.render();
	  }

	  render() {
	    if (this.closed) return;
	    if (!this.firstRender) {
	      if (this.outputError)
	        this.out.write(cursor.down(lines(this.outputError, this.out.columns) - 1) + clear(this.outputError, this.out.columns));
	      this.out.write(clear(this.outputText, this.out.columns));
	    }
	    super.render();
	    this.outputError = '';

	    // Print prompt
	    this.outputText = [
	      style.symbol(this.done, this.aborted),
	      color.bold(this.msg),
	      style.delimiter(this.done),
	      !this.done || (!this.done && !this.placeholder)
	          ? color[this.color]().underline(this.rendered) : this.rendered
	    ].join(` `);

	    // Print error
	    if (this.error) {
	      this.outputError += this.errorMsg.split(`\n`)
	          .reduce((a, l, i) => a + `\n${i ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`, ``);
	    }

	    this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore);
	  }
	}

	number = NumberPrompt;
	return number;
}

var multiselect;
var hasRequiredMultiselect;

function requireMultiselect () {
	if (hasRequiredMultiselect) return multiselect;
	hasRequiredMultiselect = 1;

	const color = require$$0;
	const { cursor } = require$$3;
	const Prompt = requirePrompt();
	const { clear, figures, style, wrap, entriesToDisplay } = requireUtil();

	/**
	 * MultiselectPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Array} opts.choices Array of choice objects
	 * @param {String} [opts.hint] Hint to display
	 * @param {String} [opts.warn] Hint shown for disabled choices
	 * @param {Number} [opts.max] Max choices
	 * @param {Number} [opts.cursor=0] Cursor start position
	 * @param {Number} [opts.optionsPerPage=10] Max options to display at once
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */
	class MultiselectPrompt extends Prompt {
	  constructor(opts={}) {
	    super(opts);
	    this.msg = opts.message;
	    this.cursor = opts.cursor || 0;
	    this.scrollIndex = opts.cursor || 0;
	    this.hint = opts.hint || '';
	    this.warn = opts.warn || '- This option is disabled -';
	    this.minSelected = opts.min;
	    this.showMinError = false;
	    this.maxChoices = opts.max;
	    this.instructions = opts.instructions;
	    this.optionsPerPage = opts.optionsPerPage || 10;
	    this.value = opts.choices.map((ch, idx) => {
	      if (typeof ch === 'string')
	        ch = {title: ch, value: idx};
	      return {
	        title: ch && (ch.title || ch.value || ch),
	        description: ch && ch.description,
	        value: ch && (ch.value === undefined ? idx : ch.value),
	        selected: ch && ch.selected,
	        disabled: ch && ch.disabled
	      };
	    });
	    this.clear = clear('', this.out.columns);
	    if (!opts.overrideRender) {
	      this.render();
	    }
	  }

	  reset() {
	    this.value.map(v => !v.selected);
	    this.cursor = 0;
	    this.fire();
	    this.render();
	  }

	  selected() {
	    return this.value.filter(v => v.selected);
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    const selected = this.value
	      .filter(e => e.selected);
	    if (this.minSelected && selected.length < this.minSelected) {
	      this.showMinError = true;
	      this.render();
	    } else {
	      this.done = true;
	      this.aborted = false;
	      this.fire();
	      this.render();
	      this.out.write('\n');
	      this.close();
	    }
	  }

	  first() {
	    this.cursor = 0;
	    this.render();
	  }

	  last() {
	    this.cursor = this.value.length - 1;
	    this.render();
	  }
	  next() {
	    this.cursor = (this.cursor + 1) % this.value.length;
	    this.render();
	  }

	  up() {
	    if (this.cursor === 0) {
	      this.cursor = this.value.length - 1;
	    } else {
	      this.cursor--;
	    }
	    this.render();
	  }

	  down() {
	    if (this.cursor === this.value.length - 1) {
	      this.cursor = 0;
	    } else {
	      this.cursor++;
	    }
	    this.render();
	  }

	  left() {
	    this.value[this.cursor].selected = false;
	    this.render();
	  }

	  right() {
	    if (this.value.filter(e => e.selected).length >= this.maxChoices) return this.bell();
	    this.value[this.cursor].selected = true;
	    this.render();
	  }

	  handleSpaceToggle() {
	    const v = this.value[this.cursor];

	    if (v.selected) {
	      v.selected = false;
	      this.render();
	    } else if (v.disabled || this.value.filter(e => e.selected).length >= this.maxChoices) {
	      return this.bell();
	    } else {
	      v.selected = true;
	      this.render();
	    }
	  }

	  toggleAll() {
	    if (this.maxChoices !== undefined || this.value[this.cursor].disabled) {
	      return this.bell();
	    }

	    const newSelected = !this.value[this.cursor].selected;
	    this.value.filter(v => !v.disabled).forEach(v => v.selected = newSelected);
	    this.render();
	  }

	  _(c, key) {
	    if (c === ' ') {
	      this.handleSpaceToggle();
	    } else if (c === 'a') {
	      this.toggleAll();
	    } else {
	      return this.bell();
	    }
	  }

	  renderInstructions() {
	    if (this.instructions === undefined || this.instructions) {
	      if (typeof this.instructions === 'string') {
	        return this.instructions;
	      }
	      return '\nInstructions:\n'
	        + `    ${figures.arrowUp}/${figures.arrowDown}: Highlight option\n`
	        + `    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection\n`
	        + (this.maxChoices === undefined ? `    a: Toggle all\n` : '')
	        + `    enter/return: Complete answer`;
	    }
	    return '';
	  }

	  renderOption(cursor, v, i, arrowIndicator) {
	    const prefix = (v.selected ? color.green(figures.radioOn) : figures.radioOff) + ' ' + arrowIndicator + ' ';
	    let title, desc;

	    if (v.disabled) {
	      title = cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
	    } else {
	      title = cursor === i ? color.cyan().underline(v.title) : v.title;
	      if (cursor === i && v.description) {
	        desc = ` - ${v.description}`;
	        if (prefix.length + title.length + desc.length >= this.out.columns
	          || v.description.split(/\r?\n/).length > 1) {
	          desc = '\n' + wrap(v.description, { margin: prefix.length, width: this.out.columns });
	        }
	      }
	    }

	    return prefix + title + color.gray(desc || '');
	  }

	  // shared with autocompleteMultiselect
	  paginateOptions(options) {
	    if (options.length === 0) {
	      return color.red('No matches for this query.');
	    }

	    let { startIndex, endIndex } = entriesToDisplay(this.cursor, options.length, this.optionsPerPage);
	    let prefix, styledOptions = [];

	    for (let i = startIndex; i < endIndex; i++) {
	      if (i === startIndex && startIndex > 0) {
	        prefix = figures.arrowUp;
	      } else if (i === endIndex - 1 && endIndex < options.length) {
	        prefix = figures.arrowDown;
	      } else {
	        prefix = ' ';
	      }
	      styledOptions.push(this.renderOption(this.cursor, options[i], i, prefix));
	    }

	    return '\n' + styledOptions.join('\n');
	  }

	  // shared with autocomleteMultiselect
	  renderOptions(options) {
	    if (!this.done) {
	      return this.paginateOptions(options);
	    }
	    return '';
	  }

	  renderDoneOrInstructions() {
	    if (this.done) {
	      return this.value
	        .filter(e => e.selected)
	        .map(v => v.title)
	        .join(', ');
	    }

	    const output = [color.gray(this.hint), this.renderInstructions()];

	    if (this.value[this.cursor].disabled) {
	      output.push(color.yellow(this.warn));
	    }
	    return output.join(' ');
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);
	    super.render();

	    // print prompt
	    let prompt = [
	      style.symbol(this.done, this.aborted),
	      color.bold(this.msg),
	      style.delimiter(false),
	      this.renderDoneOrInstructions()
	    ].join(' ');
	    if (this.showMinError) {
	      prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);
	      this.showMinError = false;
	    }
	    prompt += this.renderOptions(this.value);

	    this.out.write(this.clear + prompt);
	    this.clear = clear(prompt, this.out.columns);
	  }
	}

	multiselect = MultiselectPrompt;
	return multiselect;
}

var autocomplete;
var hasRequiredAutocomplete;

function requireAutocomplete () {
	if (hasRequiredAutocomplete) return autocomplete;
	hasRequiredAutocomplete = 1;

	const color = require$$0;
	const Prompt = requirePrompt();
	const { erase, cursor } = require$$3;
	const { style, clear, figures, wrap, entriesToDisplay } = requireUtil();

	const getVal = (arr, i) => arr[i] && (arr[i].value || arr[i].title || arr[i]);
	const getTitle = (arr, i) => arr[i] && (arr[i].title || arr[i].value || arr[i]);
	const getIndex = (arr, valOrTitle) => {
	  const index = arr.findIndex(el => el.value === valOrTitle || el.title === valOrTitle);
	  return index > -1 ? index : undefined;
	};

	/**
	 * TextPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Array} opts.choices Array of auto-complete choices objects
	 * @param {Function} [opts.suggest] Filter function. Defaults to sort by title
	 * @param {Number} [opts.limit=10] Max number of results to show
	 * @param {Number} [opts.cursor=0] Cursor start position
	 * @param {String} [opts.style='default'] Render style
	 * @param {String} [opts.fallback] Fallback message - initial to default value
	 * @param {String} [opts.initial] Index of the default value
	 * @param {Boolean} [opts.clearFirst] The first ESCAPE keypress will clear the input
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {String} [opts.noMatches] The no matches found label
	 */
	class AutocompletePrompt extends Prompt {
	  constructor(opts={}) {
	    super(opts);
	    this.msg = opts.message;
	    this.suggest = opts.suggest;
	    this.choices = opts.choices;
	    this.initial = typeof opts.initial === 'number'
	      ? opts.initial
	      : getIndex(opts.choices, opts.initial);
	    this.select = this.initial || opts.cursor || 0;
	    this.i18n = { noMatches: opts.noMatches || 'no matches found' };
	    this.fallback = opts.fallback || this.initial;
	    this.clearFirst = opts.clearFirst || false;
	    this.suggestions = [];
	    this.input = '';
	    this.limit = opts.limit || 10;
	    this.cursor = 0;
	    this.transform = style.render(opts.style);
	    this.scale = this.transform.scale;
	    this.render = this.render.bind(this);
	    this.complete = this.complete.bind(this);
	    this.clear = clear('', this.out.columns);
	    this.complete(this.render);
	    this.render();
	  }

	  set fallback(fb) {
	    this._fb = Number.isSafeInteger(parseInt(fb)) ? parseInt(fb) : fb;
	  }

	  get fallback() {
	    let choice;
	    if (typeof this._fb === 'number')
	      choice = this.choices[this._fb];
	    else if (typeof this._fb === 'string')
	      choice = { title: this._fb };
	    return choice || this._fb || { title: this.i18n.noMatches };
	  }

	  moveSelect(i) {
	    this.select = i;
	    if (this.suggestions.length > 0)
	      this.value = getVal(this.suggestions, i);
	    else this.value = this.fallback.value;
	    this.fire();
	  }

	  async complete(cb) {
	    const p = (this.completing = this.suggest(this.input, this.choices));
	    const suggestions = await p;

	    if (this.completing !== p) return;
	    this.suggestions = suggestions
	      .map((s, i, arr) => ({ title: getTitle(arr, i), value: getVal(arr, i), description: s.description }));
	    this.completing = false;
	    const l = Math.max(suggestions.length - 1, 0);
	    this.moveSelect(Math.min(l, this.select));

	    cb && cb();
	  }

	  reset() {
	    this.input = '';
	    this.complete(() => {
	      this.moveSelect(this.initial !== void 0 ? this.initial : 0);
	      this.render();
	    });
	    this.render();
	  }

	  exit() {
	    if (this.clearFirst && this.input.length > 0) {
	      this.reset();
	    } else {
	      this.done = this.exited = true; 
	      this.aborted = false;
	      this.fire();
	      this.render();
	      this.out.write('\n');
	      this.close();
	    }
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.exited = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    this.done = true;
	    this.aborted = this.exited = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  _(c, key) {
	    let s1 = this.input.slice(0, this.cursor);
	    let s2 = this.input.slice(this.cursor);
	    this.input = `${s1}${c}${s2}`;
	    this.cursor = s1.length+1;
	    this.complete(this.render);
	    this.render();
	  }

	  delete() {
	    if (this.cursor === 0) return this.bell();
	    let s1 = this.input.slice(0, this.cursor-1);
	    let s2 = this.input.slice(this.cursor);
	    this.input = `${s1}${s2}`;
	    this.complete(this.render);
	    this.cursor = this.cursor-1;
	    this.render();
	  }

	  deleteForward() {
	    if(this.cursor*this.scale >= this.rendered.length) return this.bell();
	    let s1 = this.input.slice(0, this.cursor);
	    let s2 = this.input.slice(this.cursor+1);
	    this.input = `${s1}${s2}`;
	    this.complete(this.render);
	    this.render();
	  }

	  first() {
	    this.moveSelect(0);
	    this.render();
	  }

	  last() {
	    this.moveSelect(this.suggestions.length - 1);
	    this.render();
	  }

	  up() {
	    if (this.select === 0) {
	      this.moveSelect(this.suggestions.length - 1);
	    } else {
	      this.moveSelect(this.select - 1);
	    }
	    this.render();
	  }

	  down() {
	    if (this.select === this.suggestions.length - 1) {
	      this.moveSelect(0);
	    } else {
	      this.moveSelect(this.select + 1);
	    }
	    this.render();
	  }

	  next() {
	    if (this.select === this.suggestions.length - 1) {
	      this.moveSelect(0);
	    } else this.moveSelect(this.select + 1);
	    this.render();
	  }

	  nextPage() {
	    this.moveSelect(Math.min(this.select + this.limit, this.suggestions.length - 1));
	    this.render();
	  }

	  prevPage() {
	    this.moveSelect(Math.max(this.select - this.limit, 0));
	    this.render();
	  }

	  left() {
	    if (this.cursor <= 0) return this.bell();
	    this.cursor = this.cursor-1;
	    this.render();
	  }

	  right() {
	    if (this.cursor*this.scale >= this.rendered.length) return this.bell();
	    this.cursor = this.cursor+1;
	    this.render();
	  }

	  renderOption(v, hovered, isStart, isEnd) {
	    let desc;
	    let prefix = isStart ? figures.arrowUp : isEnd ? figures.arrowDown : ' ';
	    let title = hovered ? color.cyan().underline(v.title) : v.title;
	    prefix = (hovered ? color.cyan(figures.pointer) + ' ' : '  ') + prefix;
	    if (v.description) {
	      desc = ` - ${v.description}`;
	      if (prefix.length + title.length + desc.length >= this.out.columns
	        || v.description.split(/\r?\n/).length > 1) {
	        desc = '\n' + wrap(v.description, { margin: 3, width: this.out.columns });
	      }
	    }
	    return prefix + ' ' + title + color.gray(desc || '');
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);
	    else this.out.write(clear(this.outputText, this.out.columns));
	    super.render();

	    let { startIndex, endIndex } = entriesToDisplay(this.select, this.choices.length, this.limit);

	    this.outputText = [
	      style.symbol(this.done, this.aborted, this.exited),
	      color.bold(this.msg),
	      style.delimiter(this.completing),
	      this.done && this.suggestions[this.select]
	        ? this.suggestions[this.select].title
	        : this.rendered = this.transform.render(this.input)
	    ].join(' ');

	    if (!this.done) {
	      const suggestions = this.suggestions
	        .slice(startIndex, endIndex)
	        .map((item, i) =>  this.renderOption(item,
	          this.select === i + startIndex,
	          i === 0 && startIndex > 0,
	          i + startIndex === endIndex - 1 && endIndex < this.choices.length))
	        .join('\n');
	      this.outputText += `\n` + (suggestions || color.gray(this.fallback.title));
	    }

	    this.out.write(erase.line + cursor.to(0) + this.outputText);
	  }
	}

	autocomplete = AutocompletePrompt;
	return autocomplete;
}

var autocompleteMultiselect;
var hasRequiredAutocompleteMultiselect;

function requireAutocompleteMultiselect () {
	if (hasRequiredAutocompleteMultiselect) return autocompleteMultiselect;
	hasRequiredAutocompleteMultiselect = 1;

	const color = require$$0;
	const { cursor } = require$$3;
	const MultiselectPrompt = requireMultiselect();
	const { clear, style, figures } = requireUtil();
	/**
	 * MultiselectPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Array} opts.choices Array of choice objects
	 * @param {String} [opts.hint] Hint to display
	 * @param {String} [opts.warn] Hint shown for disabled choices
	 * @param {Number} [opts.max] Max choices
	 * @param {Number} [opts.cursor=0] Cursor start position
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 */
	class AutocompleteMultiselectPrompt extends MultiselectPrompt {
	  constructor(opts={}) {
	    opts.overrideRender = true;
	    super(opts);
	    this.inputValue = '';
	    this.clear = clear('', this.out.columns);
	    this.filteredOptions = this.value;
	    this.render();
	  }

	  last() {
	    this.cursor = this.filteredOptions.length - 1;
	    this.render();
	  }
	  next() {
	    this.cursor = (this.cursor + 1) % this.filteredOptions.length;
	    this.render();
	  }

	  up() {
	    if (this.cursor === 0) {
	      this.cursor = this.filteredOptions.length - 1;
	    } else {
	      this.cursor--;
	    }
	    this.render();
	  }

	  down() {
	    if (this.cursor === this.filteredOptions.length - 1) {
	      this.cursor = 0;
	    } else {
	      this.cursor++;
	    }
	    this.render();
	  }

	  left() {
	    this.filteredOptions[this.cursor].selected = false;
	    this.render();
	  }

	  right() {
	    if (this.value.filter(e => e.selected).length >= this.maxChoices) return this.bell();
	    this.filteredOptions[this.cursor].selected = true;
	    this.render();
	  }

	  delete() {
	    if (this.inputValue.length) {
	      this.inputValue = this.inputValue.substr(0, this.inputValue.length - 1);
	      this.updateFilteredOptions();
	    }
	  }

	  updateFilteredOptions() {
	    const currentHighlight = this.filteredOptions[this.cursor];
	    this.filteredOptions = this.value
	      .filter(v => {
	        if (this.inputValue) {
	          if (typeof v.title === 'string') {
	            if (v.title.toLowerCase().includes(this.inputValue.toLowerCase())) {
	              return true;
	            }
	          }
	          if (typeof v.value === 'string') {
	            if (v.value.toLowerCase().includes(this.inputValue.toLowerCase())) {
	              return true;
	            }
	          }
	          return false;
	        }
	        return true;
	      });
	    const newHighlightIndex = this.filteredOptions.findIndex(v => v === currentHighlight);
	    this.cursor = newHighlightIndex < 0 ? 0 : newHighlightIndex;
	    this.render();
	  }

	  handleSpaceToggle() {
	    const v = this.filteredOptions[this.cursor];

	    if (v.selected) {
	      v.selected = false;
	      this.render();
	    } else if (v.disabled || this.value.filter(e => e.selected).length >= this.maxChoices) {
	      return this.bell();
	    } else {
	      v.selected = true;
	      this.render();
	    }
	  }

	  handleInputChange(c) {
	    this.inputValue = this.inputValue + c;
	    this.updateFilteredOptions();
	  }

	  _(c, key) {
	    if (c === ' ') {
	      this.handleSpaceToggle();
	    } else {
	      this.handleInputChange(c);
	    }
	  }

	  renderInstructions() {
	    if (this.instructions === undefined || this.instructions) {
	      if (typeof this.instructions === 'string') {
	        return this.instructions;
	      }
	      return `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`;
	    }
	    return '';
	  }

	  renderCurrentInput() {
	    return `
Filtered results for: ${this.inputValue ? this.inputValue : color.gray('Enter something to filter')}\n`;
	  }

	  renderOption(cursor, v, i) {
	    let title;
	    if (v.disabled) title = cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
	    else title = cursor === i ? color.cyan().underline(v.title) : v.title;
	    return (v.selected ? color.green(figures.radioOn) : figures.radioOff) + '  ' + title
	  }

	  renderDoneOrInstructions() {
	    if (this.done) {
	      return this.value
	        .filter(e => e.selected)
	        .map(v => v.title)
	        .join(', ');
	    }

	    const output = [color.gray(this.hint), this.renderInstructions(), this.renderCurrentInput()];

	    if (this.filteredOptions.length && this.filteredOptions[this.cursor].disabled) {
	      output.push(color.yellow(this.warn));
	    }
	    return output.join(' ');
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);
	    super.render();

	    // print prompt

	    let prompt = [
	      style.symbol(this.done, this.aborted),
	      color.bold(this.msg),
	      style.delimiter(false),
	      this.renderDoneOrInstructions()
	    ].join(' ');

	    if (this.showMinError) {
	      prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);
	      this.showMinError = false;
	    }
	    prompt += this.renderOptions(this.filteredOptions);

	    this.out.write(this.clear + prompt);
	    this.clear = clear(prompt, this.out.columns);
	  }
	}

	autocompleteMultiselect = AutocompleteMultiselectPrompt;
	return autocompleteMultiselect;
}

var confirm;
var hasRequiredConfirm;

function requireConfirm () {
	if (hasRequiredConfirm) return confirm;
	hasRequiredConfirm = 1;
	const color = require$$0;
	const Prompt = requirePrompt();
	const { style, clear } = requireUtil();
	const { erase, cursor } = require$$3;

	/**
	 * ConfirmPrompt Base Element
	 * @param {Object} opts Options
	 * @param {String} opts.message Message
	 * @param {Boolean} [opts.initial] Default value (true/false)
	 * @param {Stream} [opts.stdin] The Readable stream to listen to
	 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
	 * @param {String} [opts.yes] The "Yes" label
	 * @param {String} [opts.yesOption] The "Yes" option when choosing between yes/no
	 * @param {String} [opts.no] The "No" label
	 * @param {String} [opts.noOption] The "No" option when choosing between yes/no
	 */
	class ConfirmPrompt extends Prompt {
	  constructor(opts={}) {
	    super(opts);
	    this.msg = opts.message;
	    this.value = opts.initial;
	    this.initialValue = !!opts.initial;
	    this.yesMsg = opts.yes || 'yes';
	    this.yesOption = opts.yesOption || '(Y/n)';
	    this.noMsg = opts.no || 'no';
	    this.noOption = opts.noOption || '(y/N)';
	    this.render();
	  }

	  reset() {
	    this.value = this.initialValue;
	    this.fire();
	    this.render();
	  }

	  exit() {
	    this.abort();
	  }

	  abort() {
	    this.done = this.aborted = true;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  submit() {
	    this.value = this.value || false;
	    this.done = true;
	    this.aborted = false;
	    this.fire();
	    this.render();
	    this.out.write('\n');
	    this.close();
	  }

	  _(c, key) {
	    if (c.toLowerCase() === 'y') {
	      this.value = true;
	      return this.submit();
	    }
	    if (c.toLowerCase() === 'n') {
	      this.value = false;
	      return this.submit();
	    }
	    return this.bell();
	  }

	  render() {
	    if (this.closed) return;
	    if (this.firstRender) this.out.write(cursor.hide);
	    else this.out.write(clear(this.outputText, this.out.columns));
	    super.render();

	    this.outputText = [
	      style.symbol(this.done, this.aborted),
	      color.bold(this.msg),
	      style.delimiter(this.done),
	      this.done ? (this.value ? this.yesMsg : this.noMsg)
	          : color.gray(this.initialValue ? this.yesOption : this.noOption)
	    ].join(' ');

	    this.out.write(erase.line + cursor.to(0) + this.outputText);
	  }
	}

	confirm = ConfirmPrompt;
	return confirm;
}

var elements;
var hasRequiredElements;

function requireElements () {
	if (hasRequiredElements) return elements;
	hasRequiredElements = 1;

	elements = {
	  TextPrompt: requireText(),
	  SelectPrompt: requireSelect(),
	  TogglePrompt: requireToggle(),
	  DatePrompt: requireDate(),
	  NumberPrompt: requireNumber(),
	  MultiselectPrompt: requireMultiselect(),
	  AutocompletePrompt: requireAutocomplete(),
	  AutocompleteMultiselectPrompt: requireAutocompleteMultiselect(),
	  ConfirmPrompt: requireConfirm()
	};
	return elements;
}

var hasRequiredPrompts$1;

function requirePrompts$1 () {
	if (hasRequiredPrompts$1) return prompts$2;
	hasRequiredPrompts$1 = 1;
	(function (exports) {
		const $ = exports;
		const el = requireElements();
		const noop = v => v;

		function toPrompt(type, args, opts={}) {
		  return new Promise((res, rej) => {
		    const p = new el[type](args);
		    const onAbort = opts.onAbort || noop;
		    const onSubmit = opts.onSubmit || noop;
		    const onExit = opts.onExit || noop;
		    p.on('state', args.onState || noop);
		    p.on('submit', x => res(onSubmit(x)));
		    p.on('exit', x => res(onExit(x)));
		    p.on('abort', x => rej(onAbort(x)));
		  });
		}

		/**
		 * Text prompt
		 * @param {string} args.message Prompt message to display
		 * @param {string} [args.initial] Default string value
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {function} [args.onState] On state change callback
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.text = args => toPrompt('TextPrompt', args);

		/**
		 * Password prompt with masked input
		 * @param {string} args.message Prompt message to display
		 * @param {string} [args.initial] Default string value
		 * @param {function} [args.onState] On state change callback
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.password = args => {
		  args.style = 'password';
		  return $.text(args);
		};

		/**
		 * Prompt where input is invisible, like sudo
		 * @param {string} args.message Prompt message to display
		 * @param {string} [args.initial] Default string value
		 * @param {function} [args.onState] On state change callback
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.invisible = args => {
		  args.style = 'invisible';
		  return $.text(args);
		};

		/**
		 * Number prompt
		 * @param {string} args.message Prompt message to display
		 * @param {number} args.initial Default number value
		 * @param {function} [args.onState] On state change callback
		 * @param {number} [args.max] Max value
		 * @param {number} [args.min] Min value
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {Boolean} [opts.float=false] Parse input as floats
		 * @param {Number} [opts.round=2] Round floats to x decimals
		 * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.number = args => toPrompt('NumberPrompt', args);

		/**
		 * Date prompt
		 * @param {string} args.message Prompt message to display
		 * @param {number} args.initial Default number value
		 * @param {function} [args.onState] On state change callback
		 * @param {number} [args.max] Max value
		 * @param {number} [args.min] Min value
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {Boolean} [opts.float=false] Parse input as floats
		 * @param {Number} [opts.round=2] Round floats to x decimals
		 * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys
		 * @param {function} [args.validate] Function to validate user input
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.date = args => toPrompt('DatePrompt', args);

		/**
		 * Classic yes/no prompt
		 * @param {string} args.message Prompt message to display
		 * @param {boolean} [args.initial=false] Default value
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.confirm = args => toPrompt('ConfirmPrompt', args);

		/**
		 * List prompt, split intput string by `seperator`
		 * @param {string} args.message Prompt message to display
		 * @param {string} [args.initial] Default string value
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {string} [args.separator] String separator
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input, in form of an `Array`
		 */
		$.list = args => {
		  const sep = args.separator || ',';
		  return toPrompt('TextPrompt', args, {
		    onSubmit: str => str.split(sep).map(s => s.trim())
		  });
		};

		/**
		 * Toggle/switch prompt
		 * @param {string} args.message Prompt message to display
		 * @param {boolean} [args.initial=false] Default value
		 * @param {string} [args.active="on"] Text for `active` state
		 * @param {string} [args.inactive="off"] Text for `inactive` state
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.toggle = args => toPrompt('TogglePrompt', args);

		/**
		 * Interactive select prompt
		 * @param {string} args.message Prompt message to display
		 * @param {Array} args.choices Array of choices objects `[{ title, value }, ...]`
		 * @param {number} [args.initial] Index of default value
		 * @param {String} [args.hint] Hint to display
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.select = args => toPrompt('SelectPrompt', args);

		/**
		 * Interactive multi-select / autocompleteMultiselect prompt
		 * @param {string} args.message Prompt message to display
		 * @param {Array} args.choices Array of choices objects `[{ title, value, [selected] }, ...]`
		 * @param {number} [args.max] Max select
		 * @param {string} [args.hint] Hint to display user
		 * @param {Number} [args.cursor=0] Cursor start position
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.multiselect = args => {
		  args.choices = [].concat(args.choices || []);
		  const toSelected = items => items.filter(item => item.selected).map(item => item.value);
		  return toPrompt('MultiselectPrompt', args, {
		    onAbort: toSelected,
		    onSubmit: toSelected
		  });
		};

		$.autocompleteMultiselect = args => {
		  args.choices = [].concat(args.choices || []);
		  const toSelected = items => items.filter(item => item.selected).map(item => item.value);
		  return toPrompt('AutocompleteMultiselectPrompt', args, {
		    onAbort: toSelected,
		    onSubmit: toSelected
		  });
		};

		const byTitle = (input, choices) => Promise.resolve(
		  choices.filter(item => item.title.slice(0, input.length).toLowerCase() === input.toLowerCase())
		);

		/**
		 * Interactive auto-complete prompt
		 * @param {string} args.message Prompt message to display
		 * @param {Array} args.choices Array of auto-complete choices objects `[{ title, value }, ...]`
		 * @param {Function} [args.suggest] Function to filter results based on user input. Defaults to sort by `title`
		 * @param {number} [args.limit=10] Max number of results to show
		 * @param {string} [args.style="default"] Render style ('default', 'password', 'invisible')
		 * @param {String} [args.initial] Index of the default value
		 * @param {boolean} [opts.clearFirst] The first ESCAPE keypress will clear the input
		 * @param {String} [args.fallback] Fallback message - defaults to initial value
		 * @param {function} [args.onState] On state change callback
		 * @param {Stream} [args.stdin] The Readable stream to listen to
		 * @param {Stream} [args.stdout] The Writable stream to write readline data to
		 * @returns {Promise} Promise with user input
		 */
		$.autocomplete = args => {
		  args.suggest = args.suggest || byTitle;
		  args.choices = [].concat(args.choices || []);
		  return toPrompt('AutocompletePrompt', args);
		}; 
	} (prompts$2));
	return prompts$2;
}

var lib;
var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib;
	hasRequiredLib = 1;

	const prompts = requirePrompts$1();

	const passOn = ['suggest', 'format', 'onState', 'validate', 'onRender', 'type'];
	const noop = () => {};

	/**
	 * Prompt for a series of questions
	 * @param {Array|Object} questions Single question object or Array of question objects
	 * @param {Function} [onSubmit] Callback function called on prompt submit
	 * @param {Function} [onCancel] Callback function called on cancel/abort
	 * @returns {Object} Object with values from user input
	 */
	async function prompt(questions=[], { onSubmit=noop, onCancel=noop }={}) {
	  const answers = {};
	  const override = prompt._override || {};
	  questions = [].concat(questions);
	  let answer, question, quit, name, type, lastPrompt;

	  const getFormattedAnswer = async (question, answer, skipValidation = false) => {
	    if (!skipValidation && question.validate && question.validate(answer) !== true) {
	      return;
	    }
	    return question.format ? await question.format(answer, answers) : answer
	  };

	  for (question of questions) {
	    ({ name, type } = question);

	    // evaluate type first and skip if type is a falsy value
	    if (typeof type === 'function') {
	      type = await type(answer, { ...answers }, question);
	      question['type'] = type;
	    }
	    if (!type) continue;

	    // if property is a function, invoke it unless it's a special function
	    for (let key in question) {
	      if (passOn.includes(key)) continue;
	      let value = question[key];
	      question[key] = typeof value === 'function' ? await value(answer, { ...answers }, lastPrompt) : value;
	    }

	    lastPrompt = question;

	    if (typeof question.message !== 'string') {
	      throw new Error('prompt message is required');
	    }

	    // update vars in case they changed
	    ({ name, type } = question);

	    if (prompts[type] === void 0) {
	      throw new Error(`prompt type (${type}) is not defined`);
	    }

	    if (override[question.name] !== undefined) {
	      answer = await getFormattedAnswer(question, override[question.name]);
	      if (answer !== undefined) {
	        answers[name] = answer;
	        continue;
	      }
	    }

	    try {
	      // Get the injected answer if there is one or prompt the user
	      answer = prompt._injected ? getInjectedAnswer(prompt._injected, question.initial) : await prompts[type](question);
	      answers[name] = answer = await getFormattedAnswer(question, answer, true);
	      quit = await onSubmit(question, answer, answers);
	    } catch (err) {
	      quit = !(await onCancel(question, answers));
	    }

	    if (quit) return answers;
	  }

	  return answers;
	}

	function getInjectedAnswer(injected, deafultValue) {
	  const answer = injected.shift();
	    if (answer instanceof Error) {
	      throw answer;
	    }

	    return (answer === undefined) ? deafultValue : answer;
	}

	function inject(answers) {
	  prompt._injected = (prompt._injected || []).concat(answers);
	}

	function override(answers) {
	  prompt._override = Object.assign({}, answers);
	}

	lib = Object.assign(prompt, { prompt, prompts, inject, override });
	return lib;
}

var prompts$1;
var hasRequiredPrompts;

function requirePrompts () {
	if (hasRequiredPrompts) return prompts$1;
	hasRequiredPrompts = 1;
	function isNodeLT(tar) {
	  tar = (Array.isArray(tar) ? tar : tar.split('.')).map(Number);
	  let i=0, src=process.versions.node.split('.').map(Number);
	  for (; i < tar.length; i++) {
	    if (src[i] > tar[i]) return false;
	    if (tar[i] > src[i]) return true;
	  }
	  return false;
	}

	prompts$1 =
	  isNodeLT('8.6.0')
	    ? requireDist()
	    : requireLib();
	return prompts$1;
}

var promptsExports = requirePrompts();
var prompts = /*@__PURE__*/getDefaultExportFromCjs(promptsExports);

/**
 * @description Enum for log levels.
 * @summary Defines different levels of logging for the application.
 * @enum {string}
 * @readonly
 * @memberOf module:Logging
 */
var LogLevel;
(function (LogLevel) {
    /** Error events that are likely to cause problems. */
    LogLevel["error"] = "error";
    /** Routine information, such as ongoing status or performance. */
    LogLevel["info"] = "info";
    /** Additional relevant information. */
    LogLevel["verbose"] = "verbose";
    /** Debug or trace information. */
    LogLevel["debug"] = "debug";
    /** way too verbose or silly information. */
    LogLevel["silly"] = "silly";
})(LogLevel || (LogLevel = {}));
/**
 * @description Numeric values associated with log levels.
 * @summary Provides a numeric representation of log levels for comparison and filtering.
 * @const NumericLogLevels
 * @property {number} error - Numeric value for error level (2).
 * @property {number} info - Numeric value for info level (4).
 * @property {number} verbose - Numeric value for verbose level (6).
 * @property {number} debug - Numeric value for debug level (7).
 * @property {number} silly - Numeric value for silly level (9).
 * @memberOf module:Logging
 */
const NumericLogLevels = {
    error: 2,
    info: 4,
    verbose: 6,
    debug: 7,
    silly: 9,
};
/**
 * @description Enum for logging output modes.
 * @summary Defines different output formats for log messages.
 * @enum {string}
 * @memberOf module:Logging
 */
var LoggingMode;
(function (LoggingMode) {
    /** Raw text format for human readability */
    LoggingMode["RAW"] = "raw";
    /** JSON format for machine parsing */
    LoggingMode["JSON"] = "json";
})(LoggingMode || (LoggingMode = {}));
/**
 * @description Default theme for styling log output.
 * @summary Defines the default color and style settings for various components of log messages.
 * @const DefaultTheme
 * @typedef {Theme} DefaultTheme
 * @property {Object} class - Styling for class names.
 * @property {number} class.fg - Foreground color code for class names (34).
 * @property {Object} id - Styling for identifiers.
 * @property {number} id.fg - Foreground color code for identifiers (36).
 * @property {Object} stack - Styling for stack traces (empty object).
 * @property {Object} timestamp - Styling for timestamps (empty object).
 * @property {Object} message - Styling for different types of messages.
 * @property {Object} message.error - Styling for error messages.
 * @property {number} message.error.fg - Foreground color code for error messages (31).
 * @property {Object} method - Styling for method names (empty object).
 * @property {Object} logLevel - Styling for different log levels.
 * @property {Object} logLevel.error - Styling for error level logs.
 * @property {number} logLevel.error.fg - Foreground color code for error level logs (31).
 * @property {string[]} logLevel.error.style - Style attributes for error level logs (["bold"]).
 * @property {Object} logLevel.info - Styling for info level logs (empty object).
 * @property {Object} logLevel.verbose - Styling for verbose level logs (empty object).
 * @property {Object} logLevel.debug - Styling for debug level logs.
 * @property {number} logLevel.debug.fg - Foreground color code for debug level logs (33).
 * @memberOf module:Logging
 */
const DefaultTheme = {
    class: {
        fg: 34,
    },
    id: {
        fg: 36,
    },
    stack: {},
    timestamp: {},
    message: {
        error: {
            fg: 31,
        },
    },
    method: {},
    logLevel: {
        error: {
            fg: 31,
            style: ["bold"],
        },
        info: {},
        verbose: {},
        debug: {
            fg: 33,
        },
    },
};
/**
 * @description Default configuration for logging.
 * @summary Defines the default settings for the logging system, including verbosity, log level, styling, and timestamp format.
 * @const DefaultLoggingConfig
 * @typedef {LoggingConfig} DefaultLoggingConfig
 * @property {number} verbose - Verbosity level (0).
 * @property {LogLevel} level - Default log level (LogLevel.info).
 * @property {boolean} logLevel - Whether to display log level in output (true).
 * @property {LoggingMode} mode - Output format mode (LoggingMode.RAW).
 * @property {boolean} style - Whether to apply styling to log output (false).
 * @property {string} separator - Separator between log components (" - ").
 * @property {boolean} timestamp - Whether to include timestamps in log messages (true).
 * @property {string} timestampFormat - Format for timestamps ("HH:mm:ss.SSS").
 * @property {boolean} context - Whether to include context information in log messages (true).
 * @property {Theme} theme - The theme to use for styling log messages (DefaultTheme).
 * @memberOf module:Logging
 */
const DefaultLoggingConfig = {
    verbose: 0,
    level: LogLevel.info,
    logLevel: true,
    mode: LoggingMode.RAW,
    style: false,
    contextSeparator: ".",
    separator: " - ",
    timestamp: true,
    timestampFormat: "HH:mm:ss.SSS",
    context: true,
    theme: DefaultTheme,
};

/**
 * @description ANSI escape code for resetting text formatting.
 * @summary This constant holds the ANSI escape sequence used to reset all text formatting to default.
 * @const AnsiReset
 * @memberOf module:StyledString
 */
const AnsiReset$1 = "\x1b[0m";
/**
 * @description Standard foreground color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for standard foreground colors.
 * @const StandardForegroundColors
 * @property {number} black - ANSI code for black text (30).
 * @property {number} red - ANSI code for red text (31).
 * @property {number} green - ANSI code for green text (32).
 * @property {number} yellow - ANSI code for yellow text (33).
 * @property {number} blue - ANSI code for blue text (34).
 * @property {number} magenta - ANSI code for magenta text (35).
 * @property {number} cyan - ANSI code for cyan text (36).
 * @property {number} white - ANSI code for white text (37).
 * @memberOf module:StyledString
 */
const StandardForegroundColors$1 = {
    black: 30,
    red: 31,
    green: 32,
    yellow: 33,
    blue: 34,
    magenta: 35,
    cyan: 36,
    white: 37,
};
/**
 * @description Bright foreground color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for bright foreground colors.
 * @const BrightForegroundColors
 * @property {number} black - ANSI code for bright black text (90).
 * @property {number} red - ANSI code for bright red text (91).
 * @property {number} green - ANSI code for bright green text (92).
 * @property {number} yellow - ANSI code for bright yellow text (93).
 * @property {number} blue - ANSI code for bright blue text (94).
 * @property {number} magenta - ANSI code for bright magenta text (95).
 * @property {number} cyan - ANSI code for bright cyan text (96).
 * @property {number} white - ANSI code for bright white text (97).
 * @memberOf module:@StyledString
 */
const BrightForegroundColors$1 = {
    brightBlack: 90,
    brightRed: 91,
    brightGreen: 92,
    brightYellow: 93,
    brightBlue: 94,
    brightMagenta: 95,
    brightCyan: 96,
    brightWhite: 97,
};
/**
 * @description Standard background color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for standard background colors.
 * @const StandardBackgroundColors
 * @property {number} bgBlack - ANSI code for black background (40).
 * @property {number} bgRed - ANSI code for red background (41).
 * @property {number} bgGreen - ANSI code for green background (42).
 * @property {number} bgYellow - ANSI code for yellow background (43).
 * @property {number} bgBlue - ANSI code for blue background (44).
 * @property {number} bgMagenta - ANSI code for magenta background (45).
 * @property {number} bgCyan - ANSI code for cyan background (46).
 * @property {number} bgWhite - ANSI code for white background (47).
 * @memberOf module:@StyledString
 */
const StandardBackgroundColors$1 = {
    bgBlack: 40,
    bgRed: 41,
    bgGreen: 42,
    bgYellow: 43,
    bgBlue: 44,
    bgMagenta: 45,
    bgCyan: 46,
    bgWhite: 47,
};
/**
 * @description Bright background color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for bright background colors.
 * @const BrightBackgroundColors
 * @property {number} bgBrightBlack - ANSI code for bright black background (100).
 * @property {number} bgBrightRed - ANSI code for bright red background (101).
 * @property {number} bgBrightGreen - ANSI code for bright green background (102).
 * @property {number} bgBrightYellow - ANSI code for bright yellow background (103).
 * @property {number} bgBrightBlue - ANSI code for bright blue background (104).
 * @property {number} bgBrightMagenta - ANSI code for bright magenta background (105).
 * @property {number} bgBrightCyan - ANSI code for bright cyan background (106).
 * @property {number} bgBrightWhite - ANSI code for bright white background (107).
 * @memberOf module:@StyledString
 */
const BrightBackgroundColors$1 = {
    bgBrightBlack: 100,
    bgBrightRed: 101,
    bgBrightGreen: 102,
    bgBrightYellow: 103,
    bgBrightBlue: 104,
    bgBrightMagenta: 105,
    bgBrightCyan: 106,
    bgBrightWhite: 107,
};
/**
 * @description Text style codes for ANSI text formatting.
 * @summary This object maps style names to their corresponding ANSI codes for various text styles.
 * @const styles
 * @property {number} reset - ANSI code to reset all styles (0).
 * @property {number} bold - ANSI code for bold text (1).
 * @property {number} dim - ANSI code for dim text (2).
 * @property {number} italic - ANSI code for italic text (3).
 * @property {number} underline - ANSI code for underlined text (4).
 * @property {number} blink - ANSI code for blinking text (5).
 * @property {number} inverse - ANSI code for inverse colors (7).
 * @property {number} hidden - ANSI code for hidden text (8).
 * @property {number} strikethrough - ANSI code for strikethrough text (9).
 * @property {number} doubleUnderline - ANSI code for double underlined text (21).
 * @property {number} normalColor - ANSI code to reset color to normal (22).
 * @property {number} noItalicOrFraktur - ANSI code to turn off italic (23).
 * @property {number} noUnderline - ANSI code to turn off underline (24).
 * @property {number} noBlink - ANSI code to turn off blink (25).
 * @property {number} noInverse - ANSI code to turn off inverse (27).
 * @property {number} noHidden - ANSI code to turn off hidden (28).
 * @property {number} noStrikethrough - ANSI code to turn off strikethrough (29).
 * @memberOf module:@StyledString
 */
const styles$1 = {
    reset: 0,
    bold: 1,
    dim: 2,
    italic: 3,
    underline: 4,
    blink: 5,
    inverse: 7,
    hidden: 8,
    strikethrough: 9,
    doubleUnderline: 21,
    normalColor: 22,
    noItalicOrFraktur: 23,
    noUnderline: 24,
    noBlink: 25,
    noInverse: 27,
    noHidden: 28,
    noStrikethrough: 29,
};

/**
 * @description Applies a basic ANSI color code to text.
 * @summary This function takes a string, an ANSI color code number, and an optional background flag.
 * It returns the text wrapped in the appropriate ANSI escape codes for either foreground or background coloring.
 * This function is used for basic 16-color ANSI formatting.
 *
 * @param {string} text - The text to be colored.
 * @param {number} n - The ANSI color code number.
 * @param {boolean} [bg=false] - If true, applies the color to the background instead of the foreground.
 * @return {string} The text wrapped in ANSI color codes.
 *
 * @function colorizeANSI
 * @memberOf module:@StyledString
 */
function colorizeANSI$1(text, n, bg = false) {
    if (isNaN(n)) {
        console.warn(`Invalid color number on the ANSI scale: ${n}. ignoring...`);
        return text;
    }
    if (bg && ((n > 30 && n <= 40)
        || (n > 90 && n <= 100))) {
        n = n + 10;
    }
    return `\x1b[${n}m${text}${AnsiReset$1}`;
}
/**
 * @description Applies a 256-color ANSI code to text.
 * @summary This function takes a string and a color number (0-255) and returns the text
 * wrapped in ANSI escape codes for either foreground or background coloring.
 *
 * @param {string} text - The text to be colored.
 * @param {number} n - The color number (0-255).
 * @param {boolean} [bg=false] - If true, applies the color to the background instead of the foreground.
 * @return {string} The text wrapped in ANSI color codes.
 *
 * @function colorize256
 * @memberOf module:@StyledString
 */
function colorize256$1(text, n, bg = false) {
    if (isNaN(n)) {
        console.warn(`Invalid color number on the 256 scale: ${n}. ignoring...`);
        return text;
    }
    if (n < 0 || n > 255) {
        console.warn(`Invalid color number on the 256 scale: ${n}. ignoring...`);
        return text;
    }
    return `\x1b[${bg ? 48 : 38};5;${n}m${text}${AnsiReset$1}`;
}
/**
 * @description Applies an RGB color ANSI code to text.
 * @summary This function takes a string and RGB color values (0-255 for each component)
 * and returns the text wrapped in ANSI escape codes for either foreground or background coloring.
 *
 * @param {string} text - The text to be colored.
 * @param {number} r - The red component of the color (0-255).
 * @param {number} g - The green component of the color (0-255).
 * @param {number} b - The blue component of the color (0-255).
 * @param {boolean} [bg=false] - If true, applies the color to the background instead of the foreground.
 * @return {string} The text wrapped in ANSI color codes.
 *
 * @function colorizeRGB
 * @memberOf module:StyledString
 */
function colorizeRGB$1(text, r, g, b, bg = false) {
    if (isNaN(r) || isNaN(g) || isNaN(b)) {
        console.warn(`Invalid RGB color values: r=${r}, g=${g}, b=${b}. Ignoring...`);
        return text;
    }
    if ([r, g, b].some(v => v < 0 || v > 255)) {
        console.warn(`Invalid RGB color values: r=${r}, g=${g}, b=${b}. Ignoring...`);
        return text;
    }
    return `\x1b[${bg ? 48 : 38};2;${r};${g};${b}m${text}${AnsiReset$1}`;
}
/**
 * @description Applies an ANSI style code to text.
 * @summary This function takes a string and a style code (either a number or a key from the styles object)
 * and returns the text wrapped in the appropriate ANSI escape codes for that style.
 *
 * @param {string} text - The text to be styled.
 * @param {number | string} n - The style code or style name.
 * @return {string} The text wrapped in ANSI style codes.
 *
 * @function applyStyle
 * @memberOf module:StyledString
 */
function applyStyle$1(text, n) {
    const styleCode = typeof n === "number" ? n : styles$1[n];
    return `\x1b[${styleCode}m${text}${AnsiReset$1}`;
}
/**
 * @description Removes all ANSI formatting codes from text.
 * @summary This function takes a string that may contain ANSI escape codes for formatting
 * and returns a new string with all such codes removed, leaving only the plain text content.
 * It uses a regular expression to match and remove ANSI escape sequences.
 *
 * @param {string} text - The text potentially containing ANSI formatting codes.
 * @return {string} The input text with all ANSI formatting codes removed.
 *
 * @function clear
 * @memberOf module:StyledString
 */
function clear$1(text) {
    // Regular expression to match ANSI escape codes
    // eslint-disable-next-line no-control-regex
    const ansiRegex = /\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])/g;
    return text.replace(ansiRegex, '');
}
/**
 * @description Applies raw ANSI escape codes to text.
 * @summary This function takes a string and a raw ANSI escape code, and returns the text
 * wrapped in the provided raw ANSI code and the reset code. This allows for applying custom
 * or complex ANSI formatting that may not be covered by other utility functions.
 *
 * @param {string} text - The text to be formatted.
 * @param {string} raw - The raw ANSI escape code to be applied.
 * @return {string} The text wrapped in the raw ANSI code and the reset code.
 *
 * @function raw
 * @memberOf module:StyledString
 */
function raw$1(text, raw) {
    return `${raw}${text}${AnsiReset$1}`;
}

/**
 * @class StyledString
 * @description A class that extends string functionality with ANSI color and style options.
 * @summary StyledString provides methods to apply various ANSI color and style options to text strings.
 * It implements the ColorizeOptions interface and proxies native string methods to the underlying text.
 * This class allows for chaining of styling methods and easy application of colors and styles to text.
 *
 * @implements {ColorizeOptions}
 * @param {string} text - The initial text string to be styled.
 */
let StyledString$1 = class StyledString {
    constructor(text) {
        this.text = text;
        // Basic colors
        Object.entries(StandardForegroundColors$1).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.foreground(code),
            });
        });
        Object.entries(BrightForegroundColors$1).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.foreground(code),
            });
        });
        // Background colors
        Object.entries(StandardBackgroundColors$1).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.background(code),
            });
        });
        Object.entries(BrightBackgroundColors$1).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.background(code),
            });
        });
        // Styles
        Object.entries(styles$1).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.style(code),
            });
        });
    }
    /**
     * @description Clears all styling from the text.
     * @summary Removes all ANSI color and style codes from the text.
     * @return {StyledString} The StyledString instance with cleared styling.
     */
    clear() {
        this.text = clear$1(this.text);
        return this;
    }
    /**
     * @description Applies raw ANSI codes to the text.
     * @summary Allows direct application of ANSI escape sequences to the text.
     * @param {string} rawAnsi - The raw ANSI escape sequence to apply.
     * @return {StyledString} The StyledString instance with the raw ANSI code applied.
     */
    raw(rawAnsi) {
        this.text = raw$1(this.text, rawAnsi);
        return this;
    }
    /**
     * @description Applies a foreground color to the text.
     * @summary Sets the text color using ANSI color codes.
     * @param {number} n - The ANSI color code for the foreground color.
     * @return {StyledString} The StyledString instance with the foreground color applied.
     */
    foreground(n) {
        this.text = colorizeANSI$1(this.text, n);
        return this;
    }
    /**
     * @description Applies a background color to the text.
     * @summary Sets the background color of the text using ANSI color codes.
     * @param {number} n - The ANSI color code for the background color.
     * @return {StyledString} The StyledString instance with the background color applied.
     */
    background(n) {
        this.text = colorizeANSI$1(this.text, n, true);
        return this;
    }
    /**
     * @description Applies a text style to the string.
     * @summary Sets text styles such as bold, italic, or underline using ANSI style codes.
     * @param {number | string} n - The style code or key from the styles object.
     * @return {StyledString} The StyledString instance with the style applied.
     */
    style(n) {
        if (typeof n === "string" && !(n in styles$1)) {
            console.warn(`Invalid style: ${n}`);
            return this;
        }
        this.text = applyStyle$1(this.text, n);
        return this;
    }
    /**
     * @description Applies a 256-color foreground color to the text.
     * @summary Sets the text color using the extended 256-color palette.
     * @param {number} n - The color number from the 256-color palette.
     * @return {StyledString} The StyledString instance with the 256-color foreground applied.
     */
    color256(n) {
        this.text = colorize256$1(this.text, n);
        return this;
    }
    /**
     * @description Applies a 256-color background color to the text.
     * @summary Sets the background color using the extended 256-color palette.
     * @param {number} n - The color number from the 256-color palette.
     * @return {StyledString} The StyledString instance with the 256-color background applied.
     */
    bgColor256(n) {
        this.text = colorize256$1(this.text, n, true);
        return this;
    }
    /**
     * @description Applies an RGB foreground color to the text.
     * @summary Sets the text color using RGB values.
     * @param {number} r - The red component (0-255).
     * @param {number} g - The green component (0-255).
     * @param {number} b - The blue component (0-255).
     * @return {StyledString} The StyledString instance with the RGB foreground color applied.
     */
    rgb(r, g, b) {
        this.text = colorizeRGB$1(this.text, r, g, b);
        return this;
    }
    /**
     * @description Applies an RGB background color to the text.
     * @summary Sets the background color using RGB values.
     * @param {number} r - The red component (0-255).
     * @param {number} g - The green component (0-255).
     * @param {number} b - The blue component (0-255).
     * @return {StyledString} The StyledString instance with the RGB background color applied.
     */
    bgRgb(r, g, b) {
        this.text = colorizeRGB$1(this.text, r, g, b, true);
        return this;
    }
    /**
     * @description Converts the StyledString to a regular string.
     * @summary Returns the underlying text with all applied styling.
     * @return {string} The styled text as a regular string.
     */
    toString() {
        return this.text;
    }
};
/**
 * @description Applies styling to a given text string.
 * @summary This function takes a string and returns a StyledString object, which is an enhanced
 * version of the original string with additional methods for applying various ANSI color and style
 * options. It sets up a mapper object with methods for different styling operations and then
 * defines properties on the text string to make these methods accessible.
 *
 * @param {string[]} t  The input text to be styled.
 * @return {StyledString} A StyledString object with additional styling methods.
 *
 * @function style
 *
 * @memberOf StyledString
 */
function style$1(...t) {
    return new StyledString$1(t.join(" "));
}

/**
 * @description A minimal logger implementation.
 * @summary MiniLogger is a lightweight logging class that implements the Logger interface.
 * It provides basic logging functionality with support for different log levels, verbosity,
 * context-aware logging, and customizable formatting.
 * @param {string} context - The context (typically class name) this logger is associated with
 * @param {Partial<LoggingConfig>} conf - Optional configuration to override global settings
 * @class MiniLogger
 * @example
 * // Create a new logger for a class
 * const logger = new MiniLogger('MyClass');
 *
 * // Log messages at different levels
 * logger.info('This is an info message');
 * logger.debug('This is a debug message');
 * logger.error('Something went wrong');
 *
 * // Create a child logger for a specific method
 * const methodLogger = logger.for('myMethod');
 * methodLogger.verbose('Detailed information', 2);
 *
 * // Log with custom configuration
 * logger.for('specialMethod', { style: true }).info('Styled message');
 */
class MiniLogger {
    constructor(context, conf) {
        this.context = context;
        this.conf = conf;
    }
    config(key) {
        if (this.conf && key in this.conf)
            return this.conf[key];
        return Logging.getConfig()[key];
    }
    /**
     * @description Creates a child logger for a specific method or context
     * @summary Returns a new logger instance with the current context extended by the specified method name
     * @param {string | Function} method - The method name or function to create a logger for
     * @param {Partial<LoggingConfig>} config - Optional configuration to override settings
     * @param {...any[]} args - Additional arguments to pass to the logger factory
     * @return {Logger} A new logger instance for the specified method
     */
    for(method, config, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ...args) {
        if (!config && typeof method === "object") {
            config = method;
            method = undefined;
        }
        else {
            method = method
                ? typeof method === "string"
                    ? method
                    : method.name
                : undefined;
        }
        return new Proxy(this, {
            get: (target, p, receiver) => {
                const result = Reflect.get(target, p, receiver);
                if (p === "config") {
                    return new Proxy(this.config, {
                        get: (target, p) => {
                            if (config && p in config)
                                return config[p];
                            return Reflect.get(target, p, receiver);
                        },
                    });
                }
                if (p === "context" && method) {
                    return [result, method].join(".");
                }
                return result;
            },
        });
    }
    /**
     * @description Creates a formatted log string
     * @summary Generates a log string with timestamp, colored log level, context, and message
     * @param {LogLevel} level - The log level for this message
     * @param {StringLike | Error} message - The message to log or an Error object
     * @param {string} [stack] - Optional stack trace to include in the log
     * @return {string} A formatted log string with all components
     */
    createLog(level, message, stack) {
        const log = [];
        const style = this.config("style");
        if (this.config("timestamp")) {
            const date = new Date().toISOString();
            const timestamp = style ? Logging.theme(date, "timestamp", level) : date;
            log.push(timestamp);
        }
        if (this.config("logLevel")) {
            const lvl = style
                ? Logging.theme(level, "logLevel", level)
                : level;
            log.push(lvl);
        }
        if (this.config("context")) {
            const context = style
                ? Logging.theme(this.context, "class", level)
                : this.context;
            log.push(context);
        }
        if (this.config("correlationId")) {
            {
                const id = style
                    ? Logging.theme(this.config("correlationId").toString(), "id", level)
                    : this.config("correlationId").toString();
                log.push(id);
            }
        }
        const msg = style
            ? Logging.theme(typeof message === "string" ? message : message.message, "message", level)
            : typeof message === "string"
                ? message
                : message.message;
        log.push(msg);
        if (stack || message instanceof Error) {
            stack = style
                ? Logging.theme((stack || message.stack), "stack", level)
                : stack;
            log.push(`\nStack trace:\n${stack}`);
        }
        return log.join(this.config("separator"));
    }
    /**
     * @description Logs a message with the specified log level
     * @summary Checks if the message should be logged based on the current log level,
     * then uses the appropriate console method to output the formatted log
     * @param {LogLevel} level - The log level of the message
     * @param {StringLike | Error} msg - The message to be logged or an Error object
     * @param {string} [stack] - Optional stack trace to include in the log
     * @return {void}
     */
    log(level, msg, stack) {
        if (NumericLogLevels[this.config("level")] <
            NumericLogLevels[level])
            return;
        let method;
        switch (level) {
            case LogLevel.info:
                method = console.log;
                break;
            case LogLevel.verbose:
            case LogLevel.debug:
                method = console.debug;
                break;
            case LogLevel.error:
                method = console.error;
                break;
            default:
                throw new Error("Invalid log level");
        }
        method(this.createLog(level, msg, stack));
    }
    /**
     * @description Logs a message at the silly level
     * @summary Logs a message at the silly level if the current verbosity setting allows it
     * @param {StringLike} msg - The message to be logged
     * @param {number} [verbosity=0] - The verbosity level of the message
     * @return {void}
     */
    silly(msg, verbosity = 0) {
        if (this.config("verbose") >= verbosity)
            this.log(LogLevel.verbose, msg);
    }
    /**
     * @description Logs a message at the verbose level
     * @summary Logs a message at the verbose level if the current verbosity setting allows it
     * @param {StringLike} msg - The message to be logged
     * @param {number} [verbosity=0] - The verbosity level of the message
     * @return {void}
     */
    verbose(msg, verbosity = 0) {
        if (this.config("verbose") >= verbosity)
            this.log(LogLevel.verbose, msg);
    }
    /**
     * @description Logs a message at the info level
     * @summary Logs a message at the info level for general application information
     * @param {StringLike} msg - The message to be logged
     * @return {void}
     */
    info(msg) {
        this.log(LogLevel.info, msg);
    }
    /**
     * @description Logs a message at the debug level
     * @summary Logs a message at the debug level for detailed troubleshooting information
     * @param {StringLike} msg - The message to be logged
     * @return {void}
     */
    debug(msg) {
        this.log(LogLevel.debug, msg);
    }
    /**
     * @description Logs a message at the error level
     * @summary Logs a message at the error level for errors and exceptions
     * @param {StringLike | Error} msg - The message to be logged or an Error object
     * @return {void}
     */
    error(msg) {
        this.log(LogLevel.error, msg);
    }
    /**
     * @description Updates the logger configuration
     * @summary Merges the provided configuration with the existing configuration
     * @param {Partial<LoggingConfig>} config - The configuration options to apply
     * @return {void}
     */
    setConfig(config) {
        this.conf = { ...(this.conf || {}), ...config };
    }
}
/**
 * @description A static class for managing logging operations
 * @summary The Logging class provides a centralized logging mechanism with support for
 * different log levels, verbosity, and styling. It uses a singleton pattern to maintain a global
 * logger instance and allows creating specific loggers for different classes and methods.
 * @class Logging
 * @example
 * // Set global configuration
 * Logging.setConfig({ level: LogLevel.debug, style: true });
 *
 * // Get a logger for a specific class
 * const logger = Logging.for('MyClass');
 *
 * // Log messages at different levels
 * logger.info('Application started');
 * logger.debug('Processing data...');
 *
 * // Log with context
 * const methodLogger = Logging.for('MyClass.myMethod');
 * methodLogger.verbose('Detailed operation information', 1);
 *
 * // Log errors
 * try {
 *   // some operation
 * } catch (error) {
 *   logger.error(error);
 * }
 * @mermaid
 * classDiagram
 *   class Logger {
 *     <<interface>>
 *     +for(method, config, ...args)
 *     +silly(msg, verbosity)
 *     +verbose(msg, verbosity)
 *     +info(msg)
 *     +debug(msg)
 *     +error(msg)
 *     +setConfig(config)
 *   }
 *
 *   class Logging {
 *     -global: Logger
 *     -_factory: LoggerFactory
 *     -_config: LoggingConfig
 *     +setFactory(factory)
 *     +setConfig(config)
 *     +getConfig()
 *     +get()
 *     +verbose(msg, verbosity)
 *     +info(msg)
 *     +debug(msg)
 *     +silly(msg)
 *     +error(msg)
 *     +for(object, config, ...args)
 *     +because(reason, id)
 *     +theme(text, type, loggerLevel, template)
 *   }
 *
 *   class MiniLogger {
 *     +constructor(context, conf?)
 *   }
 *
 *   Logging ..> Logger : creates
 *   Logging ..> MiniLogger : creates by default
 */
class Logging {
    /**
     * @description Factory function for creating logger instances
     * @summary A function that creates new Logger instances. By default, it creates a MiniLogger.
     */
    static { this._factory = (object, config) => {
        return new MiniLogger(object, config);
    }; }
    /**
     * @description Configuration for the logging system
     * @summary Stores the global logging configuration including verbosity, log level, styling, and formatting settings
     */
    static { this._config = DefaultLoggingConfig; }
    constructor() { }
    /**
     * @description Sets the factory function for creating logger instances
     * @summary Allows customizing how logger instances are created
     * @param {LoggerFactory} factory - The factory function to use for creating loggers
     * @return {void}
     */
    static setFactory(factory) {
        Logging._factory = factory;
    }
    /**
     * @description Updates the global logging configuration
     * @summary Allows updating the global logging configuration with new settings
     * @param {Partial<LoggingConfig>} config - The configuration options to apply
     * @return {void}
     */
    static setConfig(config) {
        Object.assign(this._config, config);
    }
    /**
     * @description Gets a copy of the current global logging configuration
     * @summary Returns a copy of the current global logging configuration
     * @return {LoggingConfig} A copy of the current configuration
     */
    static getConfig() {
        return Object.assign({}, this._config);
    }
    /**
     * @description Retrieves or creates the global logger instance.
     * @summary Returns the existing global logger or creates a new one if it doesn't exist.
     *
     * @return The global VerbosityLogger instance.
     */
    static get() {
        this.global = this.global ? this.global : this._factory("Logging");
        return this.global;
    }
    /**
     * @description Logs a verbose message.
     * @summary Delegates the verbose logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     * @param verbosity - The verbosity level of the message (default: 0).
     */
    static verbose(msg, verbosity = 0) {
        return this.get().verbose(msg, verbosity);
    }
    /**
     * @description Logs an info message.
     * @summary Delegates the info logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     */
    static info(msg) {
        return this.get().info(msg);
    }
    /**
     * @description Logs a debug message.
     * @summary Delegates the debug logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     */
    static debug(msg) {
        return this.get().debug(msg);
    }
    /**
     * @description Logs a silly message.
     * @summary Delegates the debug logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     */
    static silly(msg) {
        return this.get().silly(msg);
    }
    /**
     * @description Logs an error message.
     * @summary Delegates the error logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     */
    static error(msg) {
        return this.get().error(msg);
    }
    /**
     * @description Creates a logger for a specific object or context
     * @summary Creates a new logger instance for the given object or context using the factory function
     * @param {LoggingContext} object - The object, class, or context to create a logger for
     * @param {Partial<LoggingConfig>} [config] - Optional configuration to override global settings
     * @param {...any} args - Additional arguments to pass to the logger factory
     * @return {Logger} A new logger instance for the specified object or context
     */
    static for(object, config, ...args) {
        object =
            typeof object === "string"
                ? object
                : object.constructor
                    ? object.constructor.name
                    : object.name;
        return this._factory(object, config, ...args);
    }
    /**
     * @description Creates a logger for a specific reason or correlation context
     * @summary Utility to quickly create a logger labeled with a free-form reason and optional identifier
     * so that ad-hoc operations can be traced without tying the logger to a class or method name.
     * @param {string} reason - A textual reason or context label for this logger instance
     * @param {string} [id] - Optional identifier to help correlate related log entries
     * @return {Logger} A new logger instance labeled with the provided reason and id
     */
    static because(reason, id) {
        return this._factory(reason, this._config, id);
    }
    /**
     * @description Applies theme styling to text
     * @summary Applies styling (colors, formatting) to text based on the theme configuration
     * @param {string} text - The text to style
     * @param {string} type - The type of element to style (e.g., "class", "message", "logLevel")
     * @param {LogLevel} loggerLevel - The log level to use for styling
     * @param {Theme} [template=DefaultTheme] - The theme to use for styling
     * @return {string} The styled text
     * @mermaid
     * sequenceDiagram
     *   participant Caller
     *   participant Theme as Logging.theme
     *   participant Apply as apply function
     *   participant Style as styled-string-builder
     *
     *   Caller->>Theme: theme(text, type, loggerLevel)
     *   Theme->>Theme: Check if styling is enabled
     *   alt styling disabled
     *     Theme-->>Caller: return original text
     *   else styling enabled
     *     Theme->>Theme: Get theme for type
     *     alt theme not found
     *       Theme-->>Caller: return original text
     *     else theme found
     *       Theme->>Theme: Determine actual theme based on log level
     *       Theme->>Apply: Apply each style property
     *       Apply->>Style: Apply colors and formatting
     *       Style-->>Apply: Return styled text
     *       Apply-->>Theme: Return styled text
     *       Theme-->>Caller: Return final styled text
     *     end
     *   end
     */
    static theme(text, type, loggerLevel, template = DefaultTheme) {
        if (!this._config.style)
            return text;
        const logger = Logging.get().for(this.theme);
        function apply(txt, option, value) {
            try {
                const t = txt;
                let c = style$1(t);
                function applyColor(val, isBg = false) {
                    let f = isBg ? c.background : c.foreground;
                    if (!Array.isArray(val)) {
                        return f.call(c, value);
                    }
                    switch (val.length) {
                        case 1:
                            f = isBg ? c.bgColor256 : c.color256;
                            return f(val[0]);
                        case 3:
                            f = isBg ? c.bgRgb : c.rgb;
                            return c.rgb(val[0], val[1], val[2]);
                        default:
                            logger.error(`Not a valid color option: ${option}`);
                            return style$1(t);
                    }
                }
                function applyStyle(v) {
                    if (typeof v === "number") {
                        c = c.style(v);
                    }
                    else {
                        c = c[v];
                    }
                }
                switch (option) {
                    case "bg":
                    case "fg":
                        return applyColor(value).text;
                    case "style":
                        if (Array.isArray(value)) {
                            value.forEach(applyStyle);
                        }
                        else {
                            applyStyle(value);
                        }
                        return c.text;
                    default:
                        logger.error(`Not a valid theme option: ${option}`);
                        return t;
                }
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
            }
            catch (e) {
                logger.error(`Error applying style: ${option} with value ${value}`);
                return txt;
            }
        }
        const individualTheme = template[type];
        if (!individualTheme || !Object.keys(individualTheme).length) {
            return text;
        }
        let actualTheme = individualTheme;
        const logLevels = Object.assign({}, LogLevel);
        if (Object.keys(individualTheme)[0] in logLevels)
            actualTheme =
                individualTheme[loggerLevel] || {};
        return Object.keys(actualTheme).reduce((acc, key) => {
            const val = actualTheme[key];
            if (val)
                return apply(acc, key, val);
            return acc;
        }, text);
    }
}

/**
 * @description Represents a user input prompt with various configuration options.
 * @summary This class provides a flexible interface for creating and managing user input prompts.
 * It implements the PromptObject interface from the 'prompts' library and offers methods to set
 * various properties of the prompt. The class also includes static methods for common input scenarios
 * and argument parsing.
 *
 * @template R - The type of the prompt name, extending string.
 *
 * @param name - The name of the prompt, used as the key in the returned answers object.
 *
 * @class
 * @example
 * ```typescript
 * import { UserInput } from '@decaf-ts/utils';
 *
 * // Create a simple text input
 * const nameInput = new UserInput('name')
 *   .setMessage('What is your name?')
 *   .setInitial('User');
 *
 * // Create a number input with validation
 * const ageInput = new UserInput('age')
 *   .setType('number')
 *   .setMessage('How old are you?')
 *   .setMin(0)
 *   .setMax(120);
 *
 * // Ask for input and process the results
 * async function getUserInfo() {
 *   const answers = await UserInput.ask([nameInput, ageInput]);
 *   console.log(`Hello ${answers.name}, you are ${answers.age} years old.`);
 * }
 *
 * getUserInfo();
 * ```
 *
 * @mermaid
 * sequenceDiagram
 *   participant Client
 *   participant UserInput
 *   participant PromptLibrary
 *
 *   Client->>UserInput: new UserInput(name)
 *   Client->>UserInput: setMessage(message)
 *   Client->>UserInput: setType(type)
 *   Client->>UserInput: setInitial(initial)
 *   Client->>UserInput: Other configuration methods
 *
 *   Client->>UserInput: ask()
 *   UserInput->>PromptLibrary: prompts(question)
 *   PromptLibrary->>Client: Display prompt
 *   Client->>PromptLibrary: User provides input
 *   PromptLibrary->>UserInput: Return answers
 *   UserInput->>Client: Return processed answers
 */
class UserInput {
    static { this.logger = Logging.for(UserInput); }
    constructor(name) {
        /**
         * @description The type of the prompt.
         * @summary Determines the input method (e.g., text, number, confirm).
         */
        this.type = "text";
        this.name = name;
    }
    /**
     * @description Sets the type of the prompt.
     * @summary Configures the input method for the prompt.
     *
     * @param type - The type of the prompt.
     * @returns This UserInput instance for method chaining.
     */
    setType(type) {
        UserInput.logger.verbose(`Setting type to: ${type}`);
        this.type = type;
        return this;
    }
    /**
     * @description Sets the message of the prompt.
     * @summary Configures the question or instruction presented to the user.
     *
     * @param value - The message to be displayed.
     * @returns This UserInput instance for method chaining.
     */
    setMessage(value) {
        UserInput.logger.verbose(`Setting message to: ${value}`);
        this.message = value;
        return this;
    }
    /**
     * @description Sets the initial value of the prompt.
     * @summary Configures the default value presented to the user.
     *
     * @param value - The initial value.
     * @returns This UserInput instance for method chaining.
     */
    setInitial(value) {
        UserInput.logger.verbose(`Setting initial value to: ${value}`);
        this.initial = value;
        return this;
    }
    /**
     * @description Sets the style of the prompt.
     * @summary Configures the visual style of the prompt.
     *
     * @param value - The style to be applied.
     * @returns This UserInput instance for method chaining.
     */
    setStyle(value) {
        UserInput.logger.verbose(`Setting style to: ${value}`);
        this.style = value;
        return this;
    }
    /**
     * @description Sets the format function of the prompt.
     * @summary Configures a function to format the user's input before it's returned.
     *
     * @param value - The format function.
     * @returns This UserInput instance for method chaining.
     */
    setFormat(value) {
        UserInput.logger.verbose(`Setting format function`);
        this.format = value;
        return this;
    }
    /**
     * @description Sets the validation function of the prompt.
     * @summary Configures a function to validate the user's input.
     *
     * @param value - The validation function.
     * @returns This UserInput instance for method chaining.
     */
    setValidate(value) {
        UserInput.logger.verbose(`Setting validate function`);
        this.validate = value;
        return this;
    }
    /**
     * @description Sets the onState callback of the prompt.
     * @summary Configures a function to be called when the state of the prompt changes.
     *
     * @param value - The onState callback function.
     * @returns This UserInput instance for method chaining.
     */
    setOnState(value) {
        UserInput.logger.verbose(`Setting onState callback`);
        this.onState = value;
        return this;
    }
    /**
     * @description Sets the minimum value for number inputs.
     * @summary Configures the lowest number the user can input.
     *
     * @param value - The minimum value.
     * @returns This UserInput instance for method chaining.
     */
    setMin(value) {
        UserInput.logger.verbose(`Setting min value to: ${value}`);
        this.min = value;
        return this;
    }
    /**
     * @description Sets the maximum value for number inputs.
     * @summary Configures the highest number the user can input.
     *
     * @param value - The maximum value.
     * @returns This UserInput instance for method chaining.
     */
    setMax(value) {
        UserInput.logger.verbose(`Setting max value to: ${value}`);
        this.max = value;
        return this;
    }
    /**
     * @description Sets whether to allow float values for number inputs.
     * @summary Configures whether decimal numbers are allowed.
     *
     * @param value - Whether to allow float values.
     * @returns This UserInput instance for method chaining.
     */
    setFloat(value) {
        UserInput.logger.verbose(`Setting float to: ${value}`);
        this.float = value;
        return this;
    }
    /**
     * @description Sets the number of decimal places to round to for float inputs.
     * @summary Configures the precision of float inputs.
     *
     * @param value - The number of decimal places.
     * @returns This UserInput instance for method chaining.
     */
    setRound(value) {
        UserInput.logger.verbose(`Setting round to: ${value}`);
        this.round = value;
        return this;
    }
    /**
     * @description Sets the instructions for the user.
     * @summary Configures additional guidance provided to the user.
     *
     * @param value - The instructions.
     * @returns This UserInput instance for method chaining.
     */
    setInstructions(value) {
        UserInput.logger.verbose(`Setting instructions to: ${value}`);
        this.instructions = value;
        return this;
    }
    /**
     * @description Sets the increment value for number inputs.
     * @summary Configures the step size when increasing or decreasing the number.
     *
     * @param value - The increment value.
     * @returns This UserInput instance for method chaining.
     */
    setIncrement(value) {
        UserInput.logger.verbose(`Setting increment to: ${value}`);
        this.increment = value;
        return this;
    }
    /**
     * @description Sets the separator for list inputs.
     * @summary Configures the character used to separate list items.
     *
     * @param value - The separator character.
     * @returns This UserInput instance for method chaining.
     */
    setSeparator(value) {
        UserInput.logger.verbose(`Setting separator to: ${value}`);
        this.separator = value;
        return this;
    }
    /**
     * @description Sets the active option style for select inputs.
     * @summary Configures the style applied to the currently selected option.
     *
     * @param value - The active option style.
     * @returns This UserInput instance for method chaining.
     */
    setActive(value) {
        UserInput.logger.verbose(`Setting active style to: ${value}`);
        this.active = value;
        return this;
    }
    /**
     * @description Sets the inactive option style for select inputs.
     * @summary Configures the style applied to non-selected options.
     *
     * @param value - The inactive option style.
     * @returns This UserInput instance for method chaining.
     */
    setInactive(value) {
        UserInput.logger.verbose(`Setting inactive style to: ${value}`);
        this.inactive = value;
        return this;
    }
    /**
     * @description Sets the choices for select, multiselect, or autocomplete inputs.
     * @summary Configures the available options that the user can select from in choice-based prompts.
     *
     * @param value - The array of choices or a function to determine the choices.
     * @returns This UserInput instance for method chaining.
     */
    setChoices(value) {
        UserInput.logger.verbose(`Setting choices: ${JSON.stringify(value)}`);
        this.choices = value;
        return this;
    }
    /**
     * @description Sets the hint text for the prompt.
     * @summary Configures additional information displayed to the user.
     *
     * @param value - The hint text.
     * @returns This UserInput instance for method chaining.
     */
    setHint(value) {
        UserInput.logger.verbose(`Setting hint to: ${value}`);
        this.hint = value;
        return this;
    }
    /**
     * @description Sets the warning text for the prompt.
     * @summary Configures a warning message displayed to the user.
     *
     * @param value - The warning text.
     * @returns This UserInput instance for method chaining.
     */
    setWarn(value) {
        UserInput.logger.verbose(`Setting warn to: ${value}`);
        this.warn = value;
        return this;
    }
    /**
     * @description Sets the suggestion function for autocomplete inputs.
     * @summary Configures a function that provides suggestions based on the user's input and available choices.
     *
     * @param value - A function that takes the current input and available choices and returns a Promise resolving to suggestions.
     * @returns This UserInput instance for method chaining.
     */
    setSuggest(value) {
        UserInput.logger.verbose(`Setting suggest function`);
        this.suggest = value;
        return this;
    }
    /**
     * @description Sets the limit for list inputs.
     * @summary Configures the maximum number of items that can be selected in list-type prompts.
     * @template R - The type of the prompt name, extending string.
     * @param value - The maximum number of items that can be selected, or a function to determine this value.
     * @return This UserInput instance for method chaining.
     */
    setLimit(value) {
        UserInput.logger.verbose(`Setting limit to: ${value}`);
        this.limit = value;
        return this;
    }
    /**
     * @description Sets the mask for password inputs.
     * @summary Configures the character used to hide the user's input in password-type prompts.
     * @template R - The type of the prompt name, extending string.
     * @param value - The character used to mask the input, or a function to determine this value.
     * @return This UserInput instance for method chaining.
     */
    setMask(value) {
        UserInput.logger.verbose(`Setting mask to: ${value}`);
        this.mask = value;
        return this;
    }
    /**
     * @description Sets the stdout stream for the prompt.
     * @summary Configures the output stream used by the prompt for displaying messages and results.
     * @param value - The Writable stream to be used as stdout.
     * @return This UserInput instance for method chaining.
     */
    setStdout(value) {
        UserInput.logger.verbose(`Setting stdout stream`);
        this.stdout = value;
        return this;
    }
    /**
     * @description Sets the stdin stream for the prompt.
     * @summary Configures the input stream used by the prompt for receiving user input.
     * @param value - The Readable stream to be used as stdin.
     * @return This UserInput instance for method chaining.
     */
    setStdin(value) {
        this.stdin = value;
        return this;
    }
    /**
     * @description Asks the user for input based on the current UserInput configuration.
     * @summary Prompts the user and returns their response as a single value.
     * @template R - The type of the prompt name, extending string.
     * @return A Promise that resolves to the user's answer.
     */
    async ask() {
        return (await UserInput.ask(this))[this.name];
    }
    /**
     * @description Asks the user one or more questions based on the provided UserInput configurations.
     * @summary Prompts the user with one or more questions and returns their answers as an object.
     * @template R - The type of the prompt name, extending string.
     * @param question - A single UserInput instance or an array of UserInput instances.
     * @return A Promise that resolves to an object containing the user's answers.
     * @mermaid
     * sequenceDiagram
     *   participant U as User
     *   participant A as ask method
     *   participant P as prompts library
     *   A->>P: Call prompts with question(s)
     *   P->>U: Display prompt(s)
     *   U->>P: Provide input
     *   P->>A: Return answers
     *   A->>A: Process answers
     *   A-->>Caller: Return processed answers
     */
    static async ask(question) {
        const log = UserInput.logger.for(this.ask);
        if (!Array.isArray(question)) {
            question = [question];
        }
        let answers;
        try {
            log.verbose(`Asking questions: ${question.map((q) => q.name).join(", ")}`);
            answers = await prompts(question);
            log.verbose(`Received answers: ${JSON.stringify(answers, null, 2)}`);
        }
        catch (error) {
            throw new Error(`Error while getting input: ${error}`);
        }
        return answers;
    }
    /**
     * @description Asks the user for a number input.
     * @summary Prompts the user to enter a number, with optional minimum, maximum, and initial values.
     * @param name - The name of the prompt, used as the key in the returned answers object.
     * @param question - The message displayed to the user.
     * @param min - The minimum allowed value (optional).
     * @param max - The maximum allowed value (optional).
     * @param initial - The initial value presented to the user (optional).
     * @return A Promise that resolves to the number entered by the user.
     */
    static async askNumber(name, question, min, max, initial) {
        const log = UserInput.logger.for(this.askNumber);
        log.verbose(`Asking number input: undefined, question: ${question}, min: ${min}, max: ${max}, initial: ${initial}`);
        const userInput = new UserInput(name)
            .setMessage(question)
            .setType("number");
        if (typeof min === "number")
            userInput.setMin(min);
        if (typeof max === "number")
            userInput.setMax(max);
        if (typeof initial === "number")
            userInput.setInitial(initial);
        return (await this.ask(userInput))[name];
    }
    /**
     * @description Asks the user for a text input.
     * @summary Prompts the user to enter text, with optional masking and initial value.
     * @param name - The name of the prompt, used as the key in the returned answers object.
     * @param question - The message displayed to the user.
     * @param mask - The character used to mask the input (optional, for password-like inputs).
     * @param initial - The initial value presented to the user (optional).
     * @return A Promise that resolves to the text entered by the user.
     */
    static async askText(name, question, mask = undefined, initial) {
        const log = UserInput.logger.for(this.askText);
        log.verbose(`Asking text input: undefined, question: ${question}, mask: ${mask}, initial: ${initial}`);
        const userInput = new UserInput(name).setMessage(question);
        if (mask)
            userInput.setMask(mask);
        if (typeof initial === "string")
            userInput.setInitial(initial);
        return (await this.ask(userInput))[name];
    }
    /**
     * @description Asks the user for a confirmation (yes/no).
     * @summary Prompts the user with a yes/no question and returns a boolean result.
     * @param name - The name of the prompt, used as the key in the returned answers object.
     * @param question - The message displayed to the user.
     * @param initial - The initial value presented to the user (optional).
     * @return A Promise that resolves to a boolean representing the user's answer.
     */
    static async askConfirmation(name, question, initial) {
        const log = UserInput.logger.for(this.askConfirmation);
        log.verbose(`Asking confirmation input: undefined, question: ${question}, initial: ${initial}`);
        const userInput = new UserInput(name)
            .setMessage(question)
            .setType("confirm");
        if (typeof initial !== "undefined")
            userInput.setInitial(initial);
        return (await this.ask(userInput))[name];
    }
    /**
     * @description Repeatedly asks for input until a valid response is given or the limit is reached.
     * @summary This method insists on getting a valid input from the user, allowing for a specified number of attempts.
     *
     * @template R - The type of the expected result.
     * @param input - The UserInput instance to use for prompting.
     * @param test - A function to validate the user's input.
     * @param defaultConfirmation - The default value for the confirmation prompt (true for yes, false for no).
     * @param limit - The maximum number of attempts allowed (default is 1).
     * @return A Promise that resolves to the valid input or undefined if the limit is reached.
     *
     * @mermaid
     * sequenceDiagram
     *   participant U as User
     *   participant I as insist method
     *   participant A as ask method
     *   participant T as test function
     *   participant C as askConfirmation method
     *   loop Until valid input or limit reached
     *     I->>A: Call ask with input
     *     A->>U: Prompt user
     *     U->>A: Provide input
     *     A->>I: Return result
     *     I->>T: Test result
     *     alt Test passes
     *       I->>C: Ask for confirmation
     *       C->>U: Confirm input
     *       U->>C: Provide confirmation
     *       C->>I: Return confirmation
     *       alt Confirmed
     *         I-->>Caller: Return valid result
     *       else Not confirmed
     *         I->>I: Continue loop
     *       end
     *     else Test fails
     *       I->>I: Continue loop
     *     end
     *   end
     *   I-->>Caller: Return undefined if limit reached
     */
    static async insist(input, test, defaultConfirmation, limit = 1) {
        const log = UserInput.logger.for(this.insist);
        log.verbose(`Insisting on input: ${input.name}, test: ${test.toString()}, defaultConfirmation: ${defaultConfirmation}, limit: ${limit}`);
        let result = undefined;
        let count = 0;
        let confirmation;
        try {
            do {
                result = (await UserInput.ask(input))[input.name];
                if (!test(result)) {
                    result = undefined;
                    continue;
                }
                confirmation = await UserInput.askConfirmation(`${input.name}-confirm`, `Is the ${input.type} correct?`, defaultConfirmation);
                if (!confirmation)
                    result = undefined;
            } while (typeof result === "undefined" && limit > 1 && count++ < limit);
        }
        catch (e) {
            log.error(`Error while insisting: ${e}`);
            throw e;
        }
        if (typeof result === "undefined")
            log.info("no selection...");
        return result;
    }
    /**
     * @description Repeatedly asks for text input until a valid response is given or the limit is reached.
     * @summary This method insists on getting a valid text input from the user, allowing for a specified number of attempts.
     *
     * @param name - The name of the prompt, used as the key in the returned answers object.
     * @param question - The message displayed to the user.
     * @param test - A function to validate the user's input.
     * @param mask - The character used to mask the input (optional, for password-like inputs).
     * @param initial - The initial value presented to the user (optional).
     * @param defaultConfirmation - The default value for the confirmation prompt (true for yes, false for no).
     * @param limit - The maximum number of attempts allowed (default is -1, meaning unlimited).
     * @return A Promise that resolves to the valid input or undefined if the limit is reached.
     */
    static async insistForText(name, question, test, mask = undefined, initial, defaultConfirmation = false, limit = -1) {
        const log = UserInput.logger.for(this.insistForText);
        log.verbose(`Insisting for text input: undefined, question: ${question}, test: ${test.toString()}, mask: ${mask}, initial: ${initial}, defaultConfirmation: ${defaultConfirmation}, limit: ${limit}`);
        const userInput = new UserInput(name).setMessage(question);
        if (mask)
            userInput.setMask(mask);
        if (typeof initial === "string")
            userInput.setInitial(initial);
        return (await this.insist(userInput, test, defaultConfirmation, limit));
    }
    /**
     * @description Repeatedly asks for number input until a valid response is given or the limit is reached.
     * @summary This method insists on getting a valid number input from the user, allowing for a specified number of attempts.
     *
     * @param name - The name of the prompt, used as the key in the returned answers object.
     * @param question - The message displayed to the user.
     * @param test - A function to validate the user's input.
     * @param min - The minimum allowed value (optional).
     * @param max - The maximum allowed value (optional).
     * @param initial - The initial value presented to the user (optional).
     * @param defaultConfirmation - The default value for the confirmation prompt (true for yes, false for no).
     * @param limit - The maximum number of attempts allowed (default is -1, meaning unlimited).
     * @return A Promise that resolves to the valid input or undefined if the limit is reached.
     */
    static async insistForNumber(name, question, test, min, max, initial, defaultConfirmation = false, limit = -1) {
        const log = UserInput.logger.for(this.insistForNumber);
        log.verbose(`Insisting for number input: undefined, question: ${question}, test: ${test.toString()}, min: ${min}, max: ${max}, initial: ${initial}, defaultConfirmation: ${defaultConfirmation}, limit: ${limit}`);
        const userInput = new UserInput(name)
            .setMessage(question)
            .setType("number");
        if (typeof min === "number")
            userInput.setMin(min);
        if (typeof max === "number")
            userInput.setMax(max);
        if (typeof initial === "number")
            userInput.setInitial(initial);
        return (await this.insist(userInput, test, defaultConfirmation, limit));
    }
    /**
     * @description Parses command-line arguments based on the provided options.
     * @summary Uses Node.js's util.parseArgs to parse command-line arguments and return the result.
     * @param options - Configuration options for parsing arguments.
     * @return An object containing the parsed arguments.
     * @mermaid
     * sequenceDiagram
     *   participant C as Caller
     *   participant P as parseArgs method
     *   participant U as util.parseArgs
     *   C->>P: Call with options
     *   P->>P: Prepare args object
     *   P->>U: Call parseArgs with prepared args
     *   U->>P: Return parsed result
     *   P-->>C: Return ParseArgsResult
     */
    static parseArgs(options) {
        const log = UserInput.logger.for(this.parseArgs);
        const args = {
            args: process.argv.slice(2),
            options: options,
        };
        log.debug(`Parsing arguments: ${JSON.stringify(args, null, 2)}`);
        try {
            return util$2.parseArgs(args);
        }
        catch (error) {
            log.debug(`Error while parsing arguments:\n${JSON.stringify(args, null, 2)}\n | options\n${JSON.stringify(options, null, 2)}\n | ${error}`);
            throw new Error(`Error while parsing arguments: ${error}`);
        }
    }
}

/**
 * @description Default command options for CLI commands.
 * @summary Defines the structure and default values for common command-line options used across various CLI commands.
 * @const DefaultCommandOptions
 * @typedef {Object} DefaultCommandOptions
 * @property {Object} verbose - Verbosity level option.
 * @property {string} verbose.type - The type of the verbose option (number).
 * @property {string} verbose.short - The short flag for the verbose option (V).
 * @property {number} verbose.default - The default value for verbosity (0).
 * @property {Object} version - Version display option.
 * @property {string} version.type - The type of the version option (boolean).
 * @property {string} version.short - The short flag for the version option (v).
 * @property {undefined} version.default - The default value for version display (undefined).
 * @property {Object} help - Help display option.
 * @property {string} help.type - The type of the help option (boolean).
 * @property {string} help.short - The short flag for the help option (h).
 * @property {boolean} help.default - The default value for help display (false).
 * @property {Object} logLevel - Log level option.
 * @property {string} logLevel.type - The type of the logLevel option (string).
 * @property {string} logLevel.default - The default value for log level ("info").
 * @property {Object} logStyle - Log styling option.
 * @property {string} logStyle.type - The type of the logStyle option (boolean).
 * @property {boolean} logStyle.default - The default value for log styling (true).
 * @property {Object} timestamp - Timestamp display option.
 * @property {string} timestamp.type - The type of the timestamp option (boolean).
 * @property {boolean} timestamp.default - The default value for timestamp display (true).
 * @property {Object} banner - Banner display option.
 * @property {string} banner.type - The type of the banner option (boolean).
 * @property {boolean} banner.default - The default value for banner display (false).
 * @memberOf module:utils
 */
const DefaultCommandOptions = {
    verbose: {
        type: "boolean",
        short: "V",
        default: undefined,
    },
    version: {
        type: "boolean",
        short: "v",
        default: undefined,
    },
    help: {
        type: "boolean",
        short: "h",
        default: false,
    },
    logLevel: {
        type: "string",
        default: "info",
    },
    logStyle: {
        type: "boolean",
        default: true,
    },
    timestamp: {
        type: "boolean",
        default: true,
    },
    banner: {
        type: "boolean",
        default: true,
    },
};
/**
 * @description Default command values derived from DefaultCommandOptions.
 * @summary Creates an object with the default values of all options defined in DefaultCommandOptions.
 * @const DefaultCommandValues
 * @typedef {Object} DefaultCommandValues
 * @property {unknown} [key: string] - The default value for each option in DefaultCommandOptions.
 * @memberOf module:utils
 */
const DefaultCommandValues = Object.keys(DefaultCommandOptions).reduce((acc, key) => {
    acc[key] =
        DefaultCommandOptions[key].default;
    return acc;
}, {});

/**
 * @description Pads the end of a string with a specified character.
 * @summary Extends the input string to a specified length by adding a padding character to the end.
 * If the input string is already longer than the specified length, it is returned unchanged.
 *
 * @param {string} str - The input string to be padded.
 * @param {number} length - The desired total length of the resulting string.
 * @param {string} [char=" "] - The character to use for padding. Defaults to a space.
 * @return {string} The padded string.
 * @throws {Error} If the padding character is not exactly one character long.
 *
 * @function padEnd
 *
 * @memberOf module:utils
 */
/**
 * @description Replaces occurrences of keys with their corresponding values in a string.
 * @summary Iterates through a set of key-value pairs and replaces all occurrences of each key
 * in the input string with its corresponding value. Supports regular expression flags for customized replacement.
 *
 * @param {string} input - The input string in which replacements will be made.
 * @param {Record<string, number | string>} values - An object containing key-value pairs for replacement.
 * @param {string} [flags="g"] - Regular expression flags to control the replacement behavior.
 * @return {string} The string with all specified replacements applied.
 *
 * @function patchString
 *
 * @memberOf module:utils
 */
function patchString(input, values, flags = "g") {
    Object.entries(values).forEach(([key, val]) => {
        const regexp = new RegExp(escapeRegExp(key), flags);
        input = input.replace(regexp, val);
    });
    return input;
}
/**
 * @description Converts a string to ENVIRONMENT_VARIABLE format.
 * @summary Transforms the input string into uppercase with words separated by underscores,
 * typically used for environment variable names.
 *
 * @param {string} text - The input string to be converted.
 * @return {string} The input string converted to ENVIRONMENT_VARIABLE format.
 *
 * @function toENVFormat
 *
 * @memberOf module:utils
 */
function toENVFormat(text) {
    return toSnakeCase(text).toUpperCase();
}
/**
 * @description Converts a string to snake_case.
 * @summary Transforms the input string into lowercase with words separated by underscores.
 *
 * @param {string} text - The input string to be converted.
 * @return {string} The input string converted to snake_case.
 *
 * @function toSnakeCase
 *
 * @memberOf module:utils
 */
function toSnakeCase(text) {
    return text
        .replace(/([a-z])([A-Z])/g, "$1_$2")
        .replace(/[\s-]+/g, "_")
        .toLowerCase();
}
/**
 * @description Escapes special characters in a string for use in a regular expression.
 * @summary Adds backslashes before characters that have special meaning in regular expressions,
 * allowing the string to be used as a literal match in a RegExp.
 *
 * @param {string} string - The string to escape for regular expression use.
 * @return {string} The escaped string safe for use in regular expressions.
 *
 * @function escapeRegExp
 *
 * @memberOf module:utils
 */
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}

/**
 * @description Default encoding for text operations.
 * @summary The standard UTF-8 encoding used for text processing.
 * @const {string} Encoding
 * @memberOf module:utils
 */
const Encoding = "utf-8";
/**
 * @description Enum for semantic version components.
 * @summary Defines the three levels of semantic versioning: PATCH, MINOR, and MAJOR.
 * @enum {string}
 * @memberOf module:utils
 */
var SemVersion;
(function (SemVersion) {
    /** Patch version for backwards-compatible bug fixes. */
    SemVersion["PATCH"] = "patch";
    /** Minor version for backwards-compatible new features. */
    SemVersion["MINOR"] = "minor";
    /** Major version for changes that break backwards compatibility. */
    SemVersion["MAJOR"] = "major";
})(SemVersion || (SemVersion = {}));
/**
 * @description Key for the setup script in package.json.
 * @summary Identifies the script that runs after package installation.
 * @const {string} SetupScriptKey
 * @memberOf module:utils
 */
const SetupScriptKey = "postinstall";
/**
 * @description Enum for various authentication tokens.
 * @summary Defines the file names for storing different types of authentication tokens.
 * @enum {string}
 * @memberOf module:utils
 */
var Tokens;
(function (Tokens) {
    /** Git authentication token file name. */
    Tokens["GIT"] = ".token";
    /** NPM authentication token file name. */
    Tokens["NPM"] = ".npmtoken";
    /** Docker authentication token file name. */
    Tokens["DOCKER"] = ".dockertoken";
    /** Confluence authentication token file name. */
    Tokens["CONFLUENCE"] = ".confluence-token";
})(Tokens || (Tokens = {}));
/**
 * @description Code used to indicate an operation was aborted.
 * @summary Standard message used when a process is manually terminated.
 * @const {string} AbortCode
 * @memberOf module:utils
 */
const AbortCode = "Aborted";

/**
 * @description ANSI escape code for resetting text formatting.
 * @summary This constant holds the ANSI escape sequence used to reset all text formatting to default.
 * @const AnsiReset
 * @memberOf module:StyledString
 */
const AnsiReset = "\x1b[0m";
/**
 * @description Standard foreground color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for standard foreground colors.
 * @const StandardForegroundColors
 * @property {number} black - ANSI code for black text (30).
 * @property {number} red - ANSI code for red text (31).
 * @property {number} green - ANSI code for green text (32).
 * @property {number} yellow - ANSI code for yellow text (33).
 * @property {number} blue - ANSI code for blue text (34).
 * @property {number} magenta - ANSI code for magenta text (35).
 * @property {number} cyan - ANSI code for cyan text (36).
 * @property {number} white - ANSI code for white text (37).
 * @memberOf module:StyledString
 */
const StandardForegroundColors = {
    black: 30,
    red: 31,
    green: 32,
    yellow: 33,
    blue: 34,
    magenta: 35,
    cyan: 36,
    white: 37,
};
/**
 * @description Bright foreground color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for bright foreground colors.
 * @const BrightForegroundColors
 * @property {number} black - ANSI code for bright black text (90).
 * @property {number} red - ANSI code for bright red text (91).
 * @property {number} green - ANSI code for bright green text (92).
 * @property {number} yellow - ANSI code for bright yellow text (93).
 * @property {number} blue - ANSI code for bright blue text (94).
 * @property {number} magenta - ANSI code for bright magenta text (95).
 * @property {number} cyan - ANSI code for bright cyan text (96).
 * @property {number} white - ANSI code for bright white text (97).
 * @memberOf module:@StyledString
 */
const BrightForegroundColors = {
    brightBlack: 90,
    brightRed: 91,
    brightGreen: 92,
    brightYellow: 93,
    brightBlue: 94,
    brightMagenta: 95,
    brightCyan: 96,
    brightWhite: 97,
};
/**
 * @description Standard background color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for standard background colors.
 * @const StandardBackgroundColors
 * @property {number} bgBlack - ANSI code for black background (40).
 * @property {number} bgRed - ANSI code for red background (41).
 * @property {number} bgGreen - ANSI code for green background (42).
 * @property {number} bgYellow - ANSI code for yellow background (43).
 * @property {number} bgBlue - ANSI code for blue background (44).
 * @property {number} bgMagenta - ANSI code for magenta background (45).
 * @property {number} bgCyan - ANSI code for cyan background (46).
 * @property {number} bgWhite - ANSI code for white background (47).
 * @memberOf module:@StyledString
 */
const StandardBackgroundColors = {
    bgBlack: 40,
    bgRed: 41,
    bgGreen: 42,
    bgYellow: 43,
    bgBlue: 44,
    bgMagenta: 45,
    bgCyan: 46,
    bgWhite: 47,
};
/**
 * @description Bright background color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for bright background colors.
 * @const BrightBackgroundColors
 * @property {number} bgBrightBlack - ANSI code for bright black background (100).
 * @property {number} bgBrightRed - ANSI code for bright red background (101).
 * @property {number} bgBrightGreen - ANSI code for bright green background (102).
 * @property {number} bgBrightYellow - ANSI code for bright yellow background (103).
 * @property {number} bgBrightBlue - ANSI code for bright blue background (104).
 * @property {number} bgBrightMagenta - ANSI code for bright magenta background (105).
 * @property {number} bgBrightCyan - ANSI code for bright cyan background (106).
 * @property {number} bgBrightWhite - ANSI code for bright white background (107).
 * @memberOf module:@StyledString
 */
const BrightBackgroundColors = {
    bgBrightBlack: 100,
    bgBrightRed: 101,
    bgBrightGreen: 102,
    bgBrightYellow: 103,
    bgBrightBlue: 104,
    bgBrightMagenta: 105,
    bgBrightCyan: 106,
    bgBrightWhite: 107,
};
/**
 * @description Text style codes for ANSI text formatting.
 * @summary This object maps style names to their corresponding ANSI codes for various text styles.
 * @const styles
 * @property {number} reset - ANSI code to reset all styles (0).
 * @property {number} bold - ANSI code for bold text (1).
 * @property {number} dim - ANSI code for dim text (2).
 * @property {number} italic - ANSI code for italic text (3).
 * @property {number} underline - ANSI code for underlined text (4).
 * @property {number} blink - ANSI code for blinking text (5).
 * @property {number} inverse - ANSI code for inverse colors (7).
 * @property {number} hidden - ANSI code for hidden text (8).
 * @property {number} strikethrough - ANSI code for strikethrough text (9).
 * @property {number} doubleUnderline - ANSI code for double underlined text (21).
 * @property {number} normalColor - ANSI code to reset color to normal (22).
 * @property {number} noItalicOrFraktur - ANSI code to turn off italic (23).
 * @property {number} noUnderline - ANSI code to turn off underline (24).
 * @property {number} noBlink - ANSI code to turn off blink (25).
 * @property {number} noInverse - ANSI code to turn off inverse (27).
 * @property {number} noHidden - ANSI code to turn off hidden (28).
 * @property {number} noStrikethrough - ANSI code to turn off strikethrough (29).
 * @memberOf module:@StyledString
 */
const styles = {
    reset: 0,
    bold: 1,
    dim: 2,
    italic: 3,
    underline: 4,
    blink: 5,
    inverse: 7,
    hidden: 8,
    strikethrough: 9,
    doubleUnderline: 21,
    normalColor: 22,
    noItalicOrFraktur: 23,
    noUnderline: 24,
    noBlink: 25,
    noInverse: 27,
    noHidden: 28,
    noStrikethrough: 29,
};

/**
 * @description Applies a basic ANSI color code to text.
 * @summary This function takes a string, an ANSI color code number, and an optional background flag.
 * It returns the text wrapped in the appropriate ANSI escape codes for either foreground or background coloring.
 * This function is used for basic 16-color ANSI formatting.
 *
 * @param {string} text - The text to be colored.
 * @param {number} n - The ANSI color code number.
 * @param {boolean} [bg=false] - If true, applies the color to the background instead of the foreground.
 * @return {string} The text wrapped in ANSI color codes.
 *
 * @function colorizeANSI
 * @memberOf module:@StyledString
 */
function colorizeANSI(text, n, bg = false) {
    if (isNaN(n)) {
        console.warn(`Invalid color number on the ANSI scale: ${n}. ignoring...`);
        return text;
    }
    if (bg && ((n > 30 && n <= 40)
        || (n > 90 && n <= 100))) {
        n = n + 10;
    }
    return `\x1b[${n}m${text}${AnsiReset}`;
}
/**
 * @description Applies a 256-color ANSI code to text.
 * @summary This function takes a string and a color number (0-255) and returns the text
 * wrapped in ANSI escape codes for either foreground or background coloring.
 *
 * @param {string} text - The text to be colored.
 * @param {number} n - The color number (0-255).
 * @param {boolean} [bg=false] - If true, applies the color to the background instead of the foreground.
 * @return {string} The text wrapped in ANSI color codes.
 *
 * @function colorize256
 * @memberOf module:@StyledString
 */
function colorize256(text, n, bg = false) {
    if (isNaN(n)) {
        console.warn(`Invalid color number on the 256 scale: ${n}. ignoring...`);
        return text;
    }
    if (n < 0 || n > 255) {
        console.warn(`Invalid color number on the 256 scale: ${n}. ignoring...`);
        return text;
    }
    return `\x1b[${bg ? 48 : 38};5;${n}m${text}${AnsiReset}`;
}
/**
 * @description Applies an RGB color ANSI code to text.
 * @summary This function takes a string and RGB color values (0-255 for each component)
 * and returns the text wrapped in ANSI escape codes for either foreground or background coloring.
 *
 * @param {string} text - The text to be colored.
 * @param {number} r - The red component of the color (0-255).
 * @param {number} g - The green component of the color (0-255).
 * @param {number} b - The blue component of the color (0-255).
 * @param {boolean} [bg=false] - If true, applies the color to the background instead of the foreground.
 * @return {string} The text wrapped in ANSI color codes.
 *
 * @function colorizeRGB
 * @memberOf module:StyledString
 */
function colorizeRGB(text, r, g, b, bg = false) {
    if (isNaN(r) || isNaN(g) || isNaN(b)) {
        console.warn(`Invalid RGB color values: r=${r}, g=${g}, b=${b}. Ignoring...`);
        return text;
    }
    if ([r, g, b].some(v => v < 0 || v > 255)) {
        console.warn(`Invalid RGB color values: r=${r}, g=${g}, b=${b}. Ignoring...`);
        return text;
    }
    return `\x1b[${bg ? 48 : 38};2;${r};${g};${b}m${text}${AnsiReset}`;
}
/**
 * @description Applies an ANSI style code to text.
 * @summary This function takes a string and a style code (either a number or a key from the styles object)
 * and returns the text wrapped in the appropriate ANSI escape codes for that style.
 *
 * @param {string} text - The text to be styled.
 * @param {number | string} n - The style code or style name.
 * @return {string} The text wrapped in ANSI style codes.
 *
 * @function applyStyle
 * @memberOf module:StyledString
 */
function applyStyle(text, n) {
    const styleCode = typeof n === "number" ? n : styles[n];
    return `\x1b[${styleCode}m${text}${AnsiReset}`;
}
/**
 * @description Removes all ANSI formatting codes from text.
 * @summary This function takes a string that may contain ANSI escape codes for formatting
 * and returns a new string with all such codes removed, leaving only the plain text content.
 * It uses a regular expression to match and remove ANSI escape sequences.
 *
 * @param {string} text - The text potentially containing ANSI formatting codes.
 * @return {string} The input text with all ANSI formatting codes removed.
 *
 * @function clear
 * @memberOf module:StyledString
 */
function clear(text) {
    // Regular expression to match ANSI escape codes
    // eslint-disable-next-line no-control-regex
    const ansiRegex = /\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])/g;
    return text.replace(ansiRegex, '');
}
/**
 * @description Applies raw ANSI escape codes to text.
 * @summary This function takes a string and a raw ANSI escape code, and returns the text
 * wrapped in the provided raw ANSI code and the reset code. This allows for applying custom
 * or complex ANSI formatting that may not be covered by other utility functions.
 *
 * @param {string} text - The text to be formatted.
 * @param {string} raw - The raw ANSI escape code to be applied.
 * @return {string} The text wrapped in the raw ANSI code and the reset code.
 *
 * @function raw
 * @memberOf module:StyledString
 */
function raw(text, raw) {
    return `${raw}${text}${AnsiReset}`;
}

/**
 * @class StyledString
 * @description A class that extends string functionality with ANSI color and style options.
 * @summary StyledString provides methods to apply various ANSI color and style options to text strings.
 * It implements the ColorizeOptions interface and proxies native string methods to the underlying text.
 * This class allows for chaining of styling methods and easy application of colors and styles to text.
 *
 * @implements {ColorizeOptions}
 * @param {string} text - The initial text string to be styled.
 */
class StyledString {
    constructor(text) {
        this.text = text;
        // Basic colors
        Object.entries(StandardForegroundColors).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.foreground(code),
            });
        });
        Object.entries(BrightForegroundColors).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.foreground(code),
            });
        });
        // Background colors
        Object.entries(StandardBackgroundColors).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.background(code),
            });
        });
        Object.entries(BrightBackgroundColors).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.background(code),
            });
        });
        // Styles
        Object.entries(styles).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.style(code),
            });
        });
    }
    /**
     * @description Clears all styling from the text.
     * @summary Removes all ANSI color and style codes from the text.
     * @return {StyledString} The StyledString instance with cleared styling.
     */
    clear() {
        this.text = clear(this.text);
        return this;
    }
    /**
     * @description Applies raw ANSI codes to the text.
     * @summary Allows direct application of ANSI escape sequences to the text.
     * @param {string} rawAnsi - The raw ANSI escape sequence to apply.
     * @return {StyledString} The StyledString instance with the raw ANSI code applied.
     */
    raw(rawAnsi) {
        this.text = raw(this.text, rawAnsi);
        return this;
    }
    /**
     * @description Applies a foreground color to the text.
     * @summary Sets the text color using ANSI color codes.
     * @param {number} n - The ANSI color code for the foreground color.
     * @return {StyledString} The StyledString instance with the foreground color applied.
     */
    foreground(n) {
        this.text = colorizeANSI(this.text, n);
        return this;
    }
    /**
     * @description Applies a background color to the text.
     * @summary Sets the background color of the text using ANSI color codes.
     * @param {number} n - The ANSI color code for the background color.
     * @return {StyledString} The StyledString instance with the background color applied.
     */
    background(n) {
        this.text = colorizeANSI(this.text, n, true);
        return this;
    }
    /**
     * @description Applies a text style to the string.
     * @summary Sets text styles such as bold, italic, or underline using ANSI style codes.
     * @param {number | string} n - The style code or key from the styles object.
     * @return {StyledString} The StyledString instance with the style applied.
     */
    style(n) {
        if (typeof n === "string" && !(n in styles)) {
            console.warn(`Invalid style: ${n}`);
            return this;
        }
        this.text = applyStyle(this.text, n);
        return this;
    }
    /**
     * @description Applies a 256-color foreground color to the text.
     * @summary Sets the text color using the extended 256-color palette.
     * @param {number} n - The color number from the 256-color palette.
     * @return {StyledString} The StyledString instance with the 256-color foreground applied.
     */
    color256(n) {
        this.text = colorize256(this.text, n);
        return this;
    }
    /**
     * @description Applies a 256-color background color to the text.
     * @summary Sets the background color using the extended 256-color palette.
     * @param {number} n - The color number from the 256-color palette.
     * @return {StyledString} The StyledString instance with the 256-color background applied.
     */
    bgColor256(n) {
        this.text = colorize256(this.text, n, true);
        return this;
    }
    /**
     * @description Applies an RGB foreground color to the text.
     * @summary Sets the text color using RGB values.
     * @param {number} r - The red component (0-255).
     * @param {number} g - The green component (0-255).
     * @param {number} b - The blue component (0-255).
     * @return {StyledString} The StyledString instance with the RGB foreground color applied.
     */
    rgb(r, g, b) {
        this.text = colorizeRGB(this.text, r, g, b);
        return this;
    }
    /**
     * @description Applies an RGB background color to the text.
     * @summary Sets the background color using RGB values.
     * @param {number} r - The red component (0-255).
     * @param {number} g - The green component (0-255).
     * @param {number} b - The blue component (0-255).
     * @return {StyledString} The StyledString instance with the RGB background color applied.
     */
    bgRgb(r, g, b) {
        this.text = colorizeRGB(this.text, r, g, b, true);
        return this;
    }
    /**
     * @description Converts the StyledString to a regular string.
     * @summary Returns the underlying text with all applied styling.
     * @return {string} The styled text as a regular string.
     */
    toString() {
        return this.text;
    }
}
/**
 * @description Applies styling to a given text string.
 * @summary This function takes a string and returns a StyledString object, which is an enhanced
 * version of the original string with additional methods for applying various ANSI color and style
 * options. It sets up a mapper object with methods for different styling operations and then
 * defines properties on the text string to make these methods accessible.
 *
 * @param {string[]} t  The input text to be styled.
 * @return {StyledString} A StyledString object with additional styling methods.
 *
 * @function style
 *
 * @memberOf StyledString
 */
function style(...t) {
    return new StyledString(t.join(" "));
}

/**
 * @description A standard output writer for handling command execution output.
 * @summary This class implements the OutputWriter interface and provides methods for
 * handling various types of output from command execution, including standard output,
 * error output, and exit codes. It also includes utility methods for parsing commands
 * and resolving or rejecting promises based on execution results.
 *
 * @template R - The type of the resolved value, defaulting to string.
 *
 * @param cmd - The command string to be executed.
 * @param lock - A PromiseExecutor to control the asynchronous flow.
 * @param args - Additional arguments (unused in the current implementation).
 *
 * @class
 * @example
 * ```typescript
 * import { StandardOutputWriter } from '@decaf-ts/utils';
 * import { PromiseExecutor } from '@decaf-ts/utils';
 *
 * // Create a promise executor
 * const executor: PromiseExecutor<string> = {
 *   resolve: (value) => console.log(`Resolved: ${value}`),
 *   reject: (error) => console.error(`Rejected: ${error.message}`)
 * };
 *
 * // Create a standard output writer
 * const writer = new StandardOutputWriter('ls -la', executor);
 *
 * // Use the writer to handle command output
 * writer.data('File list output...');
 * writer.exit(0, ['Command executed successfully']);
 * ```
 *
 * @mermaid
 * sequenceDiagram
 *   participant Client
 *   participant StandardOutputWriter
 *   participant Logger
 *   participant PromiseExecutor
 *
 *   Client->>StandardOutputWriter: new StandardOutputWriter(cmd, lock)
 *   StandardOutputWriter->>Logger: Logging.for(cmd)
 *
 *   Client->>StandardOutputWriter: data(chunk)
 *   StandardOutputWriter->>StandardOutputWriter: log("stdout", chunk)
 *   StandardOutputWriter->>Logger: logger.info(log)
 *
 *   Client->>StandardOutputWriter: error(chunk)
 *   StandardOutputWriter->>StandardOutputWriter: log("stderr", chunk)
 *   StandardOutputWriter->>Logger: logger.info(log)
 *
 *   Client->>StandardOutputWriter: exit(code, logs)
 *   StandardOutputWriter->>StandardOutputWriter: log("stdout", exitMessage)
 *   alt code === 0
 *     StandardOutputWriter->>StandardOutputWriter: resolve(logs)
 *     StandardOutputWriter->>PromiseExecutor: lock.resolve(reason)
 *   else code !== 0
 *     StandardOutputWriter->>StandardOutputWriter: reject(error)
 *     StandardOutputWriter->>PromiseExecutor: lock.reject(reason)
 *   end
 */
class StandardOutputWriter {
    constructor(cmd, lock, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ...args) {
        this.cmd = cmd;
        this.lock = lock;
        this.logger = Logging.for(this.cmd);
    }
    /**
     * @description Logs output to the console.
     * @summary Formats and logs the given data with a timestamp and type indicator.
     *
     * @param type - The type of output (stdout or stderr).
     * @param data - The data to be logged.
     */
    log(type, data) {
        data = Buffer.isBuffer(data) ? data.toString(Encoding) : data;
        const log = type === "stderr" ? style(data).red.text : data;
        this.logger.info(log);
    }
    /**
     * @description Handles standard output data.
     * @summary Logs the given chunk as standard output.
     *
     * @param chunk - The data chunk to be logged.
     */
    data(chunk) {
        this.log("stdout", String(chunk));
    }
    /**
     * @description Handles error output data.
     * @summary Logs the given chunk as error output.
     *
     * @param chunk - The error data chunk to be logged.
     */
    error(chunk) {
        this.log("stderr", String(chunk));
    }
    /**
     * @description Handles error objects.
     * @summary Logs the error message from the given Error object.
     *
     * @param err - The Error object to be logged.
     */
    errors(err) {
        this.log("stderr", `Error executing command exited : ${err}`);
    }
    /**
     * @description Handles the exit of a command.
     * @summary Logs the exit code and resolves or rejects the promise based on the code.
     *
     * @param code - The exit code of the command.
     * @param logs - Array of log messages to be processed before exiting.
     */
    exit(code, logs) {
        this.log("stdout", `command exited code : ${code === 0 ? style(code.toString()).green.text : style(code === null ? "null" : code.toString()).red.text}`);
        if (code === 0) {
            this.resolve(logs.map((l) => l.trim()).join("\n"));
        }
        else {
            this.reject(new Error(logs.length ? logs.join("\n") : code.toString()));
        }
    }
    /**
     * @description Parses a command string or array into components.
     * @summary Converts the command into a consistent format and stores it, then returns it split into command and arguments.
     *
     * @param command - The command as a string or array of strings.
     * @return A tuple containing the command and its arguments as separate elements.
     */
    parseCommand(command) {
        command = typeof command === "string" ? command.split(" ") : command;
        this.cmd = command.join(" ");
        return [command[0], command.slice(1)];
    }
    /**
     * @description Resolves the promise with a success message.
     * @summary Logs a success message and resolves the promise with the given reason.
     *
     * @param reason - The reason for resolving the promise.
     */
    resolve(reason) {
        this.log("stdout", `${this.cmd} executed successfully: ${style(reason ? "ran to completion" : reason).green}`);
        this.lock.resolve(reason);
    }
    /**
     * @description Rejects the promise with an error message.
     * @summary Logs an error message and rejects the promise with the given reason.
     *
     * @param reason - The reason for rejecting the promise, either a number (exit code) or a string.
     */
    reject(reason) {
        if (!(reason instanceof Error)) {
            reason = new Error(typeof reason === "number" ? `Exit code ${reason}` : reason);
        }
        this.log("stderr", `${this.cmd} failed to execute: ${style(reason.message).red}`);
        this.lock.reject(reason);
    }
}

function chainAbortController(argument0, ...remainder) {
    let signals;
    let controller;
    // normalize args
    if (argument0 instanceof AbortSignal) {
        controller = new AbortController();
        signals = [argument0, ...remainder];
    }
    else {
        controller = argument0;
        signals = remainder;
    }
    // if the controller is already aborted, exit early
    if (controller.signal.aborted) {
        return controller;
    }
    const handler = () => controller.abort();
    for (const signal of signals) {
        // check before adding! (and assume there is no possible way that the signal could
        // abort between the `if` check and adding the event listener)
        if (signal.aborted) {
            controller.abort();
            break;
        }
        signal.addEventListener("abort", handler, {
            once: true,
            signal: controller.signal,
        });
    }
    return controller;
}
/**
 * @description Spawns a command as a child process with output handling.
 * @summary Creates a child process to execute a command with support for piping multiple commands,
 * custom output handling, and abort control. This function handles the low-level details of
 * spawning processes and connecting their inputs/outputs when piping is used.
 *
 * @template R - The type of the processed output, defaulting to string.
 * @param {StandardOutputWriter<R>} output - The output writer to handle command output.
 * @param {string} command - The command to execute, can include pipe operators.
 * @param {SpawnOptionsWithoutStdio} opts - Options for the spawned process.
 * @param {AbortController} abort - Controller to abort the command execution.
 * @param {Logger} logger - Logger for recording command execution details.
 * @return {ChildProcessWithoutNullStreams} The spawned child process.
 *
 * @function spawnCommand
 *
 * @memberOf module:utils
 */
function spawnCommand(output, command, opts, abort, logger) {
    function spawnInner(command, controller) {
        const [cmd, argz] = output.parseCommand(command);
        logger.info(`Running command: ${cmd}`);
        logger.debug(`with args: ${argz.join(" ")}`);
        const childProcess = child_process.spawn(cmd, argz, {
            ...opts,
            cwd: opts.cwd || process.cwd(),
            env: Object.assign({}, process.env, opts.env, { PATH: process.env.PATH }),
            shell: opts.shell || false,
            signal: controller.signal,
        });
        logger.verbose(`pid : ${childProcess.pid}`);
        return childProcess;
    }
    const m = command.match(/[<>$#]/g);
    if (m)
        throw new Error(`Invalid command: ${command}. contains invalid characters: ${m}`);
    if (command.includes(" | ")) {
        const cmds = command.split(" | ");
        const spawns = [];
        const controllers = new Array(cmds.length);
        controllers[0] = abort;
        for (let i = 0; i < cmds.length; i++) {
            if (i !== 0)
                controllers[i] = chainAbortController(controllers[i - 1].signal);
            spawns.push(spawnInner(cmds[i], controllers[i]));
            if (i === 0)
                continue;
            spawns[i - 1].stdout.pipe(spawns[i].stdin);
        }
        return spawns[cmds.length - 1];
    }
    return spawnInner(command, abort);
}
/**
 * @description Executes a command asynchronously with customizable output handling.
 * @summary This function runs a shell command as a child process, providing fine-grained
 * control over its execution and output handling. It supports custom output writers,
 * allows for command abortion, and captures both stdout and stderr.
 *
 * @template R - The type of the resolved value from the command execution.
 *
 * @param command - The command to run, either as a string or an array of strings.
 * @param opts - Spawn options for the child process. Defaults to an empty object.
 * @param outputConstructor - Constructor for the output writer. Defaults to StandardOutputWriter.
 * @param args - Additional arguments to pass to the output constructor.
 * @return {CommandResult} A promise that resolves to the command result of type R.
 *
 * @function runCommand
 *
 * @mermaid
 * sequenceDiagram
 *   participant Caller
 *   participant runCommand
 *   participant OutputWriter
 *   participant ChildProcess
 *   Caller->>runCommand: Call with command and options
 *   runCommand->>OutputWriter: Create new instance
 *   runCommand->>OutputWriter: Parse command
 *   runCommand->>ChildProcess: Spawn process
 *   ChildProcess-->>runCommand: Return process object
 *   runCommand->>ChildProcess: Set up event listeners
 *   loop For each stdout data
 *     ChildProcess->>runCommand: Emit stdout data
 *     runCommand->>OutputWriter: Handle stdout data
 *   end
 *   loop For each stderr data
 *     ChildProcess->>runCommand: Emit stderr data
 *     runCommand->>OutputWriter: Handle stderr data
 *   end
 *   ChildProcess->>runCommand: Emit error (if any)
 *   runCommand->>OutputWriter: Handle error
 *   ChildProcess->>runCommand: Emit exit
 *   runCommand->>OutputWriter: Handle exit
 *   OutputWriter-->>runCommand: Resolve or reject promise
 *   runCommand-->>Caller: Return CommandResult
 *
 * @memberOf module:utils
 */
function runCommand(command, opts = {}, outputConstructor = (StandardOutputWriter), ...args) {
    const logger = Logging.for(runCommand);
    const abort = new AbortController();
    const result = {
        abort: abort,
        command: command,
        logs: [],
        errs: [],
    };
    const lock = new Promise((resolve, reject) => {
        let output;
        try {
            output = new outputConstructor(command, {
                resolve,
                reject,
            }, ...args);
            result.cmd = spawnCommand(output, command, opts, abort, logger);
        }
        catch (e) {
            return reject(new Error(`Error running command ${command}: ${e}`));
        }
        result.cmd.stdout.setEncoding("utf8");
        result.cmd.stdout.on("data", (chunk) => {
            chunk = chunk.toString();
            result.logs.push(chunk);
            output.data(chunk);
        });
        result.cmd.stderr.on("data", (data) => {
            data = data.toString();
            result.errs.push(data);
            output.error(data);
        });
        result.cmd.once("error", (err) => {
            output.exit(err.message, result.errs);
        });
        result.cmd.once("exit", (code = 0) => {
            if (abort.signal.aborted && code === null)
                code = AbortCode;
            output.exit(code, code === 0 ? result.logs : result.errs);
        });
    });
    Object.assign(result, {
        promise: lock,
        pipe: async (cb) => {
            const l = logger.for("pipe");
            try {
                l.verbose(`Executing pipe function ${command}...`);
                const result = await lock;
                l.verbose(`Piping output to ${cb.name}: ${result}`);
                return cb(result);
            }
            catch (e) {
                l.error(`Error piping command output: ${e}`);
                throw e;
            }
        },
    });
    return result;
}

const logger = Logging.for("fs");
/**
 * @description Patches a file with given values.
 * @summary Reads a file, applies patches using TextUtils, and writes the result back to the file.
 *
 * @param {string} path - The path to the file to be patched.
 * @param {Record<string, number | string>} values - The values to patch into the file.
 * @return {void}
 *
 * @function patchFile
 *
 * @mermaid
 * sequenceDiagram
 *   participant Caller
 *   participant patchFile
 *   participant fs
 *   participant readFile
 *   participant TextUtils
 *   participant writeFile
 *   Caller->>patchFile: Call with path and values
 *   patchFile->>fs: Check if file exists
 *   patchFile->>readFile: Read file content
 *   readFile->>fs: Read file
 *   fs-->>readFile: Return file content
 *   readFile-->>patchFile: Return file content
 *   patchFile->>TextUtils: Patch string
 *   TextUtils-->>patchFile: Return patched content
 *   patchFile->>writeFile: Write patched content
 *   writeFile->>fs: Write to file
 *   fs-->>writeFile: File written
 *   writeFile-->>patchFile: File written
 *   patchFile-->>Caller: Patching complete
 *
 * @memberOf module:utils
 */
function patchFile(path, values) {
    const log = logger.for(patchFile);
    if (!fs.existsSync(path))
        throw new Error(`File not found at path "${path}".`);
    let content = readFile(path);
    try {
        log.verbose(`Patching file "${path}"...`);
        log.debug(`with value: ${JSON.stringify(values)}`);
        content = patchString(content, values);
    }
    catch (error) {
        throw new Error(`Error patching file: ${error}`);
    }
    writeFile(path, content);
}
/**
 * @description Reads a file and returns its content.
 * @summary Reads the content of a file at the specified path and returns it as a string.
 *
 * @param {string} path - The path to the file to be read.
 * @return {string} The content of the file.
 *
 * @function readFile
 *
 * @memberOf module:utils
 */
function readFile(path) {
    const log = logger.for(readFile);
    try {
        log.verbose(`Reading file "${path}"...`);
        return fs.readFileSync(path, "utf8");
    }
    catch (error) {
        log.verbose(`Error reading file "${path}": ${error}`);
        throw new Error(`Error reading file "${path}": ${error}`);
    }
}
/**
 * @description Writes data to a file.
 * @summary Writes the provided data to a file at the specified path.
 *
 * @param {string} path - The path to the file to be written.
 * @param {string | Buffer} data - The data to be written to the file.
 * @return {void}
 *
 * @function writeFile
 *
 * @memberOf module:utils
 */
function writeFile(path, data) {
    const log = logger.for(writeFile);
    try {
        log.verbose(`Writing file "${path} with ${data.length} bytes...`);
        fs.writeFileSync(path, data, "utf8");
    }
    catch (error) {
        log.verbose(`Error writing file "${path}": ${error}`);
        throw new Error(`Error writing file "${path}": ${error}`);
    }
}
/**
 * @description Retrieves package information from package.json.
 * @summary Loads and parses the package.json file from a specified directory or the current working directory. Can return the entire package object or a specific property.
 * @param {string} [p=process.cwd()] - The directory path where the package.json file is located.
 * @param {string} [property] - Optional. The specific property to retrieve from package.json.
 * @return {object | string} The parsed contents of package.json or the value of the specified property.
 * @function getPackage
 * @mermaid
 * sequenceDiagram
 *   participant Caller
 *   participant getPackage
 *   participant readFile
 *   participant JSON
 *   Caller->>getPackage: Call with path and optional property
 *   getPackage->>readFile: Read package.json
 *   readFile-->>getPackage: Return file content
 *   getPackage->>JSON: Parse file content
 *   JSON-->>getPackage: Return parsed object
 *   alt property specified
 *     getPackage->>getPackage: Check if property exists
 *     alt property exists
 *       getPackage-->>Caller: Return property value
 *     else property doesn't exist
 *       getPackage-->>Caller: Throw Error
 *     end
 *   else no property specified
 *     getPackage-->>Caller: Return entire package object
 *   end
 * @memberOf module:utils
 */
function getPackage(p = process.cwd(), property) {
    let pkg;
    try {
        pkg = JSON.parse(readFile(path.join(p, `package.json`)));
    }
    catch (error) {
        throw new Error(`Failed to retrieve package information" ${error}`);
    }
    if (property) {
        if (!(property in pkg))
            throw new Error(`Property "${property}" not found in package.json`);
        return pkg[property];
    }
    return pkg;
}
/**
 * @description Sets an attribute in the package.json file.
 * @summary Updates a specific attribute in the package.json file with the provided value.
 *
 * @param {string} attr - The attribute name to set in package.json.
 * @param {string | number | object} value - The value to set for the attribute.
 * @param {string} [p=process.cwd()] - The directory path where the package.json file is located.
 * @return {void}
 *
 * @function setPackageAttribute
 *
 * @memberOf module:utils
 */
function setPackageAttribute(attr, value, p = process.cwd()) {
    const pkg = getPackage(p);
    pkg[attr] = value;
    writeFile(path.join(p, `package.json`), JSON.stringify(pkg, null, 2));
}
/**
 * @description Retrieves the version from package.json.
 * @summary A convenience function that calls getPackage to retrieve the "version" property from package.json.
 * @param {string} [p=process.cwd()] - The directory path where the package.json file is located.
 * @return {string} The version string from package.json.
 * @function getPackageVersion
 * @memberOf module:utils
 */
function getPackageVersion(p = process.cwd()) {
    return getPackage(p, "version");
}
/**
 * @description Retrieves all dependencies from the project.
 * @summary Executes 'npm ls --json' command to get a detailed list of all dependencies (production, development, and peer) and their versions.
 * @param {string} [path=process.cwd()] - The directory path of the project.
 * @return {Promise<{prod: Array<{name: string, version: string}>, dev: Array<{name: string, version: string}>, peer: Array<{name: string, version: string}>}>} An object containing arrays of production, development, and peer dependencies.
 * @function getDependencies
 * @mermaid
 * sequenceDiagram
 *   participant Caller
 *   participant getDependencies
 *   participant runCommand
 *   participant JSON
 *   Caller->>getDependencies: Call with optional path
 *   getDependencies->>runCommand: Execute 'npm ls --json'
 *   runCommand-->>getDependencies: Return command output
 *   getDependencies->>JSON: Parse command output
 *   JSON-->>getDependencies: Return parsed object
 *   getDependencies->>getDependencies: Process dependencies
 *   getDependencies-->>Caller: Return processed dependencies
 * @memberOf module:utils
 */
async function getDependencies(path = process.cwd()) {
    let pkg;
    try {
        pkg = JSON.parse(await runCommand(`npm ls --json`, { cwd: path }).promise);
    }
    catch (e) {
        throw new Error(`Failed to retrieve dependencies: ${e}`);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const mapper = (entry, index) => ({
        name: entry[0],
        version: entry[1].version,
    });
    return {
        prod: Object.entries(pkg.dependencies || {}).map(mapper),
        dev: Object.entries(pkg.devDependencies || {}).map(mapper),
        peer: Object.entries(pkg.peerDependencies || {}).map(mapper),
    };
}

const slogans = [
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That's Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That\u2019s Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That\u2019s Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That\u2019s Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That\u2019s Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That\u2019s Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That\u2019s Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That\u2019s Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That\u2019s Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "No caffeine, no chaos. Just clean code.",
        Tags: "Coffee-themed, Calm, Tech",
    },
    {
        Slogan: "Full flavor, no jitters. That\u2019s Decaf-TS.",
        Tags: "Coffee-themed, Cheerful",
    },
    {
        Slogan: "Chill fullstack. Powered by Decaf.",
        Tags: "Coffee-themed, Fun, Tech",
    },
    {
        Slogan: "Decaf-TS: Brewed for calm code.",
        Tags: "Coffee-themed, Branding",
    },
    {
        Slogan: "Smooth as your morning Decaf.",
        Tags: "Coffee-themed, Chill",
    },
    {
        Slogan: "All the kick, none of the crash.",
        Tags: "Coffee-themed, Energetic",
    },
    {
        Slogan: "Sip back and ship faster.",
        Tags: "Coffee-themed, Fun",
    },
    {
        Slogan: "Keep calm and code Decaf.",
        Tags: "Coffee-themed, Playful",
    },
    {
        Slogan: "Code without the caffeine shakes.",
        Tags: "Coffee-themed, Humorous",
    },
    {
        Slogan: "Your fullstack, decaffeinated.",
        Tags: "Coffee-themed, Technical",
    },
    {
        Slogan: "Decaf-TS: Where smart contracts meet smart interfaces.",
        Tags: "Blockchain, Smart Contracts, Tech",
    },
    {
        Slogan: "Ship dApps without the stress.",
        Tags: "Blockchain, Cheerful, Developer",
    },
    {
        Slogan: "No CRUD, no problem \u2014 Decaf your data.",
        Tags: "Data, No-CRUD, Chill",
    },
    {
        Slogan: "From DID to UI, without breaking a sweat.",
        Tags: "DID, SSI, UI, Calm",
    },
    {
        Slogan: "Decaf-TS: Your frontend already understands your smart contract.",
        Tags: "Smart Contracts, DX, Magic",
    },
    {
        Slogan: "Self-sovereign by design. Productive by default.",
        Tags: "SSI, Developer, Calm",
    },
    {
        Slogan: "Build once. Deploy everywhere. Decentralized and delightful.",
        Tags: "Blockchain, Multi-platform, Happy",
    },
    {
        Slogan: "Data that defines its own destiny.",
        Tags: "SSI, Data-driven, Empowerment",
    },
    {
        Slogan: "Goodbye CRUD, hello intent-based interfaces.",
        Tags: "No-CRUD, UI, Technical",
    },
    {
        Slogan: "The smoothest path from DID to done.",
        Tags: "DID, Workflow, Chill",
    },
    {
        Slogan: "Because your dApp deserves more than boilerplate.",
        Tags: "Blockchain, DevX, Efficiency",
    },
    {
        Slogan: "Own your data. Own your flow.",
        Tags: "SSI, Control, Ownership",
    },
    {
        Slogan: "Write logic like it belongs with the data \u2014 because it does.",
        Tags: "Data Logic, Developer, Smart",
    },
    {
        Slogan: "From smart contracts to smarter frontends.",
        Tags: "Smart Contracts, UI, DX",
    },
    {
        Slogan: "No caffeine. No CRUD. Just the future.",
        Tags: "No-CRUD, Coffee-themed, Futuristic",
    },
    {
        Slogan: "The future of web3 UX is Decaf.",
        Tags: "Blockchain, UX, Vision",
    },
    {
        Slogan: "Code with confidence. Govern with clarity.",
        Tags: "Blockchain, Governance, Calm",
    },
    {
        Slogan: "Interfaces that obey the data, not the other way around.",
        Tags: "UI, Data Logic, Self-aware",
    },
    {
        Slogan: "Brew business logic right into your bytes.",
        Tags: "Data Logic, Coffee-themed, Fun",
    },
    {
        Slogan: "DIDs done differently \u2014 and delightfully.",
        Tags: "DID, Self-Sovereign, Playful",
    },
    {
        Slogan: "Decaf-TS-TS: Where blockchain contracts meet smart interfaces.",
        Tags: "Blockchain, Smart Contracts, Tech",
    },
    {
        Slogan: "Ship dApps without the stress.",
        Tags: "Blockchain, Cheerful, Developer",
    },
    {
        Slogan: "No boilerplate, no problem \u2014 Decaf-TS your data.",
        Tags: "Data, No-CRUD, Chill",
    },
    {
        Slogan: "From DID to UI, without breaking a sweat.",
        Tags: "DID, SSI, UI, Calm",
    },
    {
        Slogan: "Decaf-TS-TS: Your frontend already understands your blockchain contract.",
        Tags: "Smart Contracts, DX, Magic",
    },
    {
        Slogan: "Self-sovereign by design. Productive by default.",
        Tags: "SSI, Developer, Calm",
    },
    {
        Slogan: "Build once. Deploy everywhere. Decentralized and delightful.",
        Tags: "Blockchain, Multi-platform, Happy",
    },
    {
        Slogan: "Data that defines its own destiny.",
        Tags: "SSI, Data-driven, Empowerment",
    },
    {
        Slogan: "Goodbye boilerplate, hello intent-based interfaces.",
        Tags: "No-CRUD, UI, Technical",
    },
    {
        Slogan: "The smoothest path from DID to done.",
        Tags: "DID, Workflow, Chill",
    },
    {
        Slogan: "Because your dApp deserves more than boilerplate.",
        Tags: "Blockchain, DevX, Efficiency",
    },
    {
        Slogan: "Own your data. Own your flow.",
        Tags: "SSI, Control, Ownership",
    },
    {
        Slogan: "Write logic like it belongs with the data \u2014 because it does.",
        Tags: "Data Logic, Developer, Smart",
    },
    {
        Slogan: "From blockchain contracts to smarter frontends.",
        Tags: "Smart Contracts, UI, DX",
    },
    {
        Slogan: "No caffeine. No boilerplate. Just the future.",
        Tags: "No-CRUD, Coffee-themed, Futuristic",
    },
    {
        Slogan: "The future of web3 UX is Decaf-TS.",
        Tags: "Blockchain, UX, Vision",
    },
    {
        Slogan: "Code with confidence. Govern with clarity.",
        Tags: "Blockchain, Governance, Calm",
    },
    {
        Slogan: "Interfaces that obey the data, not the other way around.",
        Tags: "UI, Data Logic, Self-aware",
    },
    {
        Slogan: "Brew business logic right into your bytes.",
        Tags: "Data Logic, Coffee-themed, Fun",
    },
    {
        Slogan: "DIDs done differently \u2014 and delightfully.",
        Tags: "DID, Self-Sovereign, Playful",
    },
    {
        Slogan: "Decaf-TS-TS: Where blockchain contracts meet smart interfaces.",
        Tags: "Blockchain, Smart Contracts, Tech",
    },
    {
        Slogan: "Ship dApps without the stress.",
        Tags: "Blockchain, Cheerful, Developer",
    },
    {
        Slogan: "No boilerplate, no problem \u2014 Decaf-TS your data.",
        Tags: "Data, No-CRUD, Chill",
    },
    {
        Slogan: "From DID to UI, without breaking a sweat.",
        Tags: "DID, SSI, UI, Calm",
    },
    {
        Slogan: "Decaf-TS-TS: Your frontend already understands your blockchain contract.",
        Tags: "Smart Contracts, DX, Magic",
    },
    {
        Slogan: "Self-sovereign by design. Productive by default.",
        Tags: "SSI, Developer, Calm",
    },
    {
        Slogan: "Build once. Deploy everywhere. Decentralized and delightful.",
        Tags: "Blockchain, Multi-platform, Happy",
    },
    {
        Slogan: "Data that defines its own destiny.",
        Tags: "SSI, Data-driven, Empowerment",
    },
    {
        Slogan: "Goodbye boilerplate, hello intent-based interfaces.",
        Tags: "No-CRUD, UI, Technical",
    },
    {
        Slogan: "The smoothest path from DID to done.",
        Tags: "DID, Workflow, Chill",
    },
    {
        Slogan: "Because your dApp deserves more than boilerplate.",
        Tags: "Blockchain, DevX, Efficiency",
    },
    {
        Slogan: "Own your data. Own your flow.",
        Tags: "SSI, Control, Ownership",
    },
    {
        Slogan: "Write logic like it belongs with the data \u2014 because it does.",
        Tags: "Data Logic, Developer, Smart",
    },
    {
        Slogan: "From blockchain contracts to smarter frontends.",
        Tags: "Smart Contracts, UI, DX",
    },
    {
        Slogan: "No caffeine. No boilerplate. Just the future.",
        Tags: "No-CRUD, Coffee-themed, Futuristic",
    },
    {
        Slogan: "The future of web3 UX is Decaf-TS.",
        Tags: "Blockchain, UX, Vision",
    },
    {
        Slogan: "Code with confidence. Govern with clarity.",
        Tags: "Blockchain, Governance, Calm",
    },
    {
        Slogan: "Interfaces that obey the data, not the other way around.",
        Tags: "UI, Data Logic, Self-aware",
    },
    {
        Slogan: "Brew business logic right into your bytes.",
        Tags: "Data Logic, Coffee-themed, Fun",
    },
    {
        Slogan: "DIDs done differently \u2014 and delightfully.",
        Tags: "DID, Self-Sovereign, Playful",
    },
    {
        Slogan: "Decaf-TS-TS: Where blockchain contracts meet smart interfaces.",
        Tags: "Blockchain, Smart Contracts, Tech",
    },
    {
        Slogan: "Ship dApps without the stress.",
        Tags: "Blockchain, Cheerful, Developer",
    },
    {
        Slogan: "No boilerplate, no problem \u2014 Decaf-TS your data.",
        Tags: "Data, No-CRUD, Chill",
    },
    {
        Slogan: "From DID to UI, without breaking a sweat.",
        Tags: "DID, SSI, UI, Calm",
    },
    {
        Slogan: "Decaf-TS-TS: Your frontend already understands your blockchain contract.",
        Tags: "Smart Contracts, DX, Magic",
    },
    {
        Slogan: "Self-sovereign by design. Productive by default.",
        Tags: "SSI, Developer, Calm",
    },
    {
        Slogan: "Build once. Deploy everywhere. Decentralized and delightful.",
        Tags: "Blockchain, Multi-platform, Happy",
    },
    {
        Slogan: "Data that defines its own destiny.",
        Tags: "SSI, Data-driven, Empowerment",
    },
    {
        Slogan: "Goodbye boilerplate, hello intent-based interfaces.",
        Tags: "No-CRUD, UI, Technical",
    },
    {
        Slogan: "The smoothest path from DID to done.",
        Tags: "DID, Workflow, Chill",
    },
    {
        Slogan: "Because your dApp deserves more than boilerplate.",
        Tags: "Blockchain, DevX, Efficiency",
    },
    {
        Slogan: "Own your data. Own your flow.",
        Tags: "SSI, Control, Ownership",
    },
    {
        Slogan: "Write logic like it belongs with the data \u2014 because it does.",
        Tags: "Data Logic, Developer, Smart",
    },
    {
        Slogan: "From blockchain contracts to smarter frontends.",
        Tags: "Smart Contracts, UI, DX",
    },
    {
        Slogan: "No caffeine. No boilerplate. Just the future.",
        Tags: "No-CRUD, Coffee-themed, Futuristic",
    },
    {
        Slogan: "The future of web3 UX is Decaf-TS.",
        Tags: "Blockchain, UX, Vision",
    },
    {
        Slogan: "Code with confidence. Govern with clarity.",
        Tags: "Blockchain, Governance, Calm",
    },
    {
        Slogan: "Interfaces that obey the data, not the other way around.",
        Tags: "UI, Data Logic, Self-aware",
    },
    {
        Slogan: "Brew business logic right into your bytes.",
        Tags: "Data Logic, Coffee-themed, Fun",
    },
    {
        Slogan: "DIDs done differently \u2014 and delightfully.",
        Tags: "DID, Self-Sovereign, Playful",
    },
    {
        Slogan: "Decaf-TS-TS: Where blockchain contracts meet smart interfaces.",
        Tags: "Blockchain, Smart Contracts, Tech",
    },
    {
        Slogan: "Ship dApps without the stress.",
        Tags: "Blockchain, Cheerful, Developer",
    },
    {
        Slogan: "No boilerplate, no problem \u2014 Decaf-TS your data.",
        Tags: "Data, No-CRUD, Chill",
    },
    {
        Slogan: "From DID to UI, without breaking a sweat.",
        Tags: "DID, SSI, UI, Calm",
    },
    {
        Slogan: "Decaf-TS-TS: Your frontend already understands your blockchain contract.",
        Tags: "Smart Contracts, DX, Magic",
    },
    {
        Slogan: "Self-sovereign by design. Productive by default.",
        Tags: "SSI, Developer, Calm",
    },
    {
        Slogan: "Build once. Deploy everywhere. Decentralized and delightful.",
        Tags: "Blockchain, Multi-platform, Happy",
    },
    {
        Slogan: "Data that defines its own destiny.",
        Tags: "SSI, Data-driven, Empowerment",
    },
    {
        Slogan: "Goodbye boilerplate, hello intent-based interfaces.",
        Tags: "No-CRUD, UI, Technical",
    },
    {
        Slogan: "The smoothest path from DID to done.",
        Tags: "DID, Workflow, Chill",
    },
    {
        Slogan: "Because your dApp deserves more than boilerplate.",
        Tags: "Blockchain, DevX, Efficiency",
    },
    {
        Slogan: "Own your data. Own your flow.",
        Tags: "SSI, Control, Ownership",
    },
    {
        Slogan: "Write logic like it belongs with the data \u2014 because it does.",
        Tags: "Data Logic, Developer, Smart",
    },
    {
        Slogan: "From blockchain contracts to smarter frontends.",
        Tags: "Smart Contracts, UI, DX",
    },
    {
        Slogan: "No caffeine. No boilerplate. Just the future.",
        Tags: "No-CRUD, Coffee-themed, Futuristic",
    },
    {
        Slogan: "The future of web3 UX is Decaf-TS.",
        Tags: "Blockchain, UX, Vision",
    },
    {
        Slogan: "Code with confidence. Govern with clarity.",
        Tags: "Blockchain, Governance, Calm",
    },
    {
        Slogan: "Interfaces that obey the data, not the other way around.",
        Tags: "UI, Data Logic, Self-aware",
    },
    {
        Slogan: "Brew business logic right into your bytes.",
        Tags: "Data Logic, Coffee-themed, Fun",
    },
    {
        Slogan: "DIDs done differently \u2014 and delightfully.",
        Tags: "DID, Self-Sovereign, Playful",
    },
];

/**
 * @description Array of ANSI color codes for banner styling.
 * @summary Defines a set of ANSI color codes used to style the banner text.
 * @memberOf module:utils
 */
const colors = [
    "\x1b[38;5;215m", // soft orange
    "\x1b[38;5;209m", // coral
    "\x1b[38;5;205m", // pink
    "\x1b[38;5;210m", // peachy
    "\x1b[38;5;217m", // salmon
    "\x1b[38;5;216m", // light coral
    "\x1b[38;5;224m", // light peach
    "\x1b[38;5;230m", // soft cream
    "\x1b[38;5;230m", // soft cream
];
/**
 * @description Prints a styled banner to the console.
 * @summary Generates and prints a colorful ASCII art banner with a random slogan.
 * @param {Logger} [logger] - Optional logger for verbose output.
 * @memberOf module:utils
 * @function printBanner
 * @mermaid
 * sequenceDiagram
 *   participant printBanner
 *   participant getSlogan
 *   participant padEnd
 *   participant console
 *   printBanner->>getSlogan: Call getSlogan()
 *   getSlogan-->>printBanner: Return random slogan
 *   printBanner->>printBanner: Create banner ASCII art
 *   printBanner->>printBanner: Split banner into lines
 *   printBanner->>printBanner: Calculate max line length
 *   printBanner->>padEnd: Call padEnd with slogan
 *   padEnd-->>printBanner: Return padded slogan line
 *   loop For each banner line
 *     printBanner->>style: Call style(line)
 *     style-->>printBanner: Return styled line
 *     printBanner->>console: Log styled line
 *   end
 */
function printBanner(logger) {
    const message = getSlogan();
    const banner = `#                 ░▒▓███████▓▒░  ░▒▓████████▓▒░  ░▒▓██████▓▒░   ░▒▓██████▓▒░  ░▒▓████████▓▒░       ░▒▓████████▓▒░  ░▒▓███████▓▒░ 
#      ( (        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░                 ░▒▓█▓▒░     ░▒▓█▓▒░        
#       ) )       ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░                 ░▒▓█▓▒░     ░▒▓█▓▒░        
#    [=======]    ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓██████▓▒░   ░▒▓█▓▒░        ░▒▓████████▓▒░ ░▒▓██████▓▒░            ░▒▓█▓▒░      ░▒▓██████▓▒░  
#     \`-----´     ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░                 ░▒▓█▓▒░            ░▒▓█▓▒░ 
#                 ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░                 ░▒▓█▓▒░            ░▒▓█▓▒░ 
#                 ░▒▓███████▓▒░  ░▒▓████████▓▒░  ░▒▓██████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░                 ░▒▓█▓▒░     ░▒▓███████▓▒░  
#`.split("\n");
    const maxLength = banner.reduce((max, line) => Math.max(max, line.length), 0);
    banner.push(`#  ${message.padStart(maxLength - 3)}`);
    banner.forEach((line, index) => {
        (logger ? logger.info.bind(logger) : console.log.bind(console))(style(line || "").raw(colors[index]).text);
    });
}
/**
 * @description Retrieves a slogan from the predefined list.
 * @summary Fetches a random slogan or a specific one by index from the slogans list.
 * @param {number} [i] - Optional index to retrieve a specific slogan.
 * @return {string} The selected slogan.
 * @function getSlogan
 * @memberOf module:utils
 * @mermaid
 * sequenceDiagram
 *   participant getSlogan
 *   participant Math.random
 *   participant slogans
 *   alt i is undefined
 *     getSlogan->>Math.random: Generate random index
 *     Math.random-->>getSlogan: Return random index
 *   else i is defined
 *     Note over getSlogan: Use provided index
 *   end
 *   getSlogan->>slogans: Access slogan at index
 *   slogans-->>getSlogan: Return slogan
 *   alt Error occurs
 *     getSlogan->>getSlogan: Throw error
 *   end
 *   getSlogan-->>Caller: Return slogan
 */
function getSlogan(i) {
    try {
        i =
            typeof i === "undefined" ? Math.floor(Math.random() * slogans.length) : i;
        return slogans[i].Slogan;
    }
    catch (error) {
        throw new Error(`Failed to retrieve slogans: ${error}`);
    }
}

/**
 * @description Determines if the current environment is a browser by checking the prototype chain of the global object.
 * @summary Checks if the code is running in a browser environment.
 * @return {boolean} True if the environment is a browser, false otherwise.
 * @function isBrowser
 * @memberOf module:utils
 */
function isBrowser() {
    return (Object.getPrototypeOf(Object.getPrototypeOf(globalThis)) !==
        Object.prototype);
}

/**
 * @class ObjectAccumulator
 * @template T - The type of the accumulated object, extends object
 * @description A class that accumulates objects and provides type-safe access to their properties.
 * It allows for dynamic addition of properties while maintaining type information.
 * @summary Accumulates objects and maintains type information for accumulated properties
 * @memberOf utils
 */
class ObjectAccumulator {
    constructor() {
        Object.defineProperty(this, "__size", {
            value: 0,
            writable: true,
            configurable: false,
            enumerable: false,
        });
    }
    /**
     * @protected
     * @description Expands the accumulator with properties from a new object
     * @summary Adds new properties to the accumulator
     * @template V - The type of the object being expanded
     * @param {V} value - The object to expand with
     * @returns {void}
     */
    expand(value) {
        Object.entries(value).forEach(([k, v]) => {
            Object.defineProperty(this, k, {
                get: () => v,
                set: (val) => {
                    v = val;
                },
                configurable: true,
                enumerable: true,
            });
        });
    }
    /**
     * @description Accumulates a new object into the accumulator
     * @summary Adds properties from a new object to the accumulator, maintaining type information
     * @template V - The type of the object being accumulated
     * @param {V} value - The object to accumulate
     * @returns A new ObjectAccumulator instance with updated type information
     * @mermaid
     * sequenceDiagram
     *   participant A as Accumulator
     *   participant O as Object
     *   A->>O: Get entries
     *   loop For each entry
     *     A->>A: Define property
     *   end
     *   A->>A: Update size
     *   A->>A: Return updated accumulator
     */
    accumulate(value) {
        this.expand(value);
        this.__size = this.__size + Object.keys(value).length;
        return this;
    }
    /**
     * @description Retrieves a value from the accumulator by its key
     * @summary Gets a value from the accumulated object using a type-safe key
     * @template T - value type
     * @template K - The key type, must be a key of this
     * @param {K} key - The key of the value to retrieve
     * @returns The value associated with the key
     */
    get(key) {
        if (!(key in this))
            throw new Error(`Key ${key} does not exist in accumulator. Available keys: ${this.keys().join(", ")}`);
        return this[key];
    }
    /**
     * @description Retrieves a value from the accumulator by its key
     * @summary Gets a value from the accumulated object using a type-safe key
     * @param {string} key - The key of the value to retrieve
     * @param {any} value - The key of the value to retrieve
     */
    put(key, value) {
        return this.accumulate({ [key]: value });
    }
    /**
     * @description Checks if a key exists in the accumulator
     * @summary Determines whether the accumulator contains a specific key
     * @param {string} key - The key to check for existence
     * @returns {boolean} True if the key exists, false otherwise
     */
    has(key) {
        return !!this[key];
    }
    /**
     * @description Removes a key-value pair from the accumulator
     * @summary Deletes a property from the accumulated object
     * @param {string} key - The key of the property to remove
     * @returns {} The accumulator instance with the specified property removed
     */
    remove(key) {
        if (!(key in this))
            return this;
        delete this[key];
        this.__size--;
        return this;
    }
    /**
     * @description Retrieves all keys from the accumulator
     * @summary Gets an array of all accumulated property keys
     * @returns {string[]} An array of keys as strings
     */
    keys() {
        return Object.keys(this);
    }
    /**
     * @description Retrieves all values from the accumulator
     * @summary Gets an array of all accumulated property values
     * @returns An array of values
     */
    values() {
        return Object.values(this);
    }
    /**
     * @description Gets the number of key-value pairs in the accumulator
     * @summary Returns the count of accumulated properties
     * @returns {number} The number of key-value pairs
     */
    size() {
        return this.__size;
    }
    /**
     * @description Clears all accumulated key-value pairs
     * @summary Removes all properties from the accumulator and returns a new empty instance
     * @returns {ObjectAccumulator<never>} A new empty ObjectAccumulator instance
     */
    clear() {
        return new ObjectAccumulator();
    }
    /**
     * @description Executes a callback for each key-value pair in the accumulator
     * @summary Iterates over all accumulated properties, calling a function for each
     * @param {function(any, string, number): void} callback - The function to execute for each entry
     * @returns {void}
     */
    forEach(callback) {
        Object.entries(this).forEach(([key, value], i) => callback(value, key, i));
    }
    /**
     * @description Creates a new array with the results of calling a provided function on every element in the accumulator
     * @summary Maps each accumulated property to a new value using a callback function
     * @template R - The type of the mapped values
     * @param {function(any, string,number): R} callback - Function that produces an element of the new array
     * @returns {R[]} A new array with each element being the result of the callback function
     */
    map(callback) {
        return Object.entries(this).map(([key, value], i) => callback(value, key, i));
    }
}

/**
 * @class Environment
 * @extends {ObjectAccumulator<T>}
 * @template T
 * @description A class representing an environment with accumulation capabilities.
 * @summary Manages environment-related data and provides methods for accumulation and key retrieval.
 * @param {T} [initialData] - The initial data to populate the environment with.
 */
class Environment extends ObjectAccumulator {
    /**
     * @static
     * @protected
     * @description A factory function for creating Environment instances.
     * @summary Defines how new instances of the Environment class should be created.
     * @return {Environment<any>} A new instance of the Environment class.
     */
    static { this.factory = () => new Environment(); }
    constructor() {
        super();
    }
    /**
     * @description Retrieves a value from the environment
     * @summary Gets a value from the environment variables, handling browser and Node.js environments differently
     * @param {string} k - The key to retrieve from the environment
     * @return {unknown} The value from the environment, or undefined if not found
     */
    fromEnv(k) {
        let env;
        if (isBrowser()) {
            env = globalThis["ENV"];
        }
        else {
            env = globalThis.process.env;
            k = toENVFormat(k);
        }
        return env[k];
    }
    /**
     * @description Expands an object into the environment
     * @summary Defines properties on the environment object that can be accessed as getters and setters
     * @template V - Type of the object being expanded
     * @param {V} value - The object to expand into the environment
     * @return {void}
     */
    expand(value) {
        Object.entries(value).forEach(([k, v]) => {
            Object.defineProperty(this, k, {
                get: () => {
                    const fromEnv = this.fromEnv(k);
                    return typeof fromEnv === "undefined" ? v : fromEnv;
                },
                set: (val) => {
                    v = val;
                },
                configurable: true,
                enumerable: true,
            });
        });
    }
    /**
     * @protected
     * @static
     * @description Retrieves or creates the singleton instance of the Environment class.
     * @summary Ensures only one instance of the Environment class exists.
     * @template E
     * @param {...unknown[]} args - Arguments to pass to the factory function if a new instance is created.
     * @return {E} The singleton instance of the Environment class.
     */
    static instance(...args) {
        Environment._instance = !Environment._instance
            ? Environment.factory(...args)
            : Environment._instance;
        return Environment._instance;
    }
    /**
     * @static
     * @description Accumulates the given value into the environment.
     * @summary Adds new properties to the environment from the provided object.
     * @template V
     * @param {V} value - The object to accumulate into the environment.
     * @return {V} The updated environment instance.
     */
    static accumulate(value) {
        const instance = Environment.instance();
        return instance.accumulate(value);
    }
    /**
     * @static
     * @description Retrieves the keys of the environment, optionally converting them to ENV format.
     * @summary Gets all keys in the environment, with an option to format them for environment variables.
     * @param {boolean} [toEnv=true] - Whether to convert the keys to ENV format.
     * @return {string[]} An array of keys from the environment.
     */
    static keys(toEnv = true) {
        return Environment.instance()
            .keys()
            .map((k) => (toEnv ? toENVFormat(k) : k));
    }
}

/**
 * @class Command
 * @abstract
 * @template I - The type of input options for the command.
 * @template R - The return type of the command execution.
 * @memberOf module:utils
 * @description Abstract base class for command implementation.
 * @summary Provides a structure for creating command-line interface commands with input handling, logging, and execution flow.
 *
 * @param {string} name - The name of the command.
 * @param {CommandOptions<I>} [inputs] - The input options for the command.
 * @param {string[]} [requirements] - The list of required dependencies for the command.
 */
class Command {
    constructor(name, inputs = {}, requirements = []) {
        this.name = name;
        this.inputs = inputs;
        this.requirements = requirements;
        if (!Command.log) {
            Object.defineProperty(Command, "log", {
                writable: false,
                value: Logging.for(Command.name),
            });
            this.log = Command.log;
        }
        this.log = Command.log.for(this.name);
        this.inputs = Object.assign({}, DefaultCommandOptions, inputs);
    }
    /**
     * @protected
     * @async
     * @description Checks if all required dependencies are present.
     * @summary Retrieves the list of dependencies and compares it against the required dependencies for the command.
     * @returns {Promise<void>} A promise that resolves when the check is complete.
     *
     * @mermaid
     * sequenceDiagram
     *   participant Command
     *   participant getDependencies
     *   participant Set
     *   Command->>getDependencies: Call
     *   getDependencies-->>Command: Return {prod, dev, peer}
     *   Command->>Set: Create Set from prod, dev, peer
     *   Set-->>Command: Return unique dependencies
     *   Command->>Command: Compare against requirements
     *   alt Missing dependencies
     *     Command->>Command: Add to missing list
     *   end
     *   Note over Command: If missing.length > 0, handle missing dependencies
     */
    async checkRequirements() {
        const { prod, dev, peer } = await getDependencies();
        const missing = [];
        const fullList = Array.from(new Set([...prod, ...dev, ...peer]).values()).map((d) => d.name);
        for (const dep of this.requirements)
            if (!fullList.includes(dep))
                missing.push(dep);
        if (!missing.length)
            return;
    }
    /**
     * @protected
     * @description Provides help information for the command.
     * @summary This method should be overridden in derived classes to provide specific help information.
     * @param {ParseArgsResult} args - The parsed command-line arguments.
     * @returns {void}
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    help(args) {
        return this.log.info(`This is help. I'm no use because I should have been overridden.`);
    }
    /**
     * @async
     * @description Executes the command.
     * @summary This method handles the overall execution flow of the command, including parsing arguments,
     * setting up logging, checking for version or help requests, and running the command.
     * @returns {Promise<R | string | void>} A promise that resolves with the command's result.
     *
     * @mermaid
     * sequenceDiagram
     *   participant Command
     *   participant UserInput
     *   participant Logging
     *   participant getPackageVersion
     *   participant printBanner
     *   Command->>UserInput: parseArgs(inputs)
     *   UserInput-->>Command: Return ParseArgsResult
     *   Command->>Command: Process options
     *   Command->>Logging: setConfig(options)
     *   alt version requested
     *     Command->>getPackageVersion: Call
     *     getPackageVersion-->>Command: Return version
     *   else help requested
     *     Command->>Command: help(args)
     *   else banner requested
     *     Command->>printBanner: Call
     *   end
     *   Command->>Command: run(args)
     *   alt error occurs
     *     Command->>Command: Log error
     *   end
     *   Command-->>Command: Return result
     */
    async execute() {
        const args = UserInput.parseArgs(this.inputs);
        const env = Environment.accumulate(DefaultLoggingConfig)
            .accumulate(DefaultCommandValues)
            .accumulate(args.values);
        const { timestamp, verbose, version, help, logLevel, logStyle, banner } = env;
        this.log.setConfig({
            ...env,
            timestamp: !!timestamp,
            level: logLevel,
            style: !!logStyle,
            verbose: verbose || 0,
        });
        if (version) {
            return getPackageVersion();
        }
        if (help) {
            return this.help(args);
        }
        if (banner)
            printBanner(this.log.for(printBanner, {
                timestamp: false,
                style: false,
                context: false,
                logLevel: false,
            }));
        let result;
        try {
            result = await this.run(env);
        }
        catch (e) {
            this.log.error(`Error while running provided cli function: ${e}`);
            throw e;
        }
        return result;
    }
}

/**
 * @description A simple HTTP client for downloading files.
 * @summary This class provides functionality to download files from HTTPS URLs.
 * It uses Node.js built-in https module to make requests.
 *
 * @class HttpClient
 */
class HttpClient {
    static { this.log = Logging.for(HttpClient); }
    /**
     * @description Downloads a file from a given URL.
     * @summary This method sends a GET request to the specified URL and returns the response body as a string.
     * It handles different scenarios such as non-200 status codes and network errors.
     *
     * @param url - The URL of the file to download.
     * @return A promise that resolves with the file content as a string.
     *
     * @mermaid
     * sequenceDiagram
     *   participant Client
     *   participant HttpClient
     *   participant HTTPS
     *   participant Server
     *   Client->>HttpClient: downloadFile(url)
     *   HttpClient->>HTTPS: get(url)
     *   HTTPS->>Server: GET request
     *   Server-->>HTTPS: Response
     *   HTTPS-->>HttpClient: Response object
     *   alt Status code is 200
     *     loop For each data chunk
     *       HTTPS->>HttpClient: 'data' event
     *       HttpClient->>HttpClient: Accumulate data
     *     end
     *     HTTPS->>HttpClient: 'end' event
     *     HttpClient-->>Client: Resolve with data
     *   else Status code is not 200
     *     HttpClient-->>Client: Reject with error
     *   end
     */
    static async downloadFile(url) {
        return new Promise((resolve, reject) => {
            function request(url) {
                url = encodeURI(url);
                https.get(url, (res) => {
                    if (res.statusCode === 301 || res.statusCode === 307)
                        return request(res.headers.location);
                    if (res.statusCode !== 200) {
                        HttpClient.log.error(`Failed to fetch ${url} (status: ${res.statusCode})`);
                        return reject(new Error(`Failed to fetch ${url}`));
                    }
                    let data = "";
                    res.on("data", (chunk) => {
                        data += chunk;
                    });
                    res.on("error", (error) => {
                        reject(error);
                    });
                    res.on("end", () => {
                        resolve(data);
                    });
                });
            }
            request(url);
        });
    }
}

var Modes;
(function (Modes) {
    Modes["CJS"] = "commonjs";
    Modes["ESM"] = "es2022";
})(Modes || (Modes = {}));
var BuildMode;
(function (BuildMode) {
    BuildMode["BUILD"] = "build";
    BuildMode["BUNDLE"] = "bundle";
    BuildMode["ALL"] = "all";
})(BuildMode || (BuildMode = {}));
({
    buildMode: {
        default: BuildMode.ALL,
    }});

const baseUrl = "https://raw.githubusercontent.com/decaf-ts/ts-workspace/master";
const options = {
    templates: [
        ".github/ISSUE_TEMPLATE/bug_report.md",
        ".github/ISSUE_TEMPLATE/feature_request.md",
        ".github/FUNDING.yml",
    ],
    workflows: [
        ".github/workflows/codeql-analysis.yml",
        ".github/workflows/jest-coverage.yaml",
        ".github/workflows/nodejs-build-prod.yaml",
        ".github/workflows/pages.yaml",
        ".github/workflows/publish-on-release.yaml",
        ".github/workflows/release-on-tag.yaml",
        ".github/workflows/snyk-analysis.yaml",
    ],
    ide: [
        ".idea/runConfigurations/All Tests.run.xml",
        ".idea/runConfigurations/build.run.xml",
        ".idea/runConfigurations/build_prod.run.xml",
        ".idea/runConfigurations/coverage.run.xml",
        ".idea/runConfigurations/docs.run.xml",
        ".idea/runConfigurations/drawings.run.xml",
        ".idea/runConfigurations/flash-forward.run.xml",
        ".idea/runConfigurations/Integration_Tests.run.xml",
        ".idea/runConfigurations/Bundling_Tests.run.xml",
        ".idea/runConfigurations/lint-fix.run.xml",
        ".idea/runConfigurations/release.run.xml",
        ".idea/runConfigurations/test_circular.run.xml",
        ".idea/runConfigurations/uml.run.xml",
        ".idea/runConfigurations/Unit Tests.run.xml",
        ".idea/runConfigurations/update-scripts.run.xml",
    ],
    docs: [
        "workdocs/tutorials/Contributing.md",
        "workdocs/tutorials/Documentation.md",
        "workdocs/tutorials/For Developers.md",
        "workdocs/2-Badges.md",
        "workdocs/jsdocs.json",
        "workdocs/readme-md.json",
    ],
    styles: [".prettierrc", "eslint.config.js"],
    scripts: [
        "bin/update-scripts.cjs",
        "bin/tag-release.cjs",
        "bin/build-scripts.cjs",
    ],
    tests: ["jest.config.ts", "workdocs/reports/jest.coverage.config.ts"],
    typescript: ["tsconfig.json"],
    docker: ["Dockerfile"],
    automation: [
        "workdocs/confluence/Continuous Integration-Deployment/GitHub.md",
        "workdocs/confluence/Continuous Integration-Deployment/Jira.md",
        "workdocs/confluence/Continuous Integration-Deployment/Teams.md",
    ],
};
const argzz = {
    // init attributes
    boot: {
        type: "boolean",
    },
    org: {
        type: "string",
        short: "o",
    },
    name: {
        type: "string",
        short: "n",
        default: undefined,
    },
    author: {
        type: "string",
        short: "a",
        default: undefined,
    },
    // update attributes
    all: {
        type: "boolean",
    },
    license: {
        type: "string",
        message: "Pick the license",
    },
    scripts: {
        type: "boolean",
    },
    styles: {
        type: "boolean",
    },
    docs: {
        type: "boolean",
    },
    ide: {
        type: "boolean",
    },
    workflows: {
        type: "boolean",
    },
    templates: {
        type: "boolean",
    },
    typescript: {
        type: "boolean",
    },
    docker: {
        type: "boolean",
    },
    pkg: {
        type: "boolean",
    },
    dependencies: {
        type: "boolean",
    },
    tests: {
        type: "boolean",
    },
    automation: {
        type: "boolean",
    },
};
/**
 * @class TemplateSync
 * @extends {Command}
 * @category scripts
 * @description A command-line tool for synchronizing project templates and configurations.
 * @summary This class provides functionality to download and update various project files and configurations from a remote repository.
 * It supports updating licenses, IDE configurations, scripts, styles, documentation, workflows, and templates.
 *
 * @param {CommandOptions} args - The command options for TemplateSync
 */
class TemplateSync extends Command {
    constructor() {
        super("TemplateSync", argzz);
        this.replacements = {};
        /**
         * @description Downloads style configuration files.
         * @returns {Promise<void>}
         */
        this.getStyles = () => this.downloadOption("styles");
        /**
         * @description Downloads template files.
         * @returns {Promise<void>}
         */
        this.getTemplates = () => this.downloadOption("templates");
        /**
         * @description Downloads workflow configuration files.
         * @returns {Promise<void>}
         */
        this.getWorkflows = () => this.downloadOption("workflows");
        /**
         * @description Downloads documentation files.
         * @returns {Promise<void>}
         */
        this.getDocs = () => this.downloadOption("docs");
        /**
         * @description Downloads typescript config files.
         * @returns {Promise<void>}
         */
        this.getTypescript = () => this.downloadOption("typescript");
        /**
         * @description Downloads automation documentation files.
         * @returns {Promise<void>}
         */
        this.getAutomation = () => this.downloadOption("automation");
        /**
         * @description Downloads automation documentation files.
         * @returns {Promise<void>}
         */
        this.getTests = () => this.downloadOption("tests");
        /**
         * @description Downloads docker image files.
         * @returns {Promise<void>}
         */
        this.getDocker = () => this.downloadOption("docker");
    }
    loadValuesFromPackage() {
        const p = process.cwd();
        const author = getPackage(p, "author");
        const scopedName = getPackage(p, "name");
        let name = scopedName;
        let org;
        if (name.startsWith("@")) {
            const split = name.split("/");
            name = split[1];
            org = split[0].replace("@", "");
        }
        ["Tiago Venceslau", "TiagoVenceslau", "${author}"].forEach((el) => (this.replacements[el] = author));
        ["TS-Workspace", "ts-workspace", "${name}"].forEach((el) => (this.replacements[el] = name));
        ["decaf-ts", "${org}"].forEach((el) => (this.replacements[el] = org || '""'));
        this.replacements["${org_or_owner}"] = org || name;
    }
    /**
     * @description Downloads files for a specific option category.
     * @summary This method downloads all files associated with a given option key from the remote repository.
     * @param {string} key - The key representing the option category to download
     * @returns {Promise<void>}
     * @throws {Error} If the specified option key is not found
     */
    async downloadOption(key) {
        if (!(key in options)) {
            throw new Error(`Option "${key}" not found in options`);
        }
        const files = options[key];
        for (const file of files) {
            this.log.info(`Downloading ${file}`);
            let data = await HttpClient.downloadFile(`${baseUrl}/${file}`);
            data = patchString(data, this.replacements);
            writeFile(path.join(process.cwd(), file), data);
        }
    }
    /**
     * @description Downloads and sets up the specified license.
     * @summary This method downloads the chosen license file, saves it to the project, and updates the package.json license field.
     * @param {"MIT" | "GPL" | "Apache" | "LGPL" | "AGPL"} license - The license to download and set up
     * @returns {Promise<void>}
     */
    async getLicense(license) {
        this.log.info(`Downloading ${license} license`);
        const url = `${baseUrl}/workdocs/licenses/${license}.md`;
        let data = await HttpClient.downloadFile(url);
        data = patchString(data, this.replacements);
        writeFile(path.join(process.cwd(), "LICENSE.md"), data);
        setPackageAttribute("license", license);
    }
    /**
     * @description Downloads IDE configuration files.
     * @returns {Promise<void>}
     */
    async getIde() {
        fs.mkdirSync(path.join(process.cwd(), ".idea", "runConfigurations"), {
            recursive: true,
        });
        await this.downloadOption("ide");
    }
    /**
     * @description Update npm scripts
     * @returns {Promise<void>}
     */
    async getScripts() {
        await this.downloadOption("scripts");
        this.log.info("please re-run the command");
        process.exit(0);
    }
    async initPackage(pkgName, author, license) {
        try {
            const pkg = getPackage();
            delete pkg[SetupScriptKey];
            pkg.name = pkgName;
            pkg.version = "0.0.1";
            pkg.author = author;
            pkg.license = license;
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
        }
        catch (e) {
            throw new Error(`Error fixing package.json: ${e}`);
        }
    }
    async updatePackageScrips() {
        try {
            const originalPkg = JSON.parse(await HttpClient.downloadFile(`${baseUrl}/package.json`));
            const { scripts } = originalPkg;
            const pkg = getPackage();
            Object.keys(pkg.scripts).forEach((key) => {
                if (key in scripts) {
                    const replaced = patchString(scripts[key], this.replacements);
                    if (replaced !== scripts[key]) {
                        pkg.scripts[key] = replaced;
                    }
                }
            });
            pkg["exports"]["require"] = originalPkg["exports"]["require"];
            pkg["exports"]["import"] = originalPkg["exports"]["import"];
            pkg["types"] = originalPkg["types"];
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
        }
        catch (e) {
            throw new Error(`Error fixing package.json scripts: ${e}`);
        }
    }
    async createTokenFiles() {
        const log = this.log.for(this.createTokenFiles);
        const gitToken = await UserInput.insistForText("token", "please input your github token", (res) => {
            return !!res.match(/^ghp_[0-9a-zA-Z]{36}$/g);
        });
        Object.values(Tokens).forEach((token) => {
            try {
                let status;
                try {
                    status = fs.existsSync(token);
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                }
                catch (e) {
                    log.info(`Token file ${token} not found. Creating a new one...`);
                    fs.writeFileSync(token, token === ".token" ? gitToken : "");
                    return;
                }
                if (!status) {
                    fs.writeFileSync(token, token === ".token" ? gitToken : "");
                }
            }
            catch (e) {
                throw new Error(`Error creating token file ${token}: ${e}`);
            }
        });
    }
    async getOrg() {
        const org = await UserInput.askText("Organization", "Enter the organization name (will be used to scope your npm project. leave blank to create a unscoped project):");
        const confirmation = await UserInput.askConfirmation("Confirm organization", "Is this organization correct?", true);
        if (!confirmation)
            return this.getOrg();
        return org;
    }
    async auditFix() {
        return await runCommand("npm audit fix --force").promise;
    }
    patchFiles() {
        const files = [
            ...fs
                .readdirSync(path.join(process.cwd(), "src"), {
                recursive: true,
                withFileTypes: true,
            })
                .filter((entry) => entry.isFile())
                .map((entry) => path.join(entry.parentPath, entry.name)),
            ...fs
                .readdirSync(path.join(process.cwd(), "workdocs"), {
                recursive: true,
                withFileTypes: true,
            })
                .filter((entry) => entry.isFile() && entry.name.endsWith(".md"))
                .map((entry) => path.join(entry.parentPath, entry.name)),
            path.join(process.cwd(), ".gitlab-ci.yml"),
            path.join(process.cwd(), "workdocs", "jsdocs.json"),
        ];
        for (const file of files) {
            patchFile(file, this.replacements);
        }
    }
    async updateDependencies() {
        try {
            const originalPkg = JSON.parse(await HttpClient.downloadFile(`${baseUrl}/package.json`));
            const { devDependencies } = originalPkg;
            const pkg = getPackage();
            Object.keys(pkg.scripts).forEach((key) => {
                if (key in devDependencies) {
                    const replaced = devDependencies[key];
                    if (replaced !== devDependencies[key]) {
                        pkg["devDependencies"] =
                            pkg["devDependencies"] || {};
                        pkg["devDependencies"][key] = replaced;
                    }
                }
            });
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
            await runCommand("npm install").promise;
        }
        catch (e) {
            throw new Error(`Error fixing package.json dependencies: ${e}`);
        }
    }
    /**
     * @description Runs the template synchronization process.
     * @summary This method orchestrates the downloading of various project components based on the provided arguments.
     * @param {ParseArgsResult} args - The parsed command-line arguments
     * @returns {Promise<void>}
     *
     * @mermaid
     * sequenceDiagram
     *   participant T as TemplateSync
     *   participant L as getLicense
     *   participant I as getIde
     *   participant S as getScripts
     *   participant St as getStyles
     *   participant D as getDocs
     *   participant W as getWorkflows
     *   participant Te as getTemplates
     *   T->>T: Parse arguments
     *   alt all flag is true
     *     T->>T: Set all component flags to true
     *   end
     *   alt license is specified
     *     T->>L: getLicense(license)
     *   end
     *   alt ide flag is true
     *     T->>I: getIde()
     *   end
     *   alt scripts flag is true
     *     T->>S: getScripts()
     *   end
     *   alt styles flag is true
     *     T->>St: getStyles()
     *   end
     *   alt docs flag is true
     *     T->>D: getDocs()
     *   end
     *   alt workflows flag is true
     *     T->>W: getWorkflows()
     *   end
     *   alt templates flag is true
     *     T->>Te: getTemplates()
     *   end
     */
    async run(args) {
        let { license } = args;
        const { boot } = args;
        let { all, scripts, styles, docs, ide, workflows, templates, docker, typescript, dependencies, tests, automation, pkg, } = args;
        if (scripts ||
            styles ||
            docs ||
            ide ||
            workflows ||
            templates ||
            docker ||
            typescript ||
            automation ||
            dependencies ||
            tests ||
            pkg)
            all = false;
        if (boot) {
            const org = await this.getOrg();
            const name = await UserInput.insistForText("Project name", "Enter the project name:", (res) => res.length > 1);
            const author = await UserInput.insistForText("Author", "Enter the author name:", (res) => res.length > 1);
            const pkgName = org ? `@${org}/${name}` : name;
            await this.initPackage(pkgName, author, license);
            await this.createTokenFiles();
            await this.auditFix();
            this.patchFiles();
        }
        if (all) {
            scripts = false;
            styles = true;
            docs = true;
            ide = true;
            workflows = true;
            templates = true;
            docker = true;
            typescript = true;
            pkg = true;
            dependencies = true;
            tests = true;
            automation = false;
        }
        if (typeof scripts === "undefined")
            scripts = await UserInput.askConfirmation("scripts", "Do you want to get scripts?", true);
        if (scripts)
            await this.getScripts();
        this.loadValuesFromPackage();
        if (!all && typeof license === "undefined") {
            const confirmation = await UserInput.askConfirmation("license", "Do you want to set a license?", true);
            if (confirmation)
                license = await UserInput.insistForText("license", "Enter the desired License (MIT|GPL|Apache|LGPL|AGPL):", (val) => !!val && !!val.match(/^(MIT|GPL|Apache|LGPL|AGPL)$/g));
        }
        if (typeof license !== "undefined")
            await this.getLicense(license);
        if (typeof ide === "undefined")
            ide = await UserInput.askConfirmation("ide", "Do you want to get ide configs?", true);
        if (ide)
            await this.getIde();
        if (typeof typescript === "undefined")
            typescript = await UserInput.askConfirmation("typescript", "Do you want to get typescript configs?", true);
        if (typescript)
            await this.getTypescript();
        if (typeof docker === "undefined")
            docker = await UserInput.askConfirmation("docker", "Do you want to get docker configs?", true);
        if (docker)
            await this.getDocker();
        if (typeof automation === "undefined")
            automation = await UserInput.askConfirmation("automation", "Do you want to get automation configs?", true);
        if (automation)
            await this.getAutomation();
        if (typeof styles === "undefined")
            styles = await UserInput.askConfirmation("styles", "Do you want to get styles?", true);
        if (styles)
            await this.getStyles();
        if (typeof docs === "undefined")
            docs = await UserInput.askConfirmation("docs", "Do you want to get docs?", true);
        if (docs)
            await this.getDocs();
        if (typeof workflows === "undefined")
            workflows = await UserInput.askConfirmation("workflows", "Do you want to get workflows?", true);
        if (workflows)
            await this.getWorkflows();
        if (typeof templates === "undefined")
            templates = await UserInput.askConfirmation("templates", "Do you want to get templates?", true);
        if (templates)
            await this.getTemplates();
        if (typeof pkg === "undefined")
            pkg = await UserInput.askConfirmation("pkg", "Do you want to update your package.json scripts?", true);
        if (pkg)
            await this.updatePackageScrips();
        if (typeof tests === "undefined")
            tests = await UserInput.askConfirmation("pkg", "Do you want to update your test configs?", true);
        if (tests)
            await this.getTests();
        if (typeof dependencies === "undefined")
            dependencies = await UserInput.askConfirmation("pkg", "Do you want to update dev dependencies?", true);
        if (dependencies)
            await this.updateDependencies();
    }
}

new TemplateSync()
    .execute()
    .then(() => TemplateSync.log.info("Template updated successfully. Please confirm all changes before commiting"))
    .catch((e) => {
    TemplateSync.log.error(`Error preparing template: ${e}`);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
